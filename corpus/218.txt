 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I have to implement a priority queue using binary heap in C for the university assignment. Program should get the n values from input, when value is 0, it should print the ID number(so, if task that was added as 5th element has the highest priority 7, print "5") and remove the highest-priority task from queue, and when value>0 it should add new node. To implement ID's and priority, I used arrays of structs.  The task would be quite simple, if not the fact that it should also print lower ID's if the priority of elements are the same... I've done my research, but the only advice that I've managed to found is to modify the fragments of typical heap functions (insertkey, heapify) to also look for elements' ID. I've tried to do this, but I have no idea what went wrong - elements are still not sorted in the way I want them to be. I would be grateful for any piece of advice and tips!  1 Answer 1  Instead of incorporating the logic directly into the heap implementation, write a comparison function that considers the id if the priorities are the same:  This function returns true if 's priority is less than 's. If both priorities are equal, it returns true if 's id is smaller than 's.  Now update your heap code. Wherever you compare the priorities in the original code, now just call the function:  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  