 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  how can i create a class iterator that iterates over a generic map nodes without causing memory leaks? my map has a class that's called "pair" which is generic and has a value and a key. also a class that's called node that contains a pair and pointers to the next node and previous nodes. the map itself contains the head node. and the map size .. this code work,my problem is that it has memory leaks. since the iterator is a class (we were asked to implemented as a class not only a node) and it contains a pointer to a Node which has a pair. we can't delete the pair by deleting the node whenever we want to use the iterator destructor cause that deletes completely the pair and the node causing elements loss in the map. can you give some advice how to implemented correctly without memory leaks? and very important : the map function end() should return a random value that is not one of the map elements (that's why i set it to be NULL)  you stated the executables were to be in the top directory, then generated them in sub directories and did not copy them to the top directory.  regarding this line: This says there are one (or more) libraries in the 'main' directory. But your question fails to disclose that critical detail  there are several header files involved, but your question fails to specify exactly where each header file is located. I made some guesses in my answer.  2 Answers 2  You need to use a relative path that accurately reflects your directory structure. Example:  Basically, you'll want to create a "Makefile" in each subdirectory that you "include" and that defines the rules for building each of the targets in those subdirectories (and using the paths relative to the root Makefile directory in the rules), and in your top-level Makefile, you will similarly refer to those files / targets by their paths relative to the top-level Makefile directory (rather than by filename).  89.6k1515 gold badges133133 silver badges195195 bronze badges  3  i tried that, not i'm getting an error : undefined reference to all the functions . because the header and the c files are in the main directory and the test is in the sub dir.  @RawanShu If this answer helped (by moving you forward even if you still have an error) then you should accept it. If you still have other issues you can create a new question to get the new issue solved. (Your errors are likely because your compilation commands are not properly passing the necessary directories to the header files, etc.)  when defining a macro, if it will only be evaluated once, use rather than  when giving a macro name to a external executable, always supply the full path  Note: the answer contains spaces at the beginning of the make rule commands which have to be replaced with tab to implement the makefile syntax  The question fails to specify the location of certain header files and fails to indicate which header files are used by certain .c files.  The assumption is that all header files not specifically located in the directory layout are actually in the 'main/' directory.  Those explicit compile rules were the header file dependencies are not known have this text  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  