 Insert a node in Binary Search Tree Iteratively  A recursive approach to insert a new node in a BST is already discussed in the post: Binary Search Tree | SET 1. In this post, an iterative approach to insert a node in BST is discussed.  Insertion of a Key  A new key is always inserted at the leaf node. Start searching a key from root till we hit a leaf node. Once a leaf node is found, the new node is added as a child of the leaf node. Example:  Input:To the given BST insert 40  Output:  Explanation:The new node 40 is a leaf node. Start searching from the root till a leaf node is hit, i.e while searching if a new value is greater than current node move to right child else to left child. Input:To the given BST insert 600  Output:  Explanation:The new node 600 is a leaf node. Start searching from the root till a leaf node is hit, i.e while searching if a new value is greater than current node move to right child else to left child.  It is to be noted that new keys are always inserted at the leaf node.  Start from root and run a loop until a null pointer is reached.  Keep the previous pointer of the current node stored.  If the current node is null then create and insert the new node there and make it as one of the children of the parent/previous node depending on its value.  If the value of current node is less than the new value then move to the right child of current node else move to the left child.  Below is the implementation of the above approach:  C++  Java  Python3  C#  Javascript  Output:  Complexity Analysis:  Time Complexity : O(h), where h is height of binary search tree. In worst case the height is equal to number of nodes.  Space Complexity: O(1), no extra space is required.  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  