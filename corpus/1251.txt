 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I am solving this problem: Farudulent Activity Notification on HackerRank. I am done with my code and is working, but it is inefficient as well for very large inputs.  I don't know but after all my efforts, I am able to give out good solution to a problem of a MEDIUM LEVEL but this happens every time for very large inputs. I have tried optimizing my code and still I get timeout errors. My agendas for this question and upcoming questions are:  How to put efficiency for very large inputs. What kind of intellect it requires.  How to reach to that level. What should I prepare for this.  Code optimization  I am open to learning, and I am really desperate to learn how to write a more advanced and optimized code to make myself better. I am open to do hard work.  My Algorithm:  For this problem we must go from till  Take a variable for the next variable to be compared, my case is the variable  Pass the values to the particular array to the method for counting  Add it to the count variable  Increment iterate variable  Code:  Now previously I was doing two loops, adding the items to the and passing it to the the . But now I have optimized it and made it sort of .  I don't know but this code is not getting submitted for all TCs due to . There is no problem in operation part. It is just with the efficiency of the code.  I have read upon this article: HackerRank Environment to learn about the timing issue. For Python/Python 3 it is 10 seconds. My code is definitely taking more than that for .  My code has successfully passed 3 TCs though. Please help. Thank You :)  7 Answers 7  Since nobody actually gave me the answer. I really have to look to the solution in the leaderboard. I found every solution too much to assimilate, just one solution to be a good one.  Disclaimer: This is some advanced coding technique so you need to have a better understanding of the language before you proceed with the solution.  The Solution's algo:  This takes two arrays, one is t having total number of array elem and other one let us name it as just the in the sorted manner  A function to return the median value with the list containing first d elements  With the loop starting from the d and going till n-1,  Remove the first element from the using PYTHON BISECT ALGORITHM and add it the to the listD using PYTHON INSORT ALGORITHM in sorted manner  Return noti  Code:  Here, we've used and , what they do is basically, return the position of the element to be added and returns the sorted list after adding the elements. So the headache of sorting the array again and again is reduced, hence the time complexity is reduced and solves all the test cases.  Similarly to what you were doing, this approach uses two functions: one for the activity notifications and another to find the median.  Finding the median is easy. The approach used was to check if the lookback days for median spending, d, is odd or even and, based on that information, calculate accordingly.  Then, when it comes to activityNotifications, the key point was to know that expenditure[i] is between 0 and 200, including both numbers (201).  All in all  This will pass all the current 8 Test cases in HackerRank  Note that there's also a great answer in Code Review using pandas. While it is very interesting take to solve the problem, it won't work in HackerRank  I don't know why no one mentioned Median of medians algorithm, whose complexity of finding a median from an array is O(n) and its irrelevant of the order of the array.  We can use counting sort technique here. The tricky thing here is that we cannot sort the entire range here every time we shift our range forward as this will increase the time complexity, instead, we should only modify the frequency array and then we can find the median simply summing the frequencies from the start of the range till sum becomes greater or equal to d/2.  An important point to note here: Median for odd and even 'd' differs slightly.  for the very first window sort it - which takes O(dlog(d))  since its already sorted we can take advantage of this, for every next window just replace the new-incoming number into window with the number that is leaving the window and sort its correct position from there - which takes - O(d)  I have spend a lot of time on this question and have come up with a new algorithm of my own and its also giving Time Limit Exceeded (TLE) and only passed three test cases.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  