 Modify contents of Linked List  Given a singly linked list containing n nodes. Modify the value of first half nodes such that 1st node’s new value is equal to the last node’s value minus first node’s current value, 2nd node’s new value is equal to the second last node’s value minus 2nd node’s current value, likewise for first half nodes. If n is odd then the value of the middle node remains unchanged. (No extra memory to be used).  Split the list from the middle. Perform front and back split. If the number of elements is odd, the extra element should go in the 1st(front) list.  C++  Java  Python3  C#  Javascript  Output:  Time Complexity: O(n), where n in the number of nodes.  Another approach (Using Stack) : 1. Find the starting point of second half Linked List. 2. Push all elements of second half list into stack s. 3. Traverse list starting from head using temp until stack is not empty and do Modify temp->data by subtracting the top element of stack for every node.  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  