 Check if a Binary Tree is BST : Simple and Efficient Approach  Given a Binary Tree, the task is to check whether the given binary tree is Binary Search Tree or not. A binary search tree (BST) is a node-based binary tree data structure which has the following properties.  The left subtree of a node contains only nodes with keys less than the node’s key.  The right subtree of a node contains only nodes with keys greater than the node’s key.  Both the left and right subtrees must also be binary search trees.  From the above properties it naturally follows that:  We have already discussed different approaches to solve this problem in the previous article. In this article, we will discuss a simple yet efficient approach to solve the above problem. The idea is to use Inorder traversal and keep track of the previously visited node’s value. Since the inorder traversal of a BST generates a sorted array as output, So, the previous element should always be less than or equals to the current element. While doing In-Order traversal, we can keep track of previously visited Node’s value and if the value of the currently visited node is less than the previous value, then the tree is not BST.  Below is the implementation of the above approach:  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  