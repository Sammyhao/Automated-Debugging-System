 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I am trying to add an item into my Hashtable, I have used a lot of printf's to see what's happening but it looks like it's supposed to add it, but it's really not.  So here's my code:  I am trying to imitate the GCC Compiler. with my hash table  and my insert method  I keep on getting null values on my search for method. Which shouldn't be the case. Am I inserting it correctly?  Code is formatted by indenting it four spaces (there is a button for it too), not by using <pre> tags.  3 Answers 3  You are setting to (apparently) a copy of the provided ; then you immediately overwrite that pointer with the function argument, which is unlikely to be right.  222k3535 gold badges297297 silver badges441441 bronze badges  4  im trying to get past just adding myu first node. haha i can't even get that. once i get that, then i can add more nodes onto the next so that part is ignored  @Kevin - The part @caf is referring to isn't the commented out part. overwrites the previous value, which was memory you allocated with . You're throwing away the memory you allocated (which is a leak) and replacing it with whatever parameter the user passed to the function.  IM RETARDED!! I kept on recreating my table every time i find a specific #define narrative!!! I FORGOT TO RESET MY BOOLEAN!!  strcmp() returns 0 when a successful comparison is made. You need to change your if() condition in the search function.  Furthermore, this block in the insert routine:  is useless, since you just assign newly allocated memory to node directly afterwards.  12.4k66 gold badges3434 silver badges3939 bronze badges  1  I think that block is meant for when the OP can get the "adding nodes" part to work, to check if the node is already added, and will probably return upon doing so before allocating a new node when completed.  If your hash function is reliable (and it has to be to be a hash function), your search function shouldn't have to iterate over all the linked lists. You shouldn't need that outer loop - just set to and search that list for the element. If it's not in that list, it shouldn't be in any list, and if it is then you're insertion function is definitely wrong.  In fact, your search function should return either or -1.  Additionally, what should happen if someone uses the same key for different objects?  68.9k1515 gold badges123123 silver badges180180 bronze badges  1  This is the first time i'm messing with hash tables. I'm still struggling haha. trying to understand, and I normally don't program in C. I'm more of a wpf/c#  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  