 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  when I send invalid xml to my web services on websphere server, I get java heap space:  Everything works ok  Exception:  EDIT:  PS: spring validation doesnt help because it is after websphere stuff. When I send invalid xml agains xsd (for example string instead of number) then it works:  because of :  PS2:  when I tried to increase heap space from 2gb to 4gb there is another exception on the same spot:  7 Answers 7  This looks like a Websphere bug. Using Spring-WS I got the some error:  java.lang.OutOfMemoryError: Java heap space at com.ibm.ws.webservices.utils.BAIS.create(BAIS.java:74)  I managed to solved this way: put in /AppServer/lib/ext this library: axis2-saaj-1.6.2.jar (worked for me on Websphere v8.5 and Spring-WS v2.2.0, but you may have to change the version).  Explanation  When Spring-WS asks for a javax.xml.soap.MessageFactory implementation it gets a com.ibm.ws.webservices.engine.soap.MessageFactoryImpl instance (from Websphere runtime) instead of a com.sun.xml.internal.messaging.saaj.soap.MessageFactoryImpl instance (from JVM), which leads to the mentioned error. The axis2-saaj library also contains a javax.xml.soap.MessageFactory implementation: org.apache.axis2.saaj.MessageFactoryImpl. This one is now used when axis2-saaj is in lib/ext folder and error is gone (I also configured PARENT LAST classpath, don't know if it matters here)  Update  @hudi your solution is correct, I just tested it. Sadly, cannot upvote you.  the best way is to use spring payloadinterceptor to validate the incoming xml against the XML schema before it allows to be parsed further... Sample code:  if you have defined your validating interceptor, then this should be called before websphere based library is invoked for actually parsing of message....so in case invalid xml, the processing should stops there with SOAP fault to consumer.....do one thing, define user defined custom interceptor and see whether interceptor is really being invoked...  sorry but you are wrong see my updated answer. interceptors are called AFTER webshere stuff about saaj  You just found a bug. Please report the bug. Since this is related to the parsing. You can do two things.  First of all you can take a memory dump. Just dump the memory (or profile this using visualvm and make a memory profile run). This way you understand what polutes the memory.  Second you can correct the issue you found. I do it all the way with third party code. So just before they step into parsing the snippet you do another step evaluating if the xml is correct without checking for shema. Just use a parser run with no shema involved.  In order to provide a modified implementation use the sourcecode or if not available, decompile it or rename the class and provide a new implementation class extending from this. If it is a private method or feature you need to access just modify the byte code.  In order to inject your version just add your class to your class path (or the classpath of the websphere) and put it in front of it. Usually your code is preceeded for any library code. This way you can override every implementation detail of any library as long as you control the classpath (usually by setting it within the java.exe.  So just add an additional test for correctness before this bugged version is issued. And report the bug and also blog about it.  If you have questions or need a tool advice just ask. I do this on a regular basis. With open source and non-open source software. Also great for other things like extending features.  5,33144 gold badges4040 silver badges7070 bronze badges  2  hm and how you extending non-open source software ? I tried to check well formed xml with spring-ws before websphere do it so I hope it is ok. My example also work on another servers (I tried tomcat) but it is not necessary  Non-open source software is just software. Bytecode can be decompiled and if you havent done this try it with your own code. It is amazing how it looks. Just like the sources. If they obfusicate just rename the class (byte code manipulation) and provide your own code extending from this renamed one. Its that simple. Try it yourself it is a great asset in your toolbox.  I tried to fix this by my own. I examined how spring-ws validate xml and tried to do it before websphere. Here is code. I test it and it is working for me.  After Martin advise I try to decompile ibm code and I think problem is in this procedure:  Customer using WebSphere 8.5.5.x with SDK 1.7 and using SAAJ with Spring frmae work may encounter OutOfMemoryError when sending SOAP request that that has invalid request. This is due to bug fix went into SDK 1.7 and later versions.  IBM has fixed this issue through IBM SDK APAR IV73614.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  