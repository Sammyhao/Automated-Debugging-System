 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I am trying to write a function which gets a matrix and the dimension (square), and returns the inverse matrix in C. Further, I will use it in solving a least square matrix solution function!  I have got most of the ideas and algorithms from online sources and tried to change them according to my program. When I build and run it (in Code::Blocks and ideone.com online compiler) I get either runtime error or irrelevant results. Would be great if someone could help me.  Do not ignore compiler warnings. A warning you don't understand means you don't know what you are doing. Don't even think about maybe trying to to run the program until you are warning free.  @n.m.: I completely agree, But the standard warnings of most compilers are actually not sufficient - expecially for beginners. One should always have enabled, I generally recommend to add and . The latter should be watched carefully.  If you're doing a least square fit for polynomials, there's way to avoid having to invert a matrix. opls.rtf .  @opls.rtf thanks for the comment. I am trying to solve a AX=B problem by calculating the pseudo-inverse of A. Do you know if the mentioned way would work in this case?  2 Answers 2  This line contains a major error, one that will cause problems when is not equal to (which is what usually happens on 64-bit platforms):  Same with the allocation for .  You are allocating an array of pointers to int, so the correct here would be  Later you have a problematic line here:  Normally a pointer-to-pointer to some type is not the same an array-of-arrays of some type (see e.g. this old answer of mine to help you understand why).  374k3333 gold badges376376 silver badges576576 bronze badges  7  Thanks for your comment. So you mean I should insert (sizeof(int) size) instead ? Sorry I am not really into it.  So, now it is done with allocation :) And now the determinant function. Shall I define it as CalcDeterminant(int D, double **matrix) ? this case I get runtime error again, and don't know how to call it in main or the Inverse function.  @MRM If you declare the argument as a pointer-to-pointer then you get a problem when calling with the matrix from the function, so no matter how you do it you will have to rework more than just the function. The easiest is probably to allocate and initialize the matrix in the function, and let the function take a argument.  @MRM Also, you should learn how to use a debugger, because then you can catch the crash "in action", and see exactly where in your code it happens, and will also be able to check the function call stack as well as the values of involved variables.  When allocating memory, always use the correct type for the size. You use everywhere, even if or pointer is required. Hint: use . This way, you always use the correct size.  11.7k44 gold badges2727 silver badges4949 bronze badges  4  So as I said to Joachim, this is just a little part of a function, and there are 2 major function calls in que. And I'm a beginner (just worked with matlab!). If double ** Func(...) is a appropriate to return 2d array, what would you suggest to use? I have tried many types, all from online sources, but this was the most suitable one for the rest of the program.  @MRM: That is an array of pointers to . I strongly recommend to read a C book; that will cover all the basics. Please understand we cannot provide a tutorial about that here, but that is vital to understand C. Without that knowledge, you will eventually fall into the next tar-pit. A 2D array is actually passed the same as a 1D array - by . The semantics are informal in C.  @MRM: Blindly following some internet recipe is always a bad idea. You might take such as a first idea, but then look up the concepts you do not understand in a book or tutorial (both can be found for free or money).  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  