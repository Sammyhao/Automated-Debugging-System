 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I was solving a problem on spoj. Problem has a simple recursive solution.  Problem: Given an array of numbers of size n, select a set of numbers such that no two elements in the set are consecutive and sum of subset elements will be as close as possible to k, but should not exceed it.  My Recursive Approach  I used a approach similar to knapsack, at dividing the problem such that one includes the current element and other ignores it.  Later as it is exponential in nature, I used map (in C++) to do memoization to reduce complexity.  My source code:  I checked for given test cases. It cleared them. But I am getting wrong answer on submission.  EDIT: Earlier my output format was wrong, so I was getting Wrong Answer. But, now its showing Time Limit Exceeded. I think bottom-up approach would be helpful, but I am having problem in formulating one. I am approaching it as bottom-up knapsack, but having some difficulties in exact formulation.  1 Answer 1  To my understanding, you almost have the solution. If the recurrence relation is correct but too inefficient, you just have change the recursion to iteration. Apparently, you already have the array which represents the states and their respective values. Basically you should be able to solve fill with three nested loops for , and , which would increase respectively to ensure that each value from which is needed has already been calculated. Then you replace the recursive calls to with accesses to .  It would perhaps be easier if you changed the signature of to or use a three-dimensional array for .  Solved. But I done it in a slightly different way. I used an array dp[n][k], where dp[i][j] denotes the max value attainable which is less than or equal to j using first i elements. And filled it in bottom up approach. Thanks anyways. :D  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  