 Implement Stack using Queues  The problem is opposite of this post. We are given a Queue data structure that supports standard operations like enqueue() and dequeue(). We need to implement a Stack data structure using only instances of Queue and queue operations allowed on the instances.  A stack can be implemented using two queues. Let stack to be implemented be ‘s’ and queues used to implement be ‘q1’ and ‘q2’. Stack ‘s’ can be implemented in two ways: Method 1 (By making push operation costly) This method makes sure that newly entered element is always at the front of ‘q1’, so that pop operation just dequeues from ‘q1’. ‘q2’ is used to put every new element at front of ‘q1’.  push(s, x) operation’s step are described below:  Enqueue x to q2  One by one dequeue everything from q1 and enqueue to q2.  Swap the names of q1 and q2  C++  Java  Python3  C#  Output :  Method 2 (By making pop operation costly) In push operation, the new element is always enqueued to q1. In pop() operation, if q2 is empty then all the elements except the last, are moved to q2. Finally the last element is dequeued from q1 and returned.  push(s, x) operation:  Enqueue x to q1 (assuming size of q1 is unlimited).  pop(s) operation:  One by one dequeue everything except the last element from q1 and enqueue to q2.  Dequeue the last item of q1, the dequeued item is result, store it.  C++  Java  Python3  C#  Output :  References: Implement Stack using Two Queues This article is compiled by Sumit Jain and reviewed by GeeksforGeeks team. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  