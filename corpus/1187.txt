 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  Is there any or in .NET that allows you to access it's property for the entry in the order in which it was added to the collection?  6 Answers 6  A can retrieve elements by index (but you cannot ask for the index of a specific key or element). So,  However, it behaves oddly (compared to an IDictionary) when you add a key multiple times:  The behaviour is well documented, however.  Caution: does not implement .  As an aside: does not have any index you can use, but as long as you only add elements, and never remove any, the order of the elements is the insertion order. Note that this is a detail of Microsoft's current implementation: the documentation explicitly states that the order is random, so this behavior can change in future versions of the .NET Framework or Mono.  14.5k22 gold badges3333 silver badges4545 bronze badges  2  This is great. An alternative to Hashtable and Dictionary that is simple. Also, the note about Dictionary's default sort order is very helpful.  If this is something that you need to keep track of efficiently, then you are using the wrong data structure. Instead, you should use a where the key is tagged with the index of when it was added (or a timestamp) and a custom that compares two keys based on the index (or the timestamp).  Is there any Hashtable or Dictionary in .NET that allows you to access it's .Index property for the entry in the order in which it was added to the collection?  No. You can enumarate over all the items in a Hastable or Dictionary, but these are not gaurenteed to be in any sort of order (most likely they are not)  You would have to either use a different data structure altogether, (such as SortedDictionary or SortedList) or use a separate list to store the order in which they were added. You would want to wrap the ordered list and your dictionary/hashtable in another class to keep them synched.  You can use a separate list to store the elements in the order they are added. Something along the lines of the following sample:  Take a look at the OrderedDictionary class. Not only can you access it via keys, but also via an index (position).  An alternative is to create an array of stuctures, so instead of using  you create a structure with the key/value like:  Using this method you can add extra dimensions to the list without too much effort, just add a new member in the struct.  Note, if you need to modify items in the list after they have been added you will have to change the struct into a class. See this page for more info on this issue: error changing value of structure in a list  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  