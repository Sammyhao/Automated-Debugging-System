 Minimum edges to be removed from given undirected graph to remove any existing path between nodes A and B  Given two integers N and M denoting the number of vertices and edges in the graph and array edges[][] of size M, denoting an edge between edges[i][0] and edges[i][1], the task is to find the minimum edges directly connected with node B that must be removed such that there exist no path between vertex A and B.  Examples:  Input: N = 4, A = 3, B = 2, edges[][] = {{3, 1}, {3, 4}, {1, 2}, {4, 2}} Output: 2 Explanation: The edges at index 2 and 3 i.e., {1, 2} and {4, 2} must be removed as they both are in the path from vertex A to vertex B.  Approach: The given problem can be solved using a Depth-first search algorithm. It can be observed that all the edges associated with the ending vertex B and exist in any path from starting node A and ending at node B must be removed. Hence, perform a dfs starting from node A and maintain all the visited vertices from it. Follow the steps below to solve the problem:  Create an adjacency matrix g[][] which stores the edges between two nodes.  Initialize an array v[], to mark the node which can be reached from node A.  Create a variable cnt, which stores the count of nodes needed to be removed. Initially, cnt = 0.  Iterate through all the nodes and if it is reachable from A and is directly connected with B, increment the value of cnt.  The value stored in cnt is the required answer.  Below is the implementation of the above approach:  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  