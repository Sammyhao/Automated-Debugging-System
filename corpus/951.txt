 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I would like to find the most efficent way to check the node with minimum value in a Binary Search Tree. I'm not thinking to do it in a certain programming language right now, I would like just to think the most efficent algorithm.  What do you think about this:  My question is how should I dig deeper until I get the last left node. Also I tried to explain the steps. Do you think that is the best way to do it?  What do you mean by efficient. Algorithmically, Verbosity of code, Memory Efficiency. Easiest is to visit every node store best on the way. See stackoverflow.com/questions/15306452/….  efficiency = smallest complexity. I already saw that example and don't help me to much. I need to understand how to go deep after I check the first left node. What and how I do it if I have 10 nodes let's say.  3 Answers 3  If you have a proper BST you can continue going down the left child:  If a node does not have a left child (Null) you know the node you're currently in has the minimum value. The easiest approach is via recursion:  To start the search simply call the function above with the root as node parameter. The tree above will have a code path as follows:  minBST(node with value 10) -> has left child -> minBST(node with value 5)  minBST(node with value 5) -> has left child -> minBST(node with value 1)  minBST(node with value 1) -> has no left child -> return 1  If your tree contains n nodes and is balanced (equal depth everywhere) this will take O(log_2 n) operations and is the fastest approach without additional bookkeeping. The fact that the tree is balanced is important to get the best performance, if you want to maintain your tree balanced have a look at red-black trees.  The complexity is O(log(n)), that the best you can get assuming the tree is balanced.  The second conditional, is not required. If you remove it then the loop is never entered and the function will correctly return .  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  