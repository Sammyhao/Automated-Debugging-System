 How to sort an Array in C# | Array.Sort() Method Set â€“ 1  Last Updated : 10 May, 2019  Array.Sort Method is used to sort elements in a one-dimensional array. There are 17 methods in the overload list of this method as follows:  Sort<TKey,TValue>(TKey[], TValue[], IComparer<TKey>) Method  Sort<TKey,TValue>(TKey[], TValue[], Int32, Int32) Method  Sort<TKey,TValue>(TKey[], TValue[], Int32, Int32, IComparer<TKey>) Method  Here we will discuss the first 4 methods.  Sort<T>(T[]) Method  This method sorts the elements in an Array using the IComparable<T> generic interface implementation of each element of the Array.  Syntax: public static void Sort<T> (T[] array);  Parameter: array: It is the one dimensional, zero-based Array which is to be sorted.  Exceptions:  ArgumentNullException: If the array is null.  InvalidOperationException: If one or more elements in the array do not implement the IComparable<T> generic interface.  Example:  Output:  Sort<T>(T[], IComparer<T>) Method  This method Sorts the elements in an Array using the specified IComparer<T> generic interface.  Syntax: public static void Sort<T> (T[] array, System.Collections.Generic.IComparer<T> comparer);  Parameters:  T : It is the type of the elements of the array.  array : It is the one-dimensional Array which is to be sorted.  comparer : It is the IComparer<T> generic interface implementation to use when comparing elements or null to use the IComparable<T> generic interface implementation of each element.  Exceptions:  ArgumentNullException: If the array is null.  InvalidOperationException: If the comparer is null and there is no implementation of the IComparable<T> generic interface.  ArgumentException:  If the implementation of comparer caused an error during the sort.  Example:  Output:  Array.Sort<T>(T[], Int32, Int32) Method  This method sorts the elements in a range of in an Array using the IComparable<T> generic interface implementation of each element of the Array.  Syntax: public static void Sort<T> (T[] array, int index, int length);  Parameters:  array: It is the one-dimensional, zero-based Array to sort.  index: It is the starting index of the range to sort.  length: It is the number of elements in the range to sort.  Exceptions:  ArgumentNullException: If the array is null.  ArgumentOutOfRangeException: If the index is less than the lower bound of array or length is less than zero.  ArgumentException: If the index and length do not specify a valid range in the array.  InvalidOperationException: If one or more elements in the array do not implement the IComparable<T> generic interface.  Example:  Output:  Array.Sort<T>(T[], Comparison<T>) Method  This method sorts the elements in an Array using the specified Comparison<T>.  Syntax: public static void Sort<T> (T[] array, Comparison<T> comparison);  array: It is the one-dimensional zero-based Array which is to be sorted.  comparison: It is the comparison<T> to used when comparing elements.  Exceptions:  ArgumentNullException: If the array is null or comparison is null.  ArgumentException: If the implementation of comparison caused an error during the sort.  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  