 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I'm trying to (somehow) cache multiple iterations on a std::map when I need to insert multiple values by using this method:  This is the fastest and safest way I can get it to work so far. However I'm interested in one little thing and that's the insert() function. When I call new Property(TYPE_BOOLEAN) I clearly create a new Property() that nobody controls it. And from what I read, std::map doesn't call delete on pointers when discard. And when I use this method of inserting the insert function uses the existing value if it already exists. So, Who deletes that newly created Property() if a value already exists and it's used instead of the new one?  Would this method be a waste of memory by introducing memory leaks?  2 Answers 2  Either store smart pointers, or check for existance before inserting. I would advise smart pointers. probably, to indicate ownership.  In this particular case, free store allocation is a bad idea, but I assume the real problem has a reason to store items there.  246k2626 gold badges297297 silver badges485485 bronze badges  3  I cannot see how unique_ptr can help here. Would have to be shared_ptr, I believe.  unique_ptr helped me so that my objects don't destroy when inserting new elements. Another thing I forgot about. Thanks :)  You're right - doesn't buy in to the question of who deletes any pointers it stores - it expects the client code to take responsibility, or store a type that does that inherently. The simplest and often best way to do that - the way you'd use unless you'd seen a clear reason to do otherwise - is to store a "value semantic" type - one that takes care of its own life, and can be copied intuitively, behaving much like an or other inbuilt type in that regard.  In your case, there's ostensibly no reason to use pointers at all... just  If you don't care whether you're inserting a new element or updating an old one:  97.3k1313 gold badges164164 silver badges242242 bronze badges  2  You're right, I should use std::map< std::string, Property > but I seem to forgot that I'm not using a vector that resizes it's self when inserting (nasty habit) so that's the reason I started with pointers. I've never used maps so far and from what I've read so far they don't delete values when resizing like vectors. Thank you for your help. I'll do some benchmarks and see how it goes :)  @SanduLiviuCatalin Even when using a std::vector, I do not store pointers, but objects managing memory at copy/assignment/destruction (An exemption is a well encapsulated container)  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  