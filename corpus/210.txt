 Check if the given permutation is a valid BFS of a given Tree  Given a tree with N nodes numbered from 1 to N and a permutation array of numbers from 1 to N. Check if it is possible to obtain the given permutation array by applying BFS (Breadth First Traversal) on the given tree. Note: Traversal will always start from 1. Example:  Input: arr[] = { 1 5 2 3 4 6 } Edges of the given tree: 1 – 2 1 – 5 2 – 3 2 – 4 5 – 6 Output: No Explanation: There is no such traversal which is same as the given permutation. The valid traversals are: 1 2 5 3 4 6 1 2 5 4 3 6 1 5 2 6 3 4 1 5 2 6 4 3 Input: arr[] = { 1 2 3 } Edges of the given tree: 1 – 2 2 – 3 Output: Yes Explanation: The given permutation is a valid one.  Approach: To solve the problem mentioned above we have to follow the steps given below:  In BFS we visit all the neighbors of the current node and push their children in the queue in order and repeat this process until the queue is not empty.  Suppose there are two children of root: A and B. We are free to choose which of them to visit first. Let’s say we visit A first, but now we will have to push children of A in the queue, and we cannot visit children of B before A.  So basically we can visit the children of a particular node in any order but the order in which the children of 2 different nodes should be visited is fixed i.e. if A if visited before B, then all the children of A should be visited before all the children of B.  We will do the same. We will make a queue of sets and in each set, we will push the children of a particular node and traverse the permutation alongside. If the current element of permutation is found in the set at the top of the queue, then we will proceed otherwise, we will return false.  Below is the implementation of the above approach:  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  