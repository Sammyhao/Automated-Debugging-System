 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I have written a linked list(which is aimed for the data type int) implementation. Seems to be working fine except when I try to sort the list in such a way that all the odd elements should come after all the even elements with the original order of the even and odd numbers preserved.  Upon debugging in MS Visual Studio, I found out that in the function, the for loop seems to be going on infinitely...as if somehow the was not being updated to . I can't seem to grasp where the error lies in my logic.  The problem is not delete_at() it's what points to. You delete the node that t points to then after that try to do on the deleted node  You probably should not use delete_at() in this function. And remove from the for (;;) instead put in the body of the loop and only use it when you don't delete.  1 Answer 1  on 1st iteration is pointing to new node is created with data which is appended at the end of list like .  On 2nd iteration will point to node and no changes done on list.  On 3rd iteration will point to node new node is created with data which is appended at the end of list like .  on 4th iteration will point to which creates new node at the end of list. Iteration goes on and on recursively without breaking the loop.  Every time you need not to delete and create the new node. You can segregate even and odd nodes and make final list.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  