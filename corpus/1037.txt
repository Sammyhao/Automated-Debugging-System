 Quadratic Probing in Hashing  Hashing is an improvement over Direct Access Table. The idea is to use a hash function that converts a given phone number or any other key to a smaller number and uses the small number as the index in a table called a hash table. Hash Function: A function that converts a given big number to a small practical integer value. The mapped integer value is used as an index in the hash table. In simple terms, a hash function maps a big number or string to a small integer that can be used as an index in the hash table. In this article, the collision technique, quadratic probing is discussed. Quadratic Probing: Quadratic probing is an open-addressing scheme where we look for i2‘th slot in i’th iteration if the given hash value x collides in the hash table. How Quadratic Probing is done? Let hash(x) be the slot index computed using the hash function.  If the slot hash(x) % S is full, then we try (hash(x) + 1*1) % S.  If (hash(x) + 1*1) % S is also full, then we try (hash(x) + 2*2) % S.  If (hash(x) + 2*2) % S is also full, then we try (hash(x) + 3*3) % S.  This process is repeated for all the values of i until an empty slot is found.  For example: Let us consider a simple hash function as “key mod 7” and sequence of keys as 50, 700, 76, 85, 92, 73, 101.  Below is the implementation of the above approach:  C++  Java  Python3  C#  Javascript  Output:  Time Complexity: O(N * L), where N is the length of the array and L is the size of the hash table. Auxiliary Space: O(1).  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  