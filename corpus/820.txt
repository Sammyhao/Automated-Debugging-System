 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I have to implement a queue by using circular linked lists with only one iterator. My doubt is which is the better way in terms of performance, maintaining an iterator to the first item or from the last item?  1 Answer 1  Well, if you have a pointer to the first item, then operations on the end of the list are going to be O(N). With a pointer to the end of the list, you can do operations on both the beginning and the end in O(1). Generally, if you have a circularly linked list, then you want to be able to reach the beginning and the end, so the answer is that you performance will be better with a pointer to the end.  8,37811 gold badge2727 silver badges3737 bronze badges  6  2  If it's doubly-linked, then the whole thing is symmetrical, so it doesn't matter...  I didn't understood. How can we do operations on both beginning and end with o(1). even with the pointer at end of list we have to iterate right?  It's a circular list, so if you have a pointer to the end, then you can access the start of the list via its pointer. But as Oli points out, if you have a doubly-linked list then you can also access the end from the start via the pointer.  @OliCharlesworth Generally, circularly linked lists are singly linked. The reason is to save space overhead (and some time overhead). One generally chooses a circularly linked list because all of the action is at the ends of the list. Doubly linked lists are generally used when you want to be able to remove an element from the middle of a list (or insert before an element) when all you have is a pointer to that element. Also, while doubly linked lists can of course be circular, but there is rarely any need to do that.  @OliCharlesworth I did not know that, it appears that the BSD LIST in queueu.h is also circular. I still think that the choice of circular or not for doubly linked lists is IMHO mostly a stylistic choice and that there is rarely a need for it. The only benefit of a circularly doubly linked list is that you can save a single pointer (you only need a head pointer instead of both head and tail), which I guess if you have lots of empty lists, could make a difference. The code for the boundary cases also changes, but in my experience I don't think there is any simplification.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  