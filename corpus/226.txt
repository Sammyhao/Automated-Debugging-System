 Clone a Binary Tree with Random Pointers  Given a Binary Tree where every node has the following structure.  The random pointer points to any random node of the binary tree and can even point to NULL, clone the given binary tree.  Method 1 (Use Hashing) The idea is to store a mapping from given tree nodes to clone tree nodes in the hashtable. Following are detailed steps. 1) Recursively traverse the given Binary and copy key-value, left pointer, and a right pointer to clone tree. While copying, store the mapping from the given tree node to clone the tree node in a hashtable. In the following pseudo-code, ‘cloneNode’ is the currently visited node of the clone tree and ‘treeNode’ is the currently visited node of the given tree.  2) Recursively traverse both trees and set random pointers using entries from the hash table.  Following are the C++ and Java implementation of above idea. The following implementation uses unordered_map from C++ STL and HashMap in Java. Note that the map doesn’t implement a hash table, it actually is based on a self-balancing binary search tree.  CPP  Java  Output  Method 2 (Temporarily Modify the Given Binary Tree) 1. Create new nodes in the cloned tree and insert each new node in the original tree between the left pointer edge of the corresponding node in the original tree (See the below image). i.e. if the current node is A and its left child is B ( A — >> B ), then a new cloned node with key A will be created (say cA) and it will be put as A — >> cA — >> B (B can be a NULL or a non-NULL left child). Right child pointer will be set correctly i.e. if, for current node A, the right child is C in the original tree (A — >> C) then corresponding cloned nodes cA and cC will like cA —- >> cC  2. Set random pointer in the cloned tree as per the original tree i.e. if node A’s random pointer points to node B, then in the cloned tree, cA will point to cB (cA and cB are the new nodes in the cloned tree corresponding to node A and B in the original tree) 3. Restore left pointers correctly in both original and cloned tree Following is the C++ implementation of the above algorithm.  CPP  Output  This article is contributed by Anurag Singh. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  