 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I'm having trouble manually sorting the array with a for loop. It works except for the first and last number. Here's my code:  1) Instead of j+1, you could use j and ` for(int j = 1; j < numbers.length; j++)` 2) The inner loop doesn't have to start with 0 or 1, it can start with i+1  9 Answers 9  You have to initialize the value for j as i+1, this sorting algorithm is called bubble sort, that works by repeatedly swapping the adjacent elements if they are in wrong order. The below method is always runs O(n^2) time even if the array is sorted.  Hi, while this may answer the question, it is recommended to add a bit of context along with code such as to explain to how your code answers the question, what causes the issue etc. along with the code to give everyone who comes across this answer context into how and/or why this is a solution.  Hi, I don't understand English well sorry, I can't discussion with you, it's only alternative method  you have some errors in your code. I make some modifications, please look:  First, I recommend you to iterate in the second loop, from i (beacause the items previous i are now sorted).  Second, you have to switch the items on i and j positions.  Finally, beacause you use < strict comparator un your loops break, you have to go user numbers.length and not numbers.length - 1 .  I will provide a modified version of your code with the intention of explaining why your code does not work. First, we need to decide specifically what we want to do. Lets say we want to sort the numbers in descending order.  What does this mean? Every time when we are comparing two values at lowIndex and highIndex, we want to make sure that the value at lowIndex is higher than the value at highIndex.  The problem with your code is that it does not keep track of which index, or , that is lower.  When and , your code will swap the values so that the greatest value out of numbers[1] and numbers[2] will be put at index 1.  When and , your code will swap the values so that the smallest value out of numbers[1] and numbers[2] will be put at index 1.  This is incosistent. The algorithm is competing with itself, trying to move values in different directions. If we modify your code to check that we are consistent in whether we want to swap large values towards the beginning of the array or towards the end, your algorithm will start to work:  Note, however, that the example above is just for explaining what goes wrong in execution of your code. Rather than using this code, it would probably be more appropriate to use one of the other answers to this question, or study and compare sorting algorithms on wikipedia  I believe what you are willing to do is selection sort? https://en.wikipedia.org/wiki/Selection_sort An other option I see is bubble sort but I'll try to explain selection sort.  So the first iteration of the outer for loop, the one with i, you check the whole array for the smallest number with the inner for loop, the one with j, and you put the smallest number upfront in the array. During the second iteration of the outer for loop you only go over the numbers you haven't checked yet, which is the second number through the last number. During the third iteration you go over the third number through the last number and so on. Here's how I adjusted your code, I adjusted the inner for loop so with each iteration you check a smaller sub-list and adjusted your if clause so that the smallest number is found:  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  