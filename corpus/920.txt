 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  It registers commands to a map which holds its command name and pointer to its class. This compiles without problems but when I enter a command, it crashes with "map/set iterator not dereferencable". I am new to maps (few minutes) so please help.  EDIT. Ok I found that the problem is not in main... Here is code of Program class (some of it)  I think the problem is here, because after i register commands in main, I cannot cout the name of any command (same problem)  Same problem, when i removed everything after that line and tried to cout it->first, which is string  I mean, try to check if is not same with , i.e., check if command exists. Also try to use debugger and find the line, that throws the error.  Be careful with your , in the current code it leaves a dangling pointer in the map.  2 Answers 2  You get an iterator on the temporary object returned by that gets destroyed when the assignment is done. Therefore it points to nothing.  Great man, this worked, thanks very much(still can't believe I missed that) anyways this opened another problem. OK first when I enter command, it works but when I enter second command it crashes (Dont know if it is good idea to ask that here)  Don't delete . Your command object need to still be alive in your internal map if you enter the same command twice. The place to delete your command objects is in  Does it happen the first time or the second time, as someone said above, you shouldn't be calling after you use a command as then that command will be gone forever. You haven't posted enough code. If you use a debugger it should be able to point you to the line where the invalid dereference occured  The first time, that's why I am not paying attention. OK debugger shows that the problem is the line if(it == allcommand->getCommands().end()) {  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  