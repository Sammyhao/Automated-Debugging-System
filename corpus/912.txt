 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  After processing this map I want to treat it as a heap (based on the second value). I decided to use std::make_heap function.. which is defined like this...  As this function requires a comparison function to be defined... I did it like this  Now with this setup I call make_heap like this  But this gives me compilation error...  Compilation error gives me a hint that they may be because of make_heap requires random_access_iterator... but I am not sure on that.  Should I move to Function Objects (from plain function pointer)?  2 Answers 2  You cannot make a heap directly on a map. Map is sorted already by a key and you need a different partial sorting. You can copy all map values to a vector and make a heap from it.  Edit:  If you need to modify your map and maintain the heap, you can implement something like multi-index container when one of indexes would be actually heap-powered.  Agreed with @Andy. Map is already sorted by key so you can't make heap directly on it. To solve similar problem i created a vector of pair with map value as first element and key as second element and then make heap. It won't require any compactor parameter for max heap.  For example: For map "map m" create vector using below code and then make heap.  This will work and top element would be returned at any point of time.  Incidentally, if the key or value are somewhat costly to copy you can even make the vector contain directly map iterators instead of value-key pairs.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  