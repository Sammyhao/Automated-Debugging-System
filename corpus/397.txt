 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I'm trying to understand the difference between DFS Recursive and DFS iterative. Does the one with the stack use an iterative or recursive approach?  For example, what would be the output of using a DFS recursive traversal of the graph and a DFS iterative traversal of the graph? The neighbors are iterated through in alphabetical order.  Heres the graph:  For a DFS traversal (the one with a stack, not sure if its recursive or iterative) this is what I got: A, C, D, E, F. Can someone confirm what type of DFS traversal this is, and how the other one would work? Thanks!  2 Answers 2  To my understanding, the recursive and iterative version differ only in the usage of the stack. The recursive version uses the call stack while the iterative version performs exactly the same steps, but uses a user-defined stack instead of the call stack. There is no difference in the sequence of steps itself (if suitable tie-breaking rules are used to ensure equal traversal sequence for child nodes - if desired), so it is impossible to inspect the output to decide whether an iterative or recursive implementation was used.  Well you are right, however as mentioned in the linked question, per se the order in which children are traversed is not specified; some additional order would have to be defined. I will change my answer a bit.  As indicated in the other answer, traversing your graph using DFS will visit the vertices in the same manner regardless of the actual DFS implementation, using iteration or recursion. See pseudocode on the Wikipedia article.  You have an additional requirement which is to visit the adjacent vertices in alphabetical order. That means the stack has to be sorted when pushing stuff to it (in the iterative version) or it means you have to recurse on the adjacent vertices in sorted order (in the recursive version). Both implementations will behave excactly the same.  Given the alphabetical order constraint, the result A, C, D, E, F is the only possible DFS traversal of your graph.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  