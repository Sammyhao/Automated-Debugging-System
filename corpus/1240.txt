 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I want to design a function to find the k biggest elements in a unordered set of N elements with time complexity: on an online judge.  Output  Sample Input  It's all right but one of datas is Time Limit Exceed ,I am so confused with how to solve this problem.  Finding the K smallest elements can be done in , maybe that's your Time Limit problem. Are you sure your heap construction is ?  3 Answers 3  Your sift-down operation doesn't seem correct. There shouldn't be two nested loops there. You should just start at the root and keep swapping it with one of its children until it's larger than both. The outer loop shouldn't be there (it causes each sift-down to take ) - I think you should just set to 0 to start at the root.  Edit: Your heapify operation is too slow as well: You are using the same loop variable for both the outer and inner loop, so it will alternately grow larger and smaller. The inner loop should start with the outer loop's , but shouldn't affect the value of in the outer loop's next iteration. I suggest putting the sift-down operation in its own function. This will both fix this problem, and avoid having sift-down coded twice.  @Anony-Mousse: Your comment above is wrong. It says there should not be two loops, when there should. So I definitely didn't copy it.  Sure you did. My edited question detailed it, that he increases i in the while loop again. You elaborated a bit on it though, granted.  @Anony-Mousse: I didn't elaborate on it... It's simply wrong so there's nothing to elaborate about. I don't see how it's even similar.  Some onlinejudge.org contest I guess. Why don't you share the problem link?  Then we could probably tell whether you really need heapsort, or whether you'd be better of with something like QuickSelect and a good heuristic.  My guess is that a plain heapsort will not suffice for one of their test cases.  You probably also need to add optimizations such as checking for presorted data, or reverse sorted data (and data-parts) at the beginning and end. Avoid constructing a heap for these parts, but keep them as is.  Try running heapsort on a huge reverse sorted list, with large k, IIRC that is a worst case (for a max-heap, any min-heap should be worst case and the other way around).  The typical online judge test cases are usually well designed around such known worst cases. And the time limit is then set so that even with a very good optimized solution you lose compared to a true solution. They just need to make k large enough. They are from contests, and they want to challenge people by giving them real mean input files!  P.S. You heap build also seems to be too complicated. The problem is that you increase again. You shouldn't need to do this. By increasing i in the while loop, you cause the bottom-up heap construction to "restart" again multiple times. So your heap build likely no longer is .  72.4k1212 gold badges129129 silver badges187187 bronze badges  9  It is not a Valladoloid contest and all description about the problem is put above. Yes,time limits exceed10%,one of case isn't accepted.but all I can consider is OK ...  Actually I don't know what is Valladoloid contest,our online judge is provided by my teacher  The UVa online judge is at uva.onlinejudge.org and behaves just like your described it - giving only a "time limit exceeded" error. So I guess your teacher is just forwarding them there...  Anyway, try to find a shortcut for getting data that is reverse sorted and a large . It should be a fairly easy optimization.  I think you are confusing heapsort with quicksort, which has a worst case for some inputs. And even if it was slightly slower on reverse-sorted lists, I don't see the point in optimizing for that because it would still be slow on nearly-reverse-sorted lists.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  