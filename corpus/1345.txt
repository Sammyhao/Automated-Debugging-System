 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  The algorithm would be the typical one where you use the prefixes to build a Huffman tree, read in the encoded bits while traversing the tree until you reach a leaf, then returning the character in at that leaf.  Could someone explain how I would determine the running time and space complexity?  You've described an algorithm to do this, but do you have code as well? The time complexity may vary depending on your implementation.  2 Answers 2  Basically there are three methods on a Huffman Tree, construction, encoding, and decoding. The time complexity may vary from each other.  We should first notice that (see Wikipedia [link]):  In many cases, time complexity is not very important in the choice of algorithm here, since n here is the number of symbols in the alphabet, which is typically a very small number (compared to the length of the message to be encoded); whereas complexity analysis concerns the behavior when n grows to be very large.  If you build a bidirection hashtable for all symbols, both encoding and decoding would be constant (O(1)).  Assume an encoded text string of length n and an alphabet of k symbols.  For every encoded symbol you have to traverse the tree in order to decode that symbol. The tree contains k nodes and, on average, it takes O(log k) node visits to decode a symbol. So the time complexity would be O(n log k).  Space complexity is O(k) for the tree and O(n) for the decoded text.  125k1717 gold badges168168 silver badges324324 bronze badges  3  Why is the time complexity is O(k)? In the worst case the output tree could be a full binary tree having k+k\2+k\4+...+1=O(k^2) nodes.  @so.very.tired: Re-read my answer. I said that the space complexity is O(k). With k characters there are k nodes in the tree.  Sorry I've been meaning to ask: "Why is the space complexity is... etc...", I wrote "time" instead of "space" by mistake. In Huffman tree, letters are represented by terminal nodes (not just any node), so with k characters, there are k terminal nodes, which means the tree can, like I said, end up with O(k^2) nodes (terminal as well as internal).  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  