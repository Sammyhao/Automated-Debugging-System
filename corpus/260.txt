 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I was trying to implement an algorithm to convert a sorted link list to BST but I am not getting the desired output.  Here is my function  Calling snippet:  Input list: 1->2->3->4->5->6->7->8  Output of level order traversal:1->1->2->1->2->2->3->  The problem is . At the first level of recursion, that advances from to , when you really need to jump to . BTW, you should really learn how to use a debugger: stepping through the code should make the problem obvious.  @user3386109 I think dont really need to jump to 5(beacuse I am not implementing it using a mid pointer). I am building the BST using bottom up approach.  3 Answers 3  I think you are changing head pointer at a wrong point. It should be before TreeNode left = linkListToBSTrec(head, n / 2);  For the first time, your head and left both are 1. That's why you are getting the same data multiple times.  I haven't actually run the program. By looking at it I think head pointer should be changed earlier.  40511 gold badge55 silver badges1616 bronze badges  1  It wont help ,also during during first time , head=1 but left will be equal to null (leaf node) as left will be called until n>=0.  I believe, your code does not express your intent.  I am not familiar with Java, but you would want to pass a reference to the node in the function linkListToBSTrec, otherwise the changed value of head from the left recursive call will not be reflected in the parent function.  3,06933 gold badges2121 silver badges3737 bronze badges  2  I have added a link where this method is implemented in C .Maybe you can have a look and compare where I missed.  Yes, I had checked that link. But, I know only C++. I have no idea of Java, so you need to figure out how to pass reference to a reference as a function parameter.  The correct way to construct a balanced BST from a sorted list is to use the head of the tree as the middle element of the sorted list. Then the left subtree can be constructed recursively for the elements to the left of the middle element and similarly the right subtree contains elements to the right of the middle element.  You are using the leftmost element as the root which is not the proper way to do it.  I am considering a different algorithm, here's the link to the algorithm( method 2) geeksforgeeks.org/sorted-linked-list-to-balanced-bst  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  