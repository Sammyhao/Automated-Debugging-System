 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I am stucked with implementing C++ for graph, which is represented by adjacency list. So, the idea is that my iterator should go through the graph by using DFS algorithm. As an example, for ++ iterator goes to the next unvisited vertex for current vertex (like in simple DFS).  My templates for graph vertex and iterator are simple:  Things that I suppose:  In should be:  pointer to the vertex, which was iterated (++'ed) to this (current) vertex (to return back from current vertex). I will name it  successor() and predecessor() functions, which will return pointers to the next / previous ( for DF-search ) vertices .  If I think in a correct way, now I got a and for my dfs_iterator ( overloaded functions of ++/-- shall return successor() / predecessor() for current vertex stored in iterator (and of course, change flag for current vertex )  But I don't understand how to deal with situation, when user creates a lot of iterators for one graph, then info will corrupt because flags will not respond correctly (one iterator can change it, then second is unable to iterate through this vertex). Should I store a special of flags in each iterator, and not in vertex? Or duplicate this information somehow to flag ? Should I overload some other operators for this iterator ?  Please, give me some tips about my code and such implementation. Do I think in a right way?  // Actually, I can't find any information about such graph iterator, and I am new in C++.  The iterator should not modify the graph. For instance, should not be in your vertex class  1 Answer 1  Everything related to the algorithm should be in the iterator, and not in the graph. More precisely, your iterator should not modify the state of the graph. Think about your iterator used on a graph. Nothing prevents you from using few data structures in your iterator. A naive approach for instance will be to replace  in your class vertex by a map in the iterator itself.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  