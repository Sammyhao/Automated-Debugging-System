 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I have a school assignment to implement a hash_set and a hash_map, I am given a main.cpp that has code to test these classes (inserts, deletes, searches, prints, etc). I am also given a base hash_table class that is a templated class, and just told to "make the hash_set and hash_map work based on the testing code with new classes of their own".  Without more specific details, I assume I am supposed to implement the set and map based on the hash_table, which the teacher said the project could be completed in 40 lines of code (wat??) between the two new classes...but I can't even get the hash_set class to inherit the hash_table since it's a template. I can get it compiling ok without making the hash_set class a template, until I instantiate it, since the testing code is passing it a template type in the declaration. But if I try to make the class a template type itself to compensate for this, everything breaks and I can't track down the source of the error. I'm about 8 hours into this project which should supposedly be a 1 hour project, so I'm at wits end here.  Here is the original main.cpp with the testing code (hash_map is commented out because I haven't even started that yet :/ )  And this is the original hash_table class file:  I know the hash_table file is long, and I have a decent idea on how to proceed, since a hash_set really only needs to implement a search function within the insert to make sure the list is unique, but doesn't really mess with hash order or anything (I'm not really sure how to implement the hash itself, but I assume the inheritance will sort that out nicely), and the hash_map will allow a null key and any null values....but first something has to compile.  This is what I have currently as my hash_set class, just trying to get a simple constructor that uses the parent class's constructor with the correct type (std::string):  Currently I get the same error: with this exact code it tells me that "WSUHashSet is not a template", which is good because my class is fine, but bad because I can't just edit the main.cpp to not treat it as a template.  When I try to make it a template, like this:  I really need some direction here. I can't afford to spend a lot more time on this as it's not my only class, and I feel like this should be fairly simple. The theory makes sense, but the implementation makes me feel like I'm blindly wandering in circles.  Thanks  EDIT: the actual compliler error is  WSUHashSet.h line 19: error: WSUHashSet is not a template  Apparently the pasting into the code block here caused confusion. Here's the actual line (19 in codeblocks) that is breaking the compilation:  people who think that it is a good idea to teach programming using C++ need to be isolated.  The complete error (including the line of code in question) would be helpful. Also, rename your include guards so they don't begin with underscores.  That is....extremely vague, especially given the massive amount of standards included in that entire article. Nowhere did I find anything about why the include guards in the OP are "illegal". @DrewDormann I added it to the end of the OP, sorry for missing it  @user3216836 I took a wild guess at what code here represents the file "WSUHashSet.h". Then I counted by hand down to "line 19". It's a blank line. Something's fishy here.  1 Answer 1  If you look at the test code, you can see the the types you create must be templates, as they're instantiated for specific element types:  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  