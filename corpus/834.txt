 Iterators in C#  An iterator is a method in C# which is used in an array or in collections like the list, etc. to retrieve elements one by one. Or in other words, we can say that an iterator is used to perform an iteration over the collections. This feature is introduced in C# 2.0. It uses the yield return statement to return the element from the collection at a time and it always remembers the current location of the iterator, so when the next iteration takes place it will return the next element of the given collection. If you want to stop the iteration you will use the yield break statement.  The return type of this method is IEnumerable, IEnumerable<T>, IEnumerator, or IEnumerator<T>. Which means by using iterator compiler will automatically create IEnumerable or IEnumerator interface for you there is no need to implement IEnumerable or IEnumerator interface in your class for using a foreach loop. When the compiler identifies an iterator in your class it will automatically create the current, MoveNext and dispose of the method of IEnumerable or IEnumerator interface.  Important Points:  Iterator can be used as a method, or as a property.  Iterator method is also known as get accessor.  You can use iterator as a method or get accessor.  You cannot use iterator in an events instance constructor, static constructor, or static finalizer.  An iterator method does not contain ref, or out parameters.  Here, yield is not reserved word, but when you use yield with return or break statement, then yield have special meaning.  You are allowed to use multiple yield statements.  It is generally used with generic or non-generic collections.  When you are working with iterator it is necessary to add System.Collections.Generic namespace in your program.  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  