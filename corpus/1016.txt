 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  Here is design of my graph data structure which i've developed from scratch. Now to implement BFS i am thinking to use some part of STL to levitate more burden.  I am using algorithm from Cormen's book .For some portion of algorithms like color[u] , distance[u] etc , i am thinking to use map. but i am unable to decided whether i should use map like >> or  Also, Above map will have to fit with other part of algo like etc  I am sorry that my question might would look vague but couldn't explain more better than this.  4,95455 gold badges2727 silver badges4343 bronze badges  5  What's preventing you from storing data like color, etc. in a node? I think it would be logical if properties like color would be associated with nodes.  – user500944  Aug 9 '11 at 19:05  hmm.. but i don't want to edit the graph struct rather than just adding BFS functionality  Why not? And if your nodes don't store node properties such as color, what do they store?  @aib : think this will force me edit other functions also which i've already implemented which i really don't want. tell me is my idea of using map is bogus?  @Mr.Anubis: Well, no. As I've stated in my answer it's an approach BGL uses. But I don't understand, aren't you already using pointers, ? What will happen if you add an extra field to ?  3 Answers 3  5,00366 gold badges3737 silver badges5959 bronze badges  1  For what part excatly do you need help..is it the graph representation, in that case you can have a class named node which contains a vector<node> adjacents and other attributes you want like color etc.  Once i was trying to do something similar. The mistake i did was i didn't define the function object to sort the elements of the when i stored the pointer to the node as index type. So you should consider this when you design your BFS when keeping the color/other properties as value_type in the map with node pointers as the index type.  so the map that you are planning to implement should look something like this  yes... it is much similar to your with a SortNode argument. It is a good idea to keep only the pointer to the rather than the itself  You might want to take a look at the Boost Graph Library for inspiration, or even just use it.  Note that it supports both property maps (like the first map you suggested) and custom node classes (what @Grigory Javadyan and I suggest).  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  