 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I was doing the "Sort Characters By Frequency" problem on the LeetCode online judge.  If is and if you get "extended" characters as input (i.e. characters whose encoding is larger than 127) then the expression will cause sign-extension and you will have a out-of-bound index.  This has nothing to do with your problem, but if is signed, and the string contains characters with the top bit set, you will index outside the vector.  You might also want to consider using string::reserve() and overload (5) of string::appen  1 Answer 1  operator copies the arguments into a new string object. You then copy this temporary return value into - which may also involve copying into a new, larger buffer. Unless C++11 is enabled, in which case move assignment will be used, so the latter potential allocation + copy is avoided.  does not create a new string object. It modifies the existing string buffer in-place - unless a larger buffer is needed, in which case reallocation cannot be avoided.  So, avoids creation of temporary buffers in dynamic memory. If the string is large enough, doubling the number of simultaneously used copies can roughly double the peak memory use of the program. Also, the extra temporary allocations may increase the fragmentation of dynamic memory space, which increases the overhead of dynamic memory management. These two factors may cause the memory limit given for the program to be exceeded.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  