 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I am assigned to write a c++ graph implementation based on a given graph.h file. I am having an issue of "exception thrown: red access violation" in my AddEdge function that I cannot figure it out. Here is the description of graph.h  And here is my current work (graph.cpp)  The issue I have is that when I debug it, I got an error at line saying,  Just because this is where the program crashes or reports an error doesn't mean that's where the problem is. C++ does not work this way. The problem can be anywhere in your code, but after the bug occurs the program keeps running for a little bit before it finally crashes here. This is why stackoverflow.com's help center requires you to show a minimal reproducible example that anyone can cut/paste exactly as shown, then compile, run, and reproduce your problem. See How to Ask for more information. Until you do that, it is unlikely that anyone will be able to figure out your problem.  // Assume WhereIs() function works properly -- How do we know you're telling the truth? I have seen a lot of questions start of with assumptions like this, and when the code is finally shown, the code that is supposed to "work properly" was broken.  @PaulMcKenzie Hi Paul, I just realized that me trying to not post too much code is not a good idea in this case. Yes, I added the function in my original post.  I hope that header file can be changed, it's idiotic. How could a teacher post this as an "excample" of anything good? All those unnecessary includes, the , the passing of strings by value and not by const reference, the use of manual memory management, the inane comments (why would you comment "private stuff here" if there's clearly a keyword - comments aren't for paraphrasing, they are to explain unobvious stuff!)... It's yet another case of teachers who don't know anything :(  2 Answers 2  Your code appears to be correct, in that the the error is most definitely elsewhere. But you never free the linked list nodes within the destructors, so that's an error waiting to happen. Destroying an object should release all resources held by it, so we need to implement destructors.  Minimal Improvements  But let's also make it a little bit saner - here's the minimum I'd do to clean up the code and make it more robust (so that it reads just a tiny bit more like C++ and not C). I've commented the changes - there's lots of them. They are minor by themselves, but together they make for more idiomatic use of C++, and also make your life easier.  Common issue: is a very bad idea, and the little function below illustrates why. You'd hope such code won't compile. But it does.  In the code below, the comments are my comments that explain what I changed and what you should look for when writing such code. The only comments that should be left in, that I'd expect to be helpful in the long run, use the form.  This code at least compiles, and I hope it's correct (or at least will throw/assert if something is amiss).  Modern C++  The code can be certainly improved by getting rid of manual memory management and using unique pointers to automatically destroy the nodes, guaranteeing no memory leaks.  There are many more things that could be added, such as iterators for the tree, but the following code should give some idea of how to deal with and linked lists.  graph.h  graph.cpp  main.cpp  And here's a little example of how the code above may be used.  91.3k1313 gold badges132132 silver badges286286 bronze badges  3  Hi, Thank you for the advice. This is very helpful. However, this is an assignment that I have to strictly follow the give file (i.e. in not allowed to be modified)  Just so you know: your teacher is teaching you C, not C++, and even as far as C with classes goes, it’s still pretty bad. What an incompetent teacher. May as well drop the pretense and tell you guys that it is indeed C that you are taught. The “Minimal Improvements” answer can be modified so that the header file is unchanged - you’ll externally use the structs, but internally in graph.cpp you’ll wrap them with real classes with constructors and destructors etc. Such details won’t change the external API. I’ll post a third answer that goes that way.  Hi Unslander, I was able to find out where the issue of is. It is in my destructor function, not in the part that I posted. Anyway, I was able to see a much better way to due with pointers in linked list from your answer!  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  