 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I've been working on building different data types and applying various sorting algorithms to them. I'm currently working on a breadth-first search on a binary search tree. My code is pretty much the same as what you'll find everywhere online, yet it consistently prints my values twice, and I'm now mind boggled. Any guidance would very much appreciated.  Sample Output: 25 25 4 28 4 28 8 32 8 32 12 36 12 36 16 16 20 20 24  Seeing as it prints the root node twice on its own and then both children nodes twice as a pair, one after the other, suggests it's working in the sense of going in the right order level by level, but it double prints left and right child together, until it doesn't, as can see that towards the end it starts printing twice back-to-back instead if in pairs, and it cuts out before printing 24 a 2nd time.  I should also make the disclaimer that I have no interest in using python lists in my queue functions. The whole point of this exercise is to manually build my data structures w/o help from using pre-built ones beyond ints/strings.  Why are you using breadth-first search on a binary search tree? The very definition of a binary search tree is that it provides bounds on depth-first search.  @chepner this is really just a practice step towards building a heap sort function. And I was more comfortable building/reading the nodes/leafs for a binary search tree than a plain binary tree.  1 Answer 1  Your issue is in your functionality, below is the fixed code with a marker on the offending line (219)  That did it! Thank you so much!! Was the issue that current was being modified locally within the function and wasn't having an effect on self.tail? I would have thought current is just another name for self.tail, pointing to the same object in memory, and changing current would be the same as changing self.tail. Thanks again for the help!  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  