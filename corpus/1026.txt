 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I have a android application called Islands and bridges also known as Hashiwokakero  The application uses A 2 Dimensional array that spawns the Islands randomly everytime the user restarts the game It form a Matrix with number from 0 to 4 where 0=null and 1-4 = Island There can be 2 bridges comming out of one Island to connect the other , The map at the moment is not solvable. To solve the game the user needs to connect the islands using bridges so if an island = 4 it needs 4 connection to it if an island = 2 it needs 2 connection and so on..  in my research i found out that the best algorithm to solve the game is to use Depth first search - article  I have looked at different question on here but can't seem to find a solution as my array is of type rather than .  QUESTION how can apply a DFS algorithm to connect the islands?  here is a screenshot of my application.  This the function to create a easy map 4x4 matrix:  2,48011 gold badge1818 silver badges4444 bronze badges  6  4  Wouldn't it be easier to start building the board one island at a time using valid moves so that a solvable solution exists? May want to look through: gamedev.stackexchange.com  So,just to make sure you are saying that i should build one island at a time checking the connection then build next one do the same and so on?  Correct. Right now if I understand your game rules correctly the size 4 islands at the edges make the board unwinnable as it can at most have 3 connections.  Yes thats correct, I could use a hardcoded array to make this work but my goal is to spawn the map at random.  If you want to add 'dead ends' to get a interesting board, add those at the end after you have created solvable board. Good luck.  1 Answer 1  pick a random (or by some other criterium) island that still needs bridges  build a bridge between this island and one of its neighbors (obviously a neighbor that also needs a bridge)  push the new state of the game (for instance the connectivity matrix of this graph) on a stack  if the game contains inconsistencies, pop 1 item from the stack  go back to step 1, using the top of the stack as the current state  As I mentioned, this is a piece of pseudo-code. You will need to refine it to handle edge-cases. You should also think about strategies to prevent the branching factor from becoming too large.  example (not thoroughly tested, not thoroughly debugged):  I also wrote a utility class that handles the common operations on the piece of land on which bridges need to be built (like finding the next available island, checking whether a bridge can be built, etc)  I am running the code, I generate the first row of the matrix, and the the program crashes, I am left with error any idea?  I would suggest you create a new question, with your entire runnable code, and then ask for help. In general, it is frowned upon to simply ask people to solve your problem for you at StackOverflow.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  