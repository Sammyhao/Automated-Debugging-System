 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I've played with Graphs before and I managed it alright with some help from StackOverflow but I never used a structure like the one below. I can't seem to understand what I'm doing wrong here...  I get a segmentation fault on the first iteration of and I can't understand why. I've tried countless things but I can't seem to manage the Graph initialization with such structure. Also, is the way I'm declaring and returning a pointer to a Graph done the right way for this structure?  Am I complicating things with lots of pointers in the init function or what?  P.S: Please do not suggest different structure definitions, I cannot changing anything in the one above. That's the real issue. I know how to work with Graphs rolling my own structure, but I need to use the one above.  Yes, that's how I realized it was breaking on the first iteration cause I though it was breaking later, maybe because I hadn't allocated enough memory. But I find GDB confusing and I don't know how to use it properly.  3 Answers 3  I don't really understand your second typedef of .  What I would do is declare another struct as follows:  Then you can initialize the graph as follows:  And printing out the graph is as follows:  I think you'll find that having an extra struct for the graph will prove to be more sustainable over time too. :)  27.8k88 gold badges5353 silver badges6262 bronze badges  1  I cannot change the structure definitions. That's the real issue, I know how to do it without such a structure, but I need this one specifically.  Complete revision of answer given the OP's requirement not to change the typedef in any way.  I would advise changing to this:  The problem here is the "array of pointers" syndrome. Namely is equivalent to with the obvious proviso that the outer array size is fixed. That creates problems because you can't return a fixed size array, but you can return a .  I'm still not sure what the use case for an array of graphs is, but heck, this passes valgrind.  Ok, I've fixed it. Took me a while to get my head around it, it's late here.  – user257111  Feb 5 '11 at 1:01  Thank you for the solution but there must be another way, without that , it seems odd. And if it's really as you said, why can't we just return the pointer to the first element?  I think I found the solution I was looking for. I used Valgrind as best as I could to test for read/write permissions and there were no errors. Yes there were memory leaks, but that's not the point of this question (I'm aware of those, don't worry).  Here's the whole code to create a simple graph. Would love to hear any problems this implementation might have...  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  