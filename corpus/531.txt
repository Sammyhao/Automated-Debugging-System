 Greedy Algorithm to find Minimum number of Coins  Given a value V, if we want to make a change for V Rs, and we have an infinite supply of each of the denominations in Indian currency, i.e., we have an infinite supply of { 1, 2, 5, 10, 20, 50, 100, 500, 1000} valued coins/notes, what is the minimum number of coins and/or notes needed to make the change?  Solution: Greedy Approach. Approach: A common intuition would be to take coins with greater value first. This can reduce the total number of coins needed. Start from the largest possible denomination and keep adding denominations while the remaining value is greater than 0.  Algorithm:  Sort the array of coins in decreasing order.  Initialize result as empty.  Find the largest denomination that is smaller than current amount.  Add found denomination to result. Subtract value of found denomination from amount.  If amount becomes 0, then print result.  Else repeat steps 3 and 4 for new value of V.  C++  C  Java  Python3  C#  Javascript  Output:  Complexity Analysis:  Time Complexity: O(V).  Auxiliary Space: O(V).  Note: The above approach may not work for all denominations. For example, it doesnâ€™t work for denominations {9, 6, 5, 1} and V = 11. The above approach would print 9, 1 and 1. But we can use 2 denominations 5 and 6. For general input, below dynamic programming approach can be used: Find minimum number of coins that make a given value  Thanks to Utkarsh for providing the above solution here. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  