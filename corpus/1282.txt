 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I've written bfs for finding the shortest paths to every other node:  This gives wrong anwer and timeout for some unknown testcases. but when i'm doing this, it passes all the testcase:  It appears to me that your question does not give any indication on what you have done to try to diagnose the problem, and you just mention "in some case" but it is unclear what case you are talking about - it might be the case that you don't know what case that is - even then it would be a good idea to let us know "on some unknown test cases it fails" instead of saying just in some case.  1 Answer 1  I assume when you name the array , it stands for , and you would like to have to be true if and only if node is visited.  This is the problem. The right notion for BFS is . We would like to have to be true if and only if the node was ever enqueued. The second code does exactly that (except the array is still confusingly called ).  The reason why you need instead of is that you may enqueue the same node twice. Here is a simple example of how that could happen:  And we start the 'BFS' with N1.  When is visited, it enqueues and .  When is visited, it enqueues .  When is visited, N4 is not visited yet.  Here is the interesting time - if you used the former (i.e. incorrect notion) to stop enqueuing only when is visited. The will be enqueued again. If you use the correct notion below, then the algorithm would notice is already enqueued and will not enqueue it again.  The linear performance of BFS is built on top of the premise that a node is processed exactly once. If we use the incorrect version, we break that assumption, and therefore you are not processing the graph in linear time anymore. That is why you are getting time outs.  In general, for diagnosing issues like this. A fruitful approach is to generate some random inputs. Run both programs until they produce different results, and debug through what caused the problem.  Thanks. actually the test cases where it fails was impossible to handle manually and I couldn't think this test case.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  