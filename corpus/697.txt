 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  It is compiled without error.But when it runs,VS2012 display an error of "Access Violation Exception".  I have searched and tried a lot of ways,such as passing a delegate rather than a IntPtr,but all of them turned out to be failed.  So,what is the correct way to use an API function in a dll which contains function pointer?Or how to realize "My_Real_purpose" function?  I removed the COM tag, as this question has nothing to do with COM; the PInvoke tag is more appropriate.  The delegate declaration is wrong, but that is not enough to explain the AVE. Be sure you know how to debug the C++ code so you can diagnose this crash. Show the stack trace you get.  2 Answers 2  Your delegate uses the calling convention. In C# you would therefore declare the delegate like this:  As an alternative, you could decide to declare the function pointer in C++ as , in which case you would remove the attribute and rely on the default calling convention being .  Implement it like this:  In order to keep the unmanaged function pointer alive (guarding against GC), you need to hold an instance of the delegate in a variable.  In the simple example that you have here, the C++ code does not use the unmanaged function pointer outside of , but in a more complex example you may do so, in which case you must keep the unmanaged function pointer alive.  The function that you import is declared like this:  On the C++ side, I'd explicitly specify the calling convention for the callback, e.g. (you haven't done that in your code, and I think the default is ):  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  