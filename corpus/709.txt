 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  1,31522 gold badges1212 silver badges2626 bronze badges  4  5  is a data structure, which is not supposed to be able to be sorted. It stores key-value pairs, and there is not much sense in sorting a hashtable. You can convert it to an array, and sort this array, if you want.  use plain Objects instead of Maps to store sorted alphabetically-keyed key:value pairs.  9 Answers 9  1,54622 gold badges88 silver badges1010 bronze badges  3  1  Thanks! You method is very clean. However could you please explain the . Is this method compatible with Internet Explorer?  338k2121 gold badges288288 silver badges345345 bronze badges  2  1  I think this is cool but should be used very carefully so you're not sorting already sorted lists.  In fact I think it would be good to add an "isSorted" property, and if so then don't sort. One could go further and add a [Symbol.set] generator for binary insertion, and [Symbol.get] for binary search which forked based on the isSorted flag. I'm concerned though about the long term safety of this approach. I think indirection would likely be more prudent.  In ES6 you can do it like this: (assume your Map object is ).  the spread operator turns a Map object into an array, then takes out the second element of each subarray to build a new array, then sort it. If you want to sort in descending order just replace with .  There are several valid answers here but I think the "ordered map" aspect complicates and confuses things unnecessarily.  Assuming it is sufficient to get a list of the keys in the map sorted by value, rather than a map whose entries are sorted by value, then something like this works:  which yields:  This is a little less elegant if you actually want to iterate over the map entries (now you need to iterate over the array of sorted keys and fetch the values instead) but:  This logic is much easier for my simple mind to follow and to remember.  There's a pretty common use case for "sort this map by value" in which you actually want the sorted list of keys: using a map to keep a tally. (E.g., iterating over the words in a file using a map to keep try of how often each word appears then sorting that map to get a list of words by frequency.)  For the general case in which the values in the map aren't necessarily numeric, replace the comparator function (the function passed to ) with something like:  (which is essentially:  but using the ternary () operator.)  But bear in mind that the behavior of JavaScript's and operators is sometimes a little counter-intuitive with mixed types so depending on the values in your map you may want to include explicit type-casting logic in your comparator.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  