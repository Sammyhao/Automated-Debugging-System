 Convert a given Binary Tree to Doubly Linked List | Set 1  I came across this question during one of my interviews. A similar problem has been discussed in this post.  The problem here is simpler as we don’t need to create a circular DLL, but a simple DLL. The idea behind its solution is quite simple and straight.  If the left subtree exists, process the left subtree  Recursively convert the left subtree to DLL.  Then find the inorder predecessor of the root in the left subtree (the inorder predecessor is the rightmost node in the left subtree).  Make the inorder predecessor as the previous root and the root as the next in order predecessor.  If the right subtree exists, process the right subtree (Below 3 steps are similar to the left subtree).  Recursively convert the right subtree to DLL.  Then find the inorder successor of the root in the right subtree (in order the successor is the leftmost node in the right subtree).  Make the inorder successor as the next root and the root as the previous inorder successor.  Find the leftmost node and return it (the leftmost node is always the head of a converted DLL).  Below is the source code for the above algorithm.  C++  C  Java  Python  C#  Javascript  Output  Another Approach: Algorithm:  Traverse the tree in inorder fashion.  While visiting each node, keep track of DLL’s head and tail pointers, insert each visited node to the end of DLL using tail pointer.  Return head of the list.  Below is the implementation of the above approach:  C++  Java  C#  Javascript  Output  This article is compiled by Ashish Mangla and reviewed by GeeksforGeeks team. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. You may also like to see Convert a given Binary Tree to Doubly Linked List | Set 2 for another simple and efficient solution.  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  