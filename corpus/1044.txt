 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  67822 gold badges77 silver badges2424 bronze badges  10  3  If you want a sorted "queue" then you are looking at the wrong data-structure. Queues are inheritly not sorted, they are first in first out. A sorted queue is an oxymoron.  Maybe if you tell us what the actual problem is we might be able to help you better? What is the problem that causes you tu attempt to stort a data-structure that can't be sorted? Please read about the XY problem, it's very relevant in regards to your question.  1 Answer 1  I'll assume that this is an exercise in creative thinking, rather than a real-world problem. Although something like this might have been a real-world problem back in the day of tape drives and limited memory.  If all you can do is use the queue's and methods, then you can do what is essentially a really inefficient bubble sort. This requires O(n^2) operations and O(1) extra space.  Pseudocode:  So the first time through the loop, it makes sure that the largest item is at the end of the queue. The next time through, it will put the second-largest in its place, etc.  There are some minor optimizations possible, but they don't affect the running time very much because you still have to pop and push every item every time through the loop.  There is a possible early-out, just like there is for bubble sort. If in every iteration of the inner loop, , then you know the queue is in order. That could be a useful optimization, and it's not hard to implement:  Given that you can also call the queue's method, there's probably a faster way to do this. Still O(n^2) complexity, but real-world running time could potentially be better. I'd have to think on that one.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  