 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  Is there a maximum amount of data a JavaScript application can store?  I guess this is handled by the browser and each one has its limitation?  If there isn't a limit, will a page file be created? If so, wouldn't that be insecure?  5,48199 gold badges3838 silver badges5454 bronze badges  1  3  There are some limitations, though these depend on the browser. For example, Firefox has limits on stack space as well as excessive CPU consumption.  6 Answers 6  In Chrome and Chromium OS, the memory limit is defined by the browser, and you can inspect the limit with the following command in the Developer Tools command-line by hitting F12:  On my Windows 10 OS, it is about 1 GB.  On Chrom(e/ium), you can get around the heap size limit by allocating native arrays:  This crashes the tab at around 2GB, which happens very rapidly. After that Chrom(e/ium) goes haywire, and repeating the test is not possible without restarting the browser.  I also recommend reading TrackJS's blogpost about Monitoring JavaScript Memory before you get deep into the weeds trying to diagnose or measure anything memory related in the browser.  (I was trying to find a good answer, and the "there is no upper limit" answer provided here was just silly to me. I cannot run into a production issue for a multi-million dollar project and say to management, "Well, I assumed there is no upper limit and everything would be okay." Try to do a proof-of-concept, e.g. loading lots of combobox controls in your JavaScript UI framework of choice, etc. You may discover your framework has some performance degradation.)  Here are some components that I've found scale very well both in CPU performance and memory performance:  Here are some examples of frameworks with well-known performance degradation:  Angular: Poor change detection approach.  For each async event, compare each of the bindings (Model-Dom binding) to its old value to decide if to re-render.  NG1: >2500 watchers, performance grinds to a halt  NG2: the same problem remains but you have a long tiring workaround: Switch to immutables and spread ChangeDetectionStrategy.onPush all over your app to turn off the default problematic strategy  React  Again, Immutable collections of JS objects only scale so far.  create-react-app internally uses Immutable.JS, and Immutable.JS can only create about 500k immutable collections before it dies.  Here are some other things to think about:  Use array.slice for manipulating arrays to minimize additional array allocations; array.slice will modify the array in place, which will reduce garbage collection and overall heap size.  1,96922 gold badges2323 silver badges4949 bronze badges  2  Chrome warns that the site you linked to has Malware. Perhaps take the info from the site and copy in here directly rather than provide a link?  I've re-written this a lot in the last year since I originally wrote the answer 7 years ago, a lot has changed in the landscape, such as HTML5 and other things.  AFAIK, there is no upper limit, your script can basically use memory until the system runs out of memory (including swap). No upper limit doesn't mean you have to eat it all, users may not like it.  Firefox supports the option "javascript.options.mem.max" and if you search on that you can find discussions about sensible values that people have found workable.  Not sure how many people can be bothered going in there and setting it, but speaking for myself I set it to 128000 (which is 128M).  I think the memory limitation is from the browser. We can use the DevTools to figure that out. Like in chrome, press F12 and enter window.performance.memory you can see the memory info.  There are no memory limitations for a Javascript program. Your script can hog all the RAM on your machine. However, it is not recommended to use up all the memory on users machine. If you are dealing with a lot of data I would suggest that you check out caching.  7,26455 gold badges2929 silver badges3636 bronze badges  5  4  A script cannot hog all the RAM on a machine. It will still be bound to the underlying process-space. So, on a 32-bit browser, that is only 4GB of addressable memory.  I believe it is 2Gb in reality, well in some cases at least, so assume 2GB and it will work fine everywhere  I realize these comments are a bit old, but I've built toy prototypes that can get well over 4GB of addressable memory using native arrays, as you mentioned in your excellent answer, @JohnZabroski.  @Pwpwpw Also, I don't know if John was speaking of Windows, and I was not. And yes, my answer is older, and things would work a little bit different now.  Someone runs a 32 bit browser? They already expect modern web pages to fall apart on that machine.  This may vary between different web browsers, from observation, Iv'e picked up with Chrome(ver. 79.0.3945.130) the maximum is 2Gb per task. The Chrome debugger will pause the web page as the "Paused before potential out-of-memory crash" message comes up.  However, the debugger does allow one to resume web page operation(usually resulting in web page crash) but if it doesn't crash, the memory used can climb well above 2Gb, the page will generally perform slower beyond this point. It seems as if the 2Gb is set on a per task basis.  ie: I have developed a real time web based Log viewer that displays the Log info, read from some local log files. One can request what percentage of the log file to view. Some of the Log files are large and can contain 100 000 plus lines. When requesting to view all those lines Chrome will crash, but if I request to view those lines 10 000 lines at a time, no problem at all. this brings me to the "2Gb max per task" conclusion.  This is only a theory, i stand corrected. Refer to the images attached  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  