 C++ Program For Removing Duplicates From An Unsorted Linked List  Last Updated : 14 Dec, 2021  Write a removeDuplicates() function that takes a list and deletes any duplicate nodes from the list. The list is not sorted. For example if the linked list is 12->11->12->21->41->43->21 then removeDuplicates() should convert the list to 12->11->21->41->43.  METHOD 1 (Using two loops): This is the simple way where two loops are used. Outer loop is used to pick the elements one by one and the inner loop compares the picked element with the rest of the elements. Thanks to Gaurav Saxena for his help in writing this code.  C++  Output:  Time Complexity: O(n^2)  METHOD 2 (Use Sorting): In general, Merge Sort is the best-suited sorting algorithm for sorting linked lists efficiently. 1) Sort the elements using Merge Sort. We will soon be writing a post about sorting a linked list. O(nLogn) 2) Remove duplicates in linear time using the algorithm for removing duplicates in sorted Linked List. O(n) Please note that this method doesnâ€™t preserve the original order of elements. Time Complexity: O(nLogn)  METHOD 3 (Use Hashing): We traverse the link list from head to end. For every newly encountered element, we check whether it is in the hash table: if yes, we remove it; otherwise we put it in the hash table.  C++  Output:  Thanks to bearwang for suggesting this method. Time Complexity: O(n) on average (assuming that hash table access time is O(1) on average).  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  