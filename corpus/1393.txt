 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I don't understand why in documentation is supposed to be a , because a is a FIFO collection (first in, first out) - but because it depend of for comparison function, why it is a queue ?  Inspired by Mark Baker comment i tested the behaviour of compare function when the priority is the same for all items and it turned out that with the same priority the collection is not a FIFO  1,51211 gold badge1010 silver badges1313 bronze badges  4  Because (unless you specify different priorities) it is FIFO.... and in most cases you will specify the same priority for everything... the difference between a PriorityQueue and a Queue is that you have the option to prioritise entries so that some can be processed before others  Thx. I tested, and with the same priority doesn't act like a FIFO. View my edited question. It's very good point, and i didn't think this way but it doesn't apply.  In that case, you may have found a bug: for a queue, behaviour should be as I've described.... otherwise you might as well just use an splheap  2 Answers 2  The fact that a heap is used is an implementation detail, using a heap is not a requirement. The priority queue data structure is not unique to PHP either (not that anyone said it is!). Hopefully the following short citation from Wikipedia will help:  While priority queues are often implemented with heaps, they are conceptually distinct from heaps. A priority queue is an abstract concept like "a list" or "a map"; just as a list can be implemented with a linked list or an array, a priority queue can be implemented with a heap or a variety of other methods such as an unordered array.  If two elements have the same priority, they are served according to their order in the queue  There is no such guarantee. The only guarantee that you'll get from SplPriorityQueue is that you won't get an element out of order. Elements with the same priority are extracted in arbitrary order, the rest is implementation dependant.  The author of the above bug report went on to write up a blog post, Taming SplPriorityQueue, which hits on enforcing a predictable queue order using the following technique:  In short terms what i understand after reading the documentation (wikipedia, manual, bug-report) is that a is a distinct abstract concept different from the . Correct my if i'm wrong.  Just for clarification, what does $priority = array($priority, $this->queueOrder--); do?  SPLPriorityQueue appears to act more like a Heap than a Queue, the FIFO aspect that should be used for it to be a queue isn't applied  However, FIFO can be restored by modifying the insert to adjust the value used in the comparison function  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  