 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I have a problem that requires me to find the minimum spanning tree of a directed graph in Boost Graph Library.  My first try was to use the depth first search and DFS-visitor. My plan was to ignore all the edges except the tree edges callback. This doesn't work and I give the example below on why.  My question is if I can make my dfs-visitor create a minimum spanning tree of a directed graph in BGL.  There are algorithms for it and has been discussed here (Finding a minimum spanning tree on a directed graph) and I can't tell if it's been implemented for BGL or not or it's just a simple modification of something that's already in BGL.  Here is the example that fails. If I have the following directed graph  In depth first search dfs-visitor, 1->0 is classified as a forward edge.  If the graph was changed so that the edge is 0->1, then it is a tree edge.  From the strict definition of the forward edge and the source code of DFS, since vertex 0 is visited before vertex 1, it is a forward edge.  Forward edges are non-tree edges (u,v) that connect a vertex u to a descendant v in a search tree.  So, is there a simple solution in BGL or do I have to implement one of the algorithms in BGL for it?  2 Answers 2  The problem you are dealing with is, as you may already know, the search for a spanning arborescence of minimum weight as we are dealing with directed graphs. An arborescence is a graph with a designated root vertex such that all other vertices are reachable from , i.e. there exists a path from to all other vertices in the graph.  Unfortunately there is no algorithm in the Boost Graph Library which solves this problem, so you need to use either a 3rd party implementation like this one or implement one yourself. The implementation (by atofigh on github.com) given above uses Edmond's algorithm, which is a popular algorithm for solving the spanning arborescence problem.  Keep in mind that algorithms like Kruskal's algorithm or Prim's algorithm do not work on directed graphs due to the cut property not working on directed graphs.  I ended up using Edmonds's Algorithm from here. Thanks HueHang but I ended up finding the algorithm before and using it before I got your reply. The question remained unanswered for about 3 weeks.  Here is my simple test program using the edmonds_optimum_branching.hpp.  I get the correct answer as (2, 1) and (0, 2) when the run the sample code.  The algorithm returns the edges for the optimum branching. It also has weighted edges and can find the minimum or maximum weight tree. I just use weight 1 as in the example above since I don't need weighted graphs. It can also pick the root for the arborescence.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  