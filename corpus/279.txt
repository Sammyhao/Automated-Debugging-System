 C++ Program For Rearranging A Given Linked List In-Place.  Last Updated : 28 Dec, 2021  Given a singly linked list L0 -> L1 -> … -> Ln-1 -> Ln. Rearrange the nodes in the list so that the new formed list is : L0 -> Ln -> L1 -> Ln-1 -> L2 -> Ln-2 … You are required to do this in place without altering the nodes’ values.  The time complexity of the above simple solution is O(n2) where n is the number of nodes in the linked list.  Better Solution: 1) Copy contents of the given linked list to a vector. 2) Rearrange the given vector by swapping nodes from both ends. 3) Copy the modified vector back to the linked list. Implementation of this approach: https://ide.geeksforgeeks.org/1eGSEy Thanks to Arushi Dhamija for suggesting this approach.  Efficient Solution:  The Time Complexity of this solution is O(n).  Below is the implementation of this method.  C++  Output:  Time Complexity: O(n) Auxiliary Space: O(1) Thanks to Gaurav Ahirwar for suggesting the above approach.  Another approach: 1. Take two pointers prev and curr, which hold the addresses of head and head-> next. 2. Compare their data and swap. After that, a new linked list is formed.  Below is the implementation:  C++  Output:  Time Complexity : O(n) Auxiliary Space : O(1) Thanks to Aditya for suggesting this approach.  Another Approach: (Using recursion)  Hold a pointer to the head node and go till the last node using recursion  Once the last node is reached, start swapping the last node to the next of head node  Move the head pointer to the next node  Repeat this until the head and the last node meet or come adjacent to each other  Once the Stop condition met, we need to discard the left nodes to fix the loop created in the list while swapping nodes.  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  