 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I've created a Linked List in C++ and want to implement an iterator for it so that I can do range loops: where .  My idea is to create the as part of the class like this:  This is what I got so far:  Is this a good approach?  Should I do error checking when incrementing the list to check if ? If so, how do I do that? Because my Iterator doesn't have a list object with a tail.  Edit: I'm not sure how to implement the , I get stuck when figuring out how to connect it with the list so that I can check if the current node returned from the iterator equals the tail in the list, in the Linked_List method.  Let's say I've implemented all the necessary operators for an iterator like this:  How would I go about implementing and now?  I imagine an imaginary user making an iterator object like this:  An idea is to have a public constructor with no parameters and a private constructor that takes a node as a parameter which will be set to, and have the class as a friend.  1/ it's fine. If you end up with multiple containers with similar iterator implementations, it might be worth factoring that out then. 2/ you don't need to (it's a user error, not a normal runtume condition). But if you want to, (maybe in DEBUG builds) then consider what the pointer of the last element should look like. Actually, consider how you're going to implement one-past-the-end iterator without a sentinel node anyway.  This might be heading in the direction of overkill for your needs, but Writing your own STL Container should give you an idea of some of the things you may want to take into account.  Does it currently work? If yes, you'd better post the full code to CodeReview. People there are very good at fully reviewing your code to find possible improvements  Sidenote: You will almost certainly need a destructor for clean-up, and if that's the case, the Rules of Three and Five will come into affect.  1 Answer 1  There are two options where to declare and . Inside the list class as or outside as . It is, in part, a matter of taste. From engineering perspective though, the symbol names are longer for nested classes, so your debuginfo is bigger. Also, when nested classes are also templates it is harder to specialize them if/when necessary (because that requires fully specializing the enclosing template first), but this is not the case here.  It leads to more elegant code when one list node is used as list head and tail. Empty list is a node whose and point to itself. appends to which points to the first node or itself. appends a node to which points to the last node or itself. When inserting/removing nodes there is no need to have special handling of the first and last nodes. E.g. :  In the above, only needs two operations to be able to maintain a list. More than that, is itself a minimalist list that can be used for intrusive lists (with auto-unlink in the destructor). Note how using makes checks for unnecessary - is always a valid list.  Error checking should be in debug mode only (use , for example). Otherwise, those checks penalise correct applications with unnecessary run-time checks.  Here is a minimal working example based on the ideas for you:  124k1414 gold badges157157 silver badges247247 bronze badges  15  2  the in node is genius. But should a node have a ? Really thank you for everything.  @user644361 and are two low-level fundamental operations that all other operations build upon.  @user644361 Please note that I didn't encapsulate it with and . and should only be accessible by class. The user should not be calling those directly. You may like to add / as necessary, I only focused on getting the functionality right. Also, should not be callable by the user.  @user644361 That is true. It is also true for . But you can do and is a valid iterator to the next element. This is how returns you that next iterator.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  