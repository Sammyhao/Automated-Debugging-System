 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I'm supporting a C++ application written using Borland C++ Builder 5.02 (from 1997). The find() method on the Borland string class does not behave how I would expect:  This program outputs . If I change the needle to something shorter it outputs . If I exchange the angle brackets for some other characters it finds it. Spaces work, but parentheses also don't.  Note that I am using the Borland string library here: if I and use instead then it works exactly how I would expect. Sadly changing the whole application to use STL strings is not a feasible answer!  From the documentation it seems that Borland uses a hash-based algorithm for string search. I can't find any more details about this, and I've stepped through the disassembly but am not much the wiser.  I find it very hard to believe that this is really a bug in the string library, particularly since if it were then I would expect to be able to find an article or something about it. I can't find any such information.  However, I've run out of ideas! Is this a known bug? Is there a fix?  EDIT: Having looked again at the disassembly, I think it's trying to do something like the Rabin-Karp algorithm, where the hash function is calculated mod 33554393 (the largest prime < 2^25). It could well be the polynomial hash function with a base of 32 (i.e. a_0 + 32 a_1 + 32^2 a_2 + .. + 32^n a_n) but that's just a hunch. Sounds like a possible overflow as Daniel Fischer suggested.  "hash-based algorithm", "If I change the needle to something shorter" <- that smells of integer overflow.  @DavidHeffernan This question has arisen as part of a project to migrate this (completely working and very profitable) system over to a more modern compiler. 'Moving on' is what we're doing. But it has to keep on working exactly as it currently does, and pragmatictips.com/26 tells me to suspect my own errors over library bugs as the former are astonishingly more likely. Hence the question.  @DavidHeffernan I don't care about fixing the library. If it's a known library bug then we can justify changing the application to work around it (e.g. using ) and migrate the altered code. What amazed me was that I couldn't find any evidence that this was a known library bug.  3 Answers 3  I have found a reference from 1998 suggesting Borland's implementation of searching strings has a bug:  Also, it appears that at some point in history the C++ commitee decided that a string class would be part of standard C++, and cstring's string class is a remnant of this:  If you have the original BC++ 5.02 installation disk, the string class source is found under BC5\SOURCE\RTL\SOURCE\STRING.  Here is an excerpt from the code of the string::find_case_index() function (called by string::find() ):  2,41511 gold badge1414 silver badges99 bronze badges  2  Thanks, that's awesome. I'm sure there's an installation CD knocking around somewhere; I never even thought of looking on it for source.  If you find the CD and decide to try to apply a fix to the source, look here for instructions how to build the RTL, along with a fix to another bug: jogy.net/bcrtlfix.html  You are not using a Borland string library. (capital S) is the Borland string class. (lowercase s), which is the exact same thing as , is the STL string class, which is NOT a Borland implementation (the STL in BCB5 was the RogueWave STL). Your use of is likely bringing into the global namespace, which is why your code compiles. But you really should be using and instead. As for , you should be using instead, since that is what actually returns.  485k2929 gold badges389389 silver badges660660 bronze badges  4  I'm not sure we're talking about the same version of the class library. I can't find a class in my system and the I'm using is definitely not - e.g. it has a method whereas my does not. The class library docs are definitely about a class. Neither of your programs compile for me: the first says and your second says . [... TBC]  [contd ...] You say you have BCB5 installed - is this 5.02 or the freely available 5.5? Can you compile and run the program I gave and, if so, do you see the same output? That would be most helpful.  @DaveTurner: I don't think we are even talking about the same product. You said you are using Borland C++ Builder (which is what I have installed), but I think you are actually using Borland C++ instead. They are NOT the same product. In Borland C++, cstring.h defined a non-standard class that is not the STL class.  @DaveTurner: Borland C++ Builder uses the STL class, and its VCL framework also defines a separate class that is binary-compatible with Delphi.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  