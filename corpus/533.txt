 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  Is it possible for Greedy Best First Search to behave like Depth First Search in any case?  I see that worst case of both of these algorithms is similar O(b^m). Does this mean that they behave in same way?  2 Answers 2  Is it possible for Greedy Best First Search to behave like Depth First Search in any case?  No. If it did, it would be Depth First Search.  I see that worst case of both of these algorithms is similar O(b^m). Does this mean that they behave in same way?  "Best first" simply means that it relies entirely on some heuristic that scores possible options, and expands the best options first. Depth first search uses no such heuristic.  One way to think of it is that Djiksta will return the shortest path on a graph with non-negative edges. When you add in the scoring mechanism of best-first search, you get A*. Take away Djikstra, you get best-first back again.  Is there any possible case when both of the algos look for the answers in same way, maybe by traversing nodes in same fashion. Let us say that the goal lies in leaf nodes of tree at level m. DFS will have worst case o(b^m) so will GBFS. Can we change h(n) is some way so that it works like DFS for some special case?  Setting h(n) = -g(n) will give you a search that depends what order you take things off the queue. (Probably either randomly or first-in, simulating a BFS). So the strategy to make it act like a DFS is to maintain a single counter that you decremented each time the heuristic is evaluated. E.g. your heuristic function would be: h(n): counter = counter - 1 return -g(n) + counter Again, this isn't a particularly useful application of A*, but it does work.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  