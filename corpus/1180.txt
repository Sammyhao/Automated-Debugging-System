 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I'm working on a program which sorts an array by dividing it into smaller max-heaps and extracting the max-integer out of each one, then deleting it from the heap and running again until every heap is empty, but I can't seem to figure it out.  From where I stand the code looks good, but I don't get the results which I am looking for. My input is created randomly, and makes an array of 512 integers. Here is what it prints for one example run -  Can anyone spot what's wrong with my code? I will be really gladful.  Why do you need multiple heaps? If you have smaller heaps I'd expect heapsort for each block first and than mergesort to combine results... In any case write unit test for your heap code and merging code separately so you can scope down your problem .  It's part of an assignment given to me, as funny as it seems - it has to work this way. First dividing the array into k heaps - then extracting the max of each one, deleting the largest max of its heap and repeating the process.  What is it that is being printed out? Apparently not the content of the sorted array, as even for an array of size 16 it prints many many numbers. Also, are you aware that you delete the contents of (in ) in each iteration of the loop?  I should be printing the content of the sorted array (sorted from the largest int to the smallest). And the temp array's content is supposed to be temporary, after I create a heap from its content I don't care for it anymore.  Be careful though, in , you don't copy the contents of (which is the array ), but simply assign the same reference to . Once you rewrite the contents of , you rewrite the contents of , because they are two references to the same array object. Make sure to copy the array:  1 Answer 1  The problem is with You are not checking if might be empty.  Always check preconditions and fail fast. The problem would have become immediately obvious had you started and with  Have you actually tried this new code? It looks wrong. Did you update your and with error checking as I suggested?  @EddieRomanenco When you ask for help with finding a bug and get an answer, do not edit your question and remove the bug from it. It makes the answer not make any sense to anybody else.  Yes to both questions. Now the sorted array matches the size of the original one, but when I run it, it "locks" on one number until the end. For example: original = , sorted =  Well, you suffered enough. I updated the answer with a loop that should work correctly.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  