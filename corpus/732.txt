 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  How to write a recursive function that returns a linked list of nodes, when given a binary tree of nodes? (flattening the data) (Update: how about, don't just traverse the tree and add the nodes to a global structure. Make the function totally recursive, and modifying the binary tree in place)  For some reason, I tend to need more than 3 to 5 minutes to solve any recursive problem. Usually, 15 to 20 minutes will be more like it. How could we attack this problem, such as a very systematic way of reaching a solution, so that they can be solved in 3 to 5 minute time frame?  4 Answers 4  Pretty much what @vittore did, but with single list allocation (but it will get reallocated internally, so..). This is also probably (brain malfunctioning) in order.  There are several ways you can traverse binary tree. For example, you can get children first, or you can get left children, then parent, then right children.  Assume you have class Node with fields , and . Sample java code for leftchild-parent-rightchild traversal:  How about "make linked lists of the two branches, then append one to the other"?  I don't think there exists a systematic method that will solve any recursive problem in less than 5 minutes. Sometimes the fractal nature of the problem is just too hard to find.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  