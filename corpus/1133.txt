 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  It must be stressed that any function to do this will likely blow up if the Array doesn't contain the correct number of fields or doesn't contain the right data types. You'll need to do that validation for yourself and handle any error cases.  2 Answers 2  You can have some utility methods for mapping (cleaning & parsing)  And then use them to convert strings into case-class objects  As a more advanced (and generalized) approach, you can generate the mapping (parsing) function for converting tokens into fields of your case-class using something like , as told here  @KeyJun my guess is that it's due to the empty fields in some of your lines. This is why I've added the section to my answer. If you do something like that, this answer will work.  Here's one way of doing it. I'd recommend splitting everything you do up into lots of small, easy-to-manage functions, otherwise you will get lost trying to figure out where something is going wrong if it all starts throwing exceptions. Data setup:  Function to turn into and handle any empty fields (I've made an assumption here that you want empty fields to be . Change this as necessary):  Function to turn a into a . Note that this will fall over if the List isn't exactly 16 items long. I'll leave you to handle any of that. Also, the names are pretty non-descriptive so you can change that too. It will also fall over if your data doesn't map to the relevant or or whatever - you can handle this yourself too:  A nice function to bring this all together:  Output:  Edit:  To explain the bit - this is a way of assigning names to items in a List or Seq, given you know the List's size.  Note that the is important because it signifies the last element of the List being Nil. Without it, would be equal to as the rest of any List is assigned to the last value in your definition.  You can use this in pattern matching as I have in order to do something with the results:  You can also use it if you know what you want each element in the List to be, like this:  Obviously these examples are pretty trivial and not exactly what you'd see as a professional Scala developer (at least I don't), but it's a handy thing to be aware of as I do still use this syntax at work sometimes.  Not to worry. This was an interesting challenge to try to solve. Glad I could help.  @KeyJun I've edited my post to explain it a little more. It's essentially giving a name to the elements in the List, assuming the List is exactly 16 items long.  Thank you very much for your coherent explanations. I can learn pretty much from your codes. Thanks again and have a nice day :)  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  