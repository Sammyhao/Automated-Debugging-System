 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I inserted some data into a Java Hashtable. If I read the data from the Hashtable it doesn't come back in the same order that I inserted it in. How do I get the ordered data from the Hashtable?  I use the following code to get the values from the hashtable:  6 Answers 6  If you want an order-preserving map, you should use :  Hash table and linked list implementation of the Map interface, with predictable iteration order. This implementation differs from HashMap in that it maintains a doubly-linked list running through all of its entries. This linked list defines the iteration ordering, which is normally the order in which keys were inserted into the map (insertion-order). Note that insertion order is not affected if a key is re-inserted into the map. (A key is reinserted into a map if is invoked when would return true immediately prior to the invocation.)  This implementation spares its clients from the unspecified, generally chaotic ordering provided by (and ), without incurring the increased cost associated with .  Note that this is usually compared with rather than - I don't know of an order-preserving equivalent to ; the latter isn't usually used these days anyway (just as is usually used in preference to ).  I've assumed you want insertion order rather than key-sorted order. If you want the latter, use .  Although a cannot be sorted, he asked how to get sorted data, that can be done sorting the list of keys extracted from the and retrieving values in that order. Something like:  A has no predictable iteration order, and cannot be sorted. If you only want predictable iteration order you should use a . If you want to be able to sort your , you should use a .  is a legacy collection which was replaced by Java 1.2 collections in 1998. I suggest you avoid it, along with and .  Instead of use where possible. You can add synchronization using if you need it.  Instead of , use where possible. You can add synchronization using if you need it.  If i read the data from the hash table it's not coming in the same order what i inserted.  Your question does not make sense. A Hashtable does not have an "order", it is unordered (Edit: Some implementations do have an order, but it's not common for a hashtable)..  In what order would you expect the entries to be?  If you want to store elements in a certain order, you need to use a list (e.g. a subclass of java.util.List).  And BTW, your code sample does not even contain a hash table.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  