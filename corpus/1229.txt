 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I'm trying to implement the Prim's algorithm. I am taking the input from a file as follows.  I create a cost matrix as follows. Initially, every weight in the cost matrix is infinity (9999 in this case).  Now, i need to update the weights of the cost matrix by reading the weights from the file. So, I am reading the file as follows.  So, a and b are the edges and w is the weight for that edge. So, Suppose I have edge(1,2) and its weight is 3. So, my cost matrix and should update to 3. I am not able to figure out how I should update the cost matrix using file operations.  To put it again, I have a text file like the file I mentioned above. The first line of the file contains number of vertices in edges. I want to read the vertices in a variable v and edges in variable e. Then, I have an initial cost matrix where all values are infinity. I want to update the edges in this cost matrix from the file. So, i will read the second line from the file and update the = 3. I have no idea how to do this still.  nope. Thats only slightly better than checking for eof. Let me ask you, How do you know the extraction of , , and worked ?? (hint: you don't). Try and remove the first line in the while-block. I leave all the other places you're not checking for stream validation to you. (I count at least three more in that snippet alone.  @WhozCraig I've just posted two alternatives. I realize that I went the adjacency list approach, and the question mentions cost-matrix... Still my code should tell the OP how to do things regarding stream input.  Old Answers:  Alternative  Using Boost Spirit to do the parsing. This is a drop-in replacement and the data structures and have been complete un-altered:  Full code for reference  340k4545 gold badges424424 silver badges582582 bronze badges  6  1  +1 (and i wish I could up-vote this again and again...) The initializer lists on the graph insertion are an especially nice touch, along with the duplicate-edge check via the returned iterator,bool pair.  @WhozCraig Good point, in that respect, the std-library version is more full-featured than the Spirit version  Thank you so much. That was really helpful. Suppose I choose not to use vectors, what are my alternatives then? I will post my entire code so that it becomes easier. My code works perfectly if I take the input from the user from the console.  @user2893084 What is the question left, if your code works perfectly (by the way my samples also take the input from the "console" (stdin))  in C++ has 3 meanings: bitwise shift-right, reading from an ostream, and an upvote to sehe for yet another Boost.Spirit answer ;-)  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  