 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I'd like to ask help with the correct syntax to declare a std::map whose mapped_type is an inner class of a template class.  Please find in the code below a #if/#else block. The "#if 1" block has template class Outer that contains inner class Inner. The Outer defines function Func that takes a std map whose mapped_type is of type Inner.  Compilation fails in Outer::Func(...) at the declaration of the std::map iterator, i.e. this line:  I've tried but cannot figure out what is wrong with the line of code.  For comparison/contrast, the "#else" block contains non-template code of similar nature. This code compiles.  1 Answer 1  Since is member of your template , it becomes a dependent name. That causes the identifier , which in this case is a member of , to become a dependent name aswell.  This forces you to use the keyword , according to the rules:  This is because the compiler can't be sure what certain constructs inside of your class mean since it does not know the exact types used for and yet:  Inside the definition of a template (both class template and function template), the meaning of some constructs may differ from one instantiation to another. In particular, types and expressions may depend on types of type template parameters and values of non-type template parameters.  The keyword is used to tell the compiler that the symbol you are accessing is indeed a type alias / type.  To be honest, the explanation at the link you noted went above my head. If you're very familiar with this scenario, would you be able to explain it in simpler terms? When you say "The typename keyword is used to tell the compiler that the symbol you are accessing is indeed a type alias/type", what is "symbol" in this context? The inner class? Based on my parsing of the explanation, I'm unclear why this solution is required for this situation (inner classes), but is not required with "non-inner" classes. Appreciate if you have a deeper explanation, but no worries if not. Thank you.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  