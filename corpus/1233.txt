 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  My question is about the design of the Java stack. Was it designed with recursion in mind, or did recursion become a thing due to the structure of the stack?  Recursion is a basic design principle of pretty much every computer language newer than FORTRAN.  And call stacks are a common implementation technique for even more languages, including Fortran.  Actually you need 3 stacks to emulate (even with that only almost ) all kinds of recursion( towers of hanoi). But to the question: "emulate" hits the point. Why emulate and let the compiler create something non recursive from a recursive aproach? While there are reason(as for anything) Java emphasizes(or emphasized)on that. So you can recurse but java will not do complex refactoring of a given recursive code into something non recursive.  2 Answers 2  Actually, the "real thing" with recursion is tail recursion, and compilers recognising that, and under the cover optimising it into iterative loops.  And surprise: you don't get that with Java. Thus, in the real world, recursion and Java do not go together nicely. Just a few thousand recursive calls might crash your JVM. So you absolutely try to avoid recursion in real java. It is a neat thing for small isolated problems. But beyond that, recursion is "not" a thing in Java.  And the design of the stack is probably more based on the idea to create a simple, easy to port system for a virtual machine 20 years ago. And both concepts (stacks, and recursion) both existed long before Java v1 was released.  which allows us to define our own tail recursive interface:  therefore you can do sth like this:  however, Java natively does not have any tail recursive optimization in mind. as comparison to Scala(better Java, I think), Scala has annotation, therefore compiler will optimize the recursion into non-recursive manner when this hint is provided and given that function is a true tailrec function.  Java 8 did not add any tail-recursive interface or particular support for TCO, and the blog you've linked does not say otherwise. However, with the introduction of lambdas in Java 8, it is possible for programmers to simulate recursion with tail-call optimization. Such simulation is a programming technique, not a language feature.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  