 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I was giving some programming contest.............. and I have solved one problem related to the dynamic programming.Below is the link of the problem  I have given the solution of the problem as follows-:  In the above solution, I have taken an array moves[].This array will keep the result of the subproblem.In the FindMove function, if size of the problem is small, it would store the result of that subproblem in maves array and return.  If size of the subproblem is large, then I have called the function FindMoves() three times(one for strength-1,second for strength/2 if divisible by 2 and third by strength/3 if divisible by 3) and finally taking the minimum out of three.  Above solution is working fine when the size of the problem is with in the array size(1-10^6) but not working for size greater than 10^6 because my array size is 10^6.  Above solution is not working when the size of the input is too large(In the problem strength is between 1 to 10^9) but my array size is smaller than that.(I can not take more because If I take more I am receiving Memory exceeding error)  If you are not getting my problem, the same problem is available here.  My problem is only that I am using dynamic programming(with recursion) and when size of the problem is too large, my solution is not working because my array size is not too much large  Please suggest me what to do...... Any help would be appreciated.....  Please describe the problem here with all the unnecessary storytelling removed and explain your approach (in particular, the DP state). I don't find your code very intuititve. Also, we are not here to find your bugs, but if there's a problem with your initial approach we can probably help you  @Niklas... Actually I am solving this problem by taking every possible case and storing the subproblem result in array so whenever the subproblem repeats I don't solve it but take the value from stored one(that I have stored in the moves array). My problem is that the nnumber of subproblem is too much such that it can't fit into the array(that is 10^9 in worst case). So I am looking for some alternative solution or anything I am doing wrong......  As I said, please describe the problem, describe your approach and tell us where your specific problem lies. You can edit the question for that  1 Answer 1  It is better to not use moves[10000000] rather use a map. You do not need to cover all integers from 1 to 10^9, rather just use  /2 or (-1 & then /2) whichever is applicable  and (/3) or (-1 & then /3) or (-1, -1 & then /3) whichever is applicable and you will get your solution pretty fast for (t=)1000 test cases.  In which order I have to apply these conditions.......should I check for all the conditions and then find the minimum(that I have also tried but getting time exceeded error while posting the answer means without array just recursion).........  only one of /2 or (-1 & then /2) will be applicable, similarly for (/3) or (-1 & then /3) or (-1, -1 & then /3) also only one of these is applicable. Can you post your modified code through pastebin or other similar site.  I have uploaded the modified code here.......... pastebin.com/Ls4byjUN this is not giving the correct answer could please explain once.  I have seen your code. You have made the logic greedy instead of dp. You will have to do both operations /2 & /3 and store the result simultaneously.  yes I have identified the issue and corrected the code.............. now it's working perfect where I have uploaded that........ and many-2 thanks for that....... I am also looking for answer for one more question which I have posted here...... stackoverflow.com/questions/22624576/…  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  