 Queue using Stacks  The problem is opposite of this post. We are given a stack data structure with push and pop operations, the task is to implement a queue using instances of stack data structure and operations on them.  A queue can be implemented using two stacks. Let queue to be implemented be q and stacks used to implement q be stack1 and stack2. q can be implemented in two ways:  Method 1 (By making enQueue operation costly) This method makes sure that oldest entered element is always at the top of stack 1, so that deQueue operation just pops from stack1. To put the element at top of stack1, stack2 is used.  enQueue(q, x):  While stack1 is not empty, push everything from stack1 to stack2.  Push x to stack1 (assuming size of stacks is unlimited).  C++  Java  Python3  C#  Javascript  Output:  Complexity Analysis:  Time Complexity:  Push operation: O(N). In the worst case we have empty whole of stack 1 into stack 2.  Pop operation: O(1). Same as pop operation in stack.  Auxiliary Space: O(N). Use of stack for storing values.  Method 2 (By making deQueue operation costly)In this method, in en-queue operation, the new element is entered at the top of stack1. In de-queue operation, if stack2 is empty then all the elements are moved to stack2 and finally top of stack2 is returned.  Method 2 is definitely better than method 1. Method 1 moves all the elements twice in enQueue operation, while method 2 (in deQueue operation) moves the elements once and moves elements only if stack2 empty. So, the amortized complexity of the dequeue operation becomes . Implementation of method 2:  C++  C  Java  Python3  C#  Output:  Complexity Analysis:  Time Complexity:  Push operation: O(1). Same as pop operation in stack.  Pop operation: O(N). In the worst case we have empty whole of stack 1 into stack 2  Auxiliary Space: O(N). Use of stack for storing values.  Queue can also be implemented using one user stack and one Function Call Stack. Below is modified Method 2 where recursion (or Function Call Stack) is used to implement queue using only one user defined stack.  The step 3 makes sure that the last popped item is always returned and since the recursion stops when there is only one item in stack1 (step 2), we get the last element of stack1 in deQueue() and all other items are pushed back in step  3. Implementation of method 2 using Function Call Stack:  C++  C  Java  Python3  C#  Output:  Complexity Analysis:  Time Complexity:  Push operation : O(1). Same as pop operation in stack.  Pop operation : O(N). The difference from above method is that in this method element is returned and all elements are restored back in a single call.  Auxiliary Space: O(N). Use of stack for storing values.  Please write comments if you find any of the above codes/algorithms incorrect, or find better ways to solve the same problem.  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  