 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I'm trying to traverse a binary tree using depth first traversal and breadth first traversal, but I'm running into trouble. My node and tree implementation seems to be fine, I'm just not sure how to properly traverse the tree depth-wise and breadth-wise.  8,3251010 gold badges4848 silver badges9191 bronze badges  2  1  Here's a hint. For BFS, a queue is most appropriate, while for DFS, you can use a stack.  @Neel OP is aware of DFS/BFS implementations - they have written code for the same as a method. The specific issue is that it seems they are trying to make their graph subscriptable.  2 Answers 2  If it is a tree, can be a list since trees are non-circular, so there no need to check whether you have visited a node before and, more importantly, you want to maintain the order of your traversal.  Your DFS implementation is slightly incorrect. As written, you've actually mimicked a queue, not a stack.  Your current code actually works fairly well for breadth-first search. It forces the siblings of a node to be evaluated before its children:  The logic for DFS requires a stack to behave like this: when a new node comes, you need to add it to the left of the list, rather than the right. This way, you force the traversal of a node's descendants before the node's siblings.  Other Issues  The specific issue you are facing beyond this is that you haven't specified what is.  If is an object that doesn't support lookup, then you could implement that using a method in the class definition.  Typically, people are content to use a dictionary to implement this. Something like should more than suffice.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  