 Iterators in Scala  Last Updated : 30 Sep, 2019  An iterator is a way to access elements of a collection one-by-one. It resembles to a collection in terms of syntax but works differently in terms of functionality. An iterator defined for any collection does not load the entire collection into the memory but loads elements one after the other. Therefore, iterators are useful when the data is too large for the memory. To access elements we can make use of hasNext() to check if there are elements available and next() to print the next element. Syntax:  Defining an iterator for a collection  We can define an iterator for any collection(Arrays, Lists, etc) and can step through the elements of that particular collection. Example:  Output:  Ways to access elements  Using while loop: Simplest way to access elements is to use while loop along with hasNext and next methods.  Output:  Using foreach action: We can make use of foreach to print elements by passing println function as parameter. Note that foreach is a higher order function that takes another function as parameter. In other words, println function is applied on every element.  Output:  Using for loop: Another straightforward way is to use for loop. It works in very similar way as accessing elements of any collection using for loop.  Output:  Finding elements with minimum and maximum values  Using built-in functions min and max Iterators can be traversed only once. Therefore, we should redefine the iterator after finding the maximum value.  Output:  User-defined functions to return minimum and maximum value. we can define our own pure functions as per our convenience to print minimum and maximum valued element.  Following code prints the minimum valued element:  Output:  Following code prints the maximum valued element:  Output:  NOTE: Both functions large() and small() are written as two separate codes to reduce burden on online compiler.  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  