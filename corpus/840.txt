 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I am currently trying to implement a Hashtable collection--I have everything up and running but I ran into kind of a conceptual problem when I was trying to define a custom iterator for the table. I have an internal class called 'HashEntry' which are the actual objects stored in the array--they store the key, the value, and the status of the entry, i.e. Empty, Active, Deleted.  This is the first part of my question--If I want to be able to iterate through the table, should I be iterating through (and therefore returning) HashEntry objects, or is it hashtable convention to iterate through the actual value stored in the table? The HashEntry class is private, so I assume its bad practice to return instances of it...  But if thats the case, how do I create an Hashtable iterator that iterates through its HashEntrys' objects? Do I have to define an iterator/iterable in HashEntry class?  The standard hashmap implementation doesn't preserve insertion order, are you sure your algorithm does?  I'm not really concerned about insertion order (which the algorithm does not preserve--the iterator would really only be for internal use, so that I can write methods that essentially drop the table cleanly, as well as iterate through in any other method.  1 Answer 1  Generally speaking, yes, it would probably be better if you did provide an iterator that iterates over s, so users get both the key and value (and state) when iterating. Oftentimes the value will not make sense without the key, and vice versa.  Why don't you just make the class a generic inner class, and make implementation-specific stuff ? You'll probably need to make generic as well, because I'm assuming that your parent class (let's just call it ) is also generic based on the and .  So, if I were you, I'd make you're and look more like this:  Note that the is an inner class of now, it's generic, and it's constructors are now . This guarantees that nobody except that outer class can instantiate a , because instantiating one outside of your hash table wouldn't make sense (see this). However, other people can access the keys and values of the entry through getters.  The iterator itself would be an instance of . As for writing one, that depends on your own hash table implementation, but you basically you need a way get the next element in whatever sequence: .  For example, here is an method implementation that iterates over a simple array:  Perfect, thanks @dudeprgm, I hadn't thought about making the HashEntry class public, although I will probably have to provide some notes on how it should be used, now that it can be. Thanks guys this helps alot.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  