 Linked List | Set 3 (Deleting a node)  We have discussed Linked List Introduction and Linked List Insertion in previous posts on a singly linked list. Let us formulate the problem statement to understand the deletion process. Given a ‘key’, delete the first occurrence of this key in the linked list.  Iterative Method: To delete a node from the linked list, we need to do the following steps. 1) Find the previous node of the node to be deleted. 2) Change the next of the previous node. 3) Free memory for the node to be deleted.  Since every node of the linked list is dynamically allocated using malloc() in C, we need to call free() for freeing memory allocated for the node to be deleted.  C++  C  Java  Python3  C#  Javascript  Output  Recursive Method:  To delete a node of a linked list recursively we need to do the following steps.  1. We pass node* (node pointer) as a reference to the function (as in node* &head)  2. Now since the current node pointer is derived from the previous node’s next (which is passed by reference) so now if the value of the current node pointer is changed, the previous next node’s value also gets changed which is the required operation while deleting a node (i.e points previous node’s next to current node’s (containing key) next).  3. Find the node containing the given value.  4. Store this node to deallocate it later using the free() function.  5. Change this node pointer so that it points to its next and by performing this previous node’s next also gets properly linked.  Below is the implementation of the above approach.  C++  Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  