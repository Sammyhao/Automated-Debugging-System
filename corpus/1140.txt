 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  My aim is to produce a function that searches for a number already in the list and print that it has been found. My initial idea was to follow my remove function which searches through the list until it finds a number (to then delete). This seemed the logical way to code the search function. If this isn't correct how would I modify it to search through my list and display that a number has been found? I have nodes *head, *current and *temp as well as node pointer next and number as the data type in a class on a .h file. Thank you. NOTE - I used my remove() function under the search() function.  You can just run through the list and search for the element. Worst case scenario, this is O(n)... not very efficient. You might look into implementing a binary search tree instead (searching worst case O(ln(n))).  I wanted to know if there was a more efficient way of doing a search rather than following the same path as the remove function  2 Answers 2  Your search algorithm seems to be wrong. Change it to :  And you don't need to remove nodes till you find the desired value. You can just use your search algorithm to find if a number already in the list. If that's what you want.  3,42722 gold badges2424 silver badges4040 bronze badges  10  It works but it displays a random number instead of the number I wanted to find. E.g. 000nbn45found  how the hell it will show a number ?? it is null... you know what i mean... change it and i think it will show the actual numbers  And it would be great if you give the input for which your code is not working and also your full code  I have made the changes and done what you said above, if I search for a value in the list and it isn't there it works. If I search for a value in the list it also works but instead of displaying 2 for example, it displays a hex number eg 050b3ng44  While a list is unordered a comparison of search algorithms doesn't have any sense. Simply iterate over all nodes one by one and apply match criteria.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  