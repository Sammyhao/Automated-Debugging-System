 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I was trying to implement BFS using Vertex classes and BFS class, since I wanted to learn implementation of classes along with algorithms.  vertex.cpp  BFS.h  BFS.cpp  getNeighbours function from vertex class gets the vector of neighbouring vertices of particular vertex.  Problem I am facing is that for graph in application.cpp that I have defined.  vertex 4-> vertex{5}  I would really like some assistance.. there is some thing i am unable to see here, and hence not getting the proper output.  My advice is for you to take this as an opportunity to learn how to use a debugger. With a debugger you can step through your code statement by statement, jumping into your own functions calls, al while monitoring variables and their values. If there's no warnings (with many extra warnings enabled) when building and there's no obvious problems found in the code, then using a debugger is the way to find and fix problems.  2 Answers 2  You are using containers of . Think about that. Think about shallow copies.  So far, so good. You have 5 vertices, each without neighbors.  Now the member of v1 contains copies of v2 and v4.  Yeah, fine, but the nodes contained in v1's member are still neighborless.  This gives you a search of v1 and its "neighbors", namely the neighborless copies of v2 and v4:  If you store pointers to vertices, you'll have better luck.  89.8k1111 gold badges137137 silver badges143143 bronze badges  3  Also, it might be a good idea to delete the copy constructor and copy assignment operator of , which would have caused the compiler to give an error when trying to copy into .  @G.Sliepen: Copying a is not inherently wrong unless|until we decide that it is. Another design might do that and work correctly. This design was based on a misunderstanding of how copies work. If we change the design so that is a container of , then the compiler will balk when we try to put a in it.  Thanks @Beta, I tried with and got the expected result, I stored all the vertices pointers  It's happening because you're copying nodes and vectors all over the place. The particular problem here is that you create v1 and v2, then attach v1 to v2 by pushing v2 onto v1._neighbors. This is a copy of v2, not the original! THEN you set the neighbors for v2, but you are setting neighbors NOT for the v2 in v1._neighbors, but for the v2 in main.  The quickest solution is to define the graph upwards in main. But a better solution is to pass around pointers instead of actual instances to avoid copying, this would change all the code.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  