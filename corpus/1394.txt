 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I'll start by illustrating a simple use case example:  Consider the problem of a social security ID database, where in C++ code is modelled as a where its key is the social security ID of a person and its value is a with the full-name of that person (e.g., ).  Consider also, that there's a request for printing this database sorted in ascending order based on the person's ID (i.e., 's key).  Naively, one would think to use in order to sort the according to the requested criteria and then print it, like the example code below:  However, this is not the case, because use of with a range of either a or a will raise a compiler error.  Questions:  Why STL's unordered containers cannot be sorted by ?  Is there a legitimate and efficient way to sort either a or a ?  39.8k1010 gold badges8787 silver badges152152 bronze badges  3  If it doesn't make sense to add two togeather, do not store things as integers. Adding two SSIDs togeather makes no sense, store them as strings or something.  It only makes sense to use mutating algorithms like that on sequential containers, of which are not.  1) has no clue what container the iterators are from, the error is because requires s while iterators are s. 2) There's a reason those containers are named unordered . If you want ordering use a  3 Answers 3  containers store internally hashed data and thus it's not possible to order them after the hash has been generated.  In order to sort the data you can use an additional non-hashed container (e.g. map or set) and either use them along with the unordered version (so you can use the normal one to sort the data and the unordered one to have fast per-item access) or you can do something like  I recommend not to do the above often (unordered containers have slow sequential access)  Sorting only makes sense for sequence containers, which are containers whose elements are determined by the order in which they were added to the container. The dynamic sequence containers in the standard library are vector, deque, list and forward_list.  Maps and sets, on the other hand, are associative containers, in which elements are identified by their value. Thus it makes no sense to ask for an "ordering", since the container elements aren't arranged in any kind of sequence. (It's true that an ordered map can be iterated in a comparison order on the key, but that order emerges from the container; it is not provided by the user.)  1.Why STL's unordered containers cannot be sorted by ?  Because unordered containers are already "sorted", albeit not directly by their keys, but by (typically) (also accessible as ). This "sort" order isn't cosmetic - it's the whole basis on which hash tables are able to find elements quickly. If were allowed to re-order the elements by key instead, then the container would no longer be able to function as a hash table: elements couldn't be reliably found or erased, insertions might put duplicates in the container etc..  2.Is there a legitimate and efficient way to sort either a or a ?  In the general case, only by first copying the elements to a sortable or sorted container such as or (the former will usually be faster, but benchmark both if you really care):  In your case with , I'd suggest copying only the keys to a for sorting, then during iteration look up each key in the : that will avoid a lot of copying.  (It is sometimes possible to orchestrate an unordered container with ordering by key (e.g. hash function returns key, container presized so max bucket index >= max key value) but anyone considering such abuse would be better off using a .)  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  