 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  At the first sight double linked list seems reasonable, but as I started implementing I've faced problem tracking current position. I've used std::list iterator but dealing with extreme cases (see next part) became a pain. So here are requirements for a DS:  Effective insertion in the middle  Insertions/erases don't invalidate iterators  O(N) random access is not a problem  Requirements for a current position cursor (iterator):  Bidirectional  Initially denotes position  When iterator in the position, after inserting element in the end, next iterator advance will move it to this element. The same behavior if previously the playlist was empty  Same for the opposite case: iterator in the beginning, , moving backwards will go the newly added element  What are the best practices to implement it? Is there's any libraries for it (C++)?  1 Answer 1  is a container that supports constant time insertion and removal of elements from anywhere in the container. Fast random access is not supported(Which is not a problem in your case). It is usually implemented as a doubly-linked list. Compared to this container provides bidirectional iteration capability while being less space efficient.  Addition, removal and moving the elements within the list or across several lists does not invalidate the iterators or references. An iterator is invalidated only when the corresponding element is deleted.  From My point of view is perfect fit for the problem described by you.  7,37855 gold badges2525 silver badges4444 bronze badges  1  Silly me: There's a structure consisting of std::list and std::list::iterator. Default copyctor made a deep copy of the list, but iterator was still pointing to the old one.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  