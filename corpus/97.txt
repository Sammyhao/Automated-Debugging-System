 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  However every example I have seen of BFS uses a queue and is iterative rather than recursive. Wondering if there is any way to define a recursive BFS algorithm.  68.3k8282 gold badges250250 silver badges439439 bronze badges  3  Similar to stackoverflow.com/questions/2549541/… ? If your graph is a tree, you can use iterative deepening. If it is a general graph, you'll have to pay the memory cost, but you can pass the queue on the stack to make it 'recursive'.  Yeah similar to that but there wasn't a clear answer, unless the answer is no you can't do it. (couldn't tell if that's what they were saying). I would like to see what it would take to do it recursive.  You can always write the loop as a (tail-)recursive function, but you cannot do away with the queue. It's inherent in BFS.  1 Answer 1  If sibling nodes can be ordered and have information or a way to retrieve information about their siblings, we can execute in the order of a breadth first search. Clearly, with abstract data, building the tree as we go, like calculating a subsequent chess move, this may impossible or prohibitively complicated. Tree data structures, however, could be built with provisions for sibling information.  Here's an example with dummy 'sibling' and 'done' functions. If we're not guaranteed each node has children, we may want an extra parameter to record the last seen child. Note that 'next sibling' could be akin to a linked list but could also be implemented as a method of calculating what the next sibling is based on known information.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  