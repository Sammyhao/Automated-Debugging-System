 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I am working on a simulation with time to event data that requires some "memory" of when an event started in order to apply a Weibull function at that time. This requires a large matrix of values and I am interested a VBA solution to avoid large conditional and array calculations on the worksheet. The current solution is to create a matrix containing the data and to multiply that by a matrix containing the diagonal of interest and then sum the product to obtain the diagonal alone. The matrix is 1800x1800 on the sheet.  The code below appears to fault during the matrix multiplication and gives a "run time error '9' subscript of of range" message. I have found that 'array_2' -despite being specified as array_2(1,1) -shows as having a lower bound of 1 and upper bound of 2 (see block of code near the bottom for proof).  Any help as to why this is occurring would be much appreciated.  Todd  The edited code following the first suggestions retains a runtime error '13' :  After correcting the above issues, the array multiplication step bugs to a run-time error '13' when used in the following code. I believe some variable is not being erased when called twice via the first sub. In reading various documentation, I do not beleive that I should have to provide any of the values to the call to 'sum_diag_float,' but this may be the problem. Ultimately, the sub 'call_txp_surv' will be called within other loops to create the desired simulation data, thus the need for the sub to work without bugs despite the number of times it is called. I am noting that a call_txp_surv with q = 1000 (s = 1000) does not generate an error, but at q = 1800 and s= 1800 the run-time '13' occurs. The code now contains the implemented cell counts which are different from previous code (much larger and thus no simulated data). Variables/counters have been renamed to avoid conflict with others. Any thoughts as to why this macro won't scale-up would be appreciated.  Is it possible that if a cell is empty and assigned to an array that the array does not "ReDim" to the new range of (empty) cells?  What happened when you tried that? Show me the code you ran that resulted in the array not ReDim ing  Assuring the for loop did not require population of an empty array completed the task to 1790 rows. I will have to fuss with it to get it dialed in exactly, but my assumption is that the arrays were not being redimensioned somehow. I'm not sure why this would be the case, as all other arrays are dimensioned according to 'array_2.' However, this seems to be the case.  2 Answers 2  actually redimensions array_2 to (1 to 2, 1 to 2) (two rows and two columns) (Dimension 1 for the rows; Dimension 2 for the columns).  This is what happens when you set an array equal to a range of cells.  If you want to retain the 0 to 1 dimensions, you would have to loop through the cells and assign them specifically.  declares all of the variables, except for sum , as Variants. Given your code, I wonder if they should be declared as Long.  EDIT: With regard to your edited code, I don't understand why you did what you did.  In the link I posted above to Chip Pearson's website, it clearly shows that, when you are setting an array equal to a range, the array should be declared as type Variant; you have declared it as Double (twice!), therefore the Type Mismatch error. Again, if you MUST have the array as type Double, then you will have to loop through and assign the values one by one.  For reasons I wrote above, the ReDim array_2 line adds overhead without accomplishing anything and should be removed.  Why do you declare your counters as being of type Double instead of type Long?  44.4k77 gold badges2424 silver badges5252 bronze badges  2  Ron, I appreciate your suggestions. These have resolved many issues. The key to a working solution was declaring new arrays by the Lbound, Ubound function for all arrays following the re-dimensioned array_2. I changed most of the data types to double, however this now creates a "runtime error '13' " at the line: Any notion of what is responsible? There are no empty or non-numeric fields in the referenced range on the sheet. Thanks-  The working and tested code for my question is below. Thanks to Ron for assisting.  Thanks Ron, The Chip Pearson site demonstrates the array behavior as you describe. Based on the text, the Variant datatype appeared to be sufficient, but not necessary.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  