 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I have a situation where I have to store millions of records. At the same time, I also need to sort these records. I have following questions in my mind.  Which data structure to use to save such huge amount of records?  Which sorting algorithm should I use to sort the records on the above selected data structure?  Should I sort the data while adding or keep adding and sort it when required?  Millions of records are both ff type primitives and Objects. So I need to sort two types of records which are stored in two different data structures.  When someone ask me nth smallest/nth highest data in the million records, I need to return the data back from my sorted data. I need to store this data in memory.  I did try to find the answer but couldn't find anything concrete. Any help appreciated?  94199 gold badges2020 silver badges3434 bronze badges  8  Just use a database, it will always be better than a solution of your own and you'll get persistence of your data for free.  The answers to those questions really depend on what you actually want to do that with that data - everything that you want to do with the data, when you want to do each of those operations relative to each other, the relative frequency of those operations, etc.  You say you have to store millions of records. Do you mean store as on disk? Or do you just have to keep them in memory? As @moreON said, how you do this depends on what exactly you're going to do with the data. Without more concrete information, this question is too broad and probably won't get good answers.  Yes i want to store millions of records in memory. When someone asks me for 300th smallest data or 10000th smallest data, i need to return the data from the sorted data  If all you want to do is find the nth largest or nth smallest, then just load the records into an array and then sort the array with your runtime library's standard sorting function. Lookup then becomes a direct index into the array. Somehow, though, I don't think you're telling us the whole story. Do you get the records all at once? Or are records being added and/or removed frequently? And what are "ff type primitives?" If you want a good answer, you need to give us more information about the data and exactly how it's being collected and used.  1 Answer 1  Maps are the data structure that you can use. It stores the data in sorted manner. It stores the data int the of (key,value) pair that can be accessed by using a key.  In different programming languages you can see their core libraries have built in maps or rather hashmaps which might have different names in each implementation.  Map is an interface in java and its concrete implementations are called HashMaps and Hashtables.  Python - Dictionaries  C++ - hash_map, unordered_map and so on are different implementations  Hash maps are implemented using arrays. The idea is to mathematically convert the key into a numeric value (called hash) which is within the size of our array and store the value at that index in the array. As you add or delete elements from the table you can decrease or increase the size of your array respectively. This hash function could range differently for different keys. A couple of examples of hash functions are :  Integers Keys : Mod the key with the size of the table (array) to get a unique key.  String Keys : Take the ASCII value for character in the string, add them up and mod it with the size of the table.  Resolving Collisions - It is natural that you might face a situation where 2 or more keys hash to the same location (index) in the table. You could use different ways to solve this. Some of the well known techniques are Linear Probing or Separate Chaining. For instance separate chaining is nothing but using storing a linked list at each index. A node of this list would store (key, value) pairs. Hence all keys that hash to the same index would be stored in the same linked list.  Many practical applications of the hash map are because of its efficiency in three main things which are inserting data, searching data and deleting data ! They are used widely in building other complex systems, components or data structures like caches (LRU cache), Database indexing, Sets etc.  if you use array maps then then there will be no sorting but if you do use treemap like inbuilt defined library in c++ then sorting can be done easily and you can use also use a key to access a record directly  Your idea of how string keys are converted into hash table indexes is incorrect. The string key is hashed using a hashing function that is quite a bit more involved than just adding up the ASCII values. You should familiar yourself with Hashing functions. Also, your assertion that maps are sorted is incorrect. Whereas sorted maps are possible, that's not the typical implementation. Finally, hash maps are not particularly good for searching. They're good for lookup, which is much different than search.  I agree with you, it is better for lookup but not for searching. There are other data structures that are better at searching.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  