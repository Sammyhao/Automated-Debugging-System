 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  In backtracking we use both bfs and dfs. Even in branch and bound we use both bfs and dfs in additional to least cost search.  so when do we use backtracking and when do we use branch and bound  Does using branch and bound decreases time complexity?  4 Answers 4  It is used to find all possible solutions available to a problem.  It traverses the state space tree by DFS(Depth First Search) manner.  It realizes that it has made a bad choice & undoes the last choice by backing up.  It searches the state space tree until it has found a solution.  It involves feasibility function.  Branch-and-Bound  It is used to solve optimization problem.  It may traverse the tree in any manner, DFS or BFS.  It realizes that it already has a better optimal solution that the pre-solution leads to so it abandons that pre-solution.  It completely searches the state space tree to get optimal solution.  @AbhishekDey Actually, backtracking will give a solution, not necessarily the most optimal solution. Backtracking works best for constraint satisfaction problems and branch-and-bound is best for optimization problems.  @CameronGagnon To be clear, backtracking guarantees optimality in theory, because it will explore all solutions, only pruning those that it knows for sure they can't possibly be optimal. In practice, of course, this algorithm can take forever on medium to large size instances if the number of combinations is exponential and if no smart pruning is possible.  Backtracking  Backtracking is a general concept to solve discrete constraint satisfaction problems (CSPs). It uses DFS. Once it's at a point where it's clear that the solution cannot be constructed, it goes back to the last point where there was a choice. This way it iterates all potential solutions, maybe aborting sometimes a bit earlier.  Branch-and-Bound  Branch-and-Bound (B&B) is a concept to solve discrete constrained optimization problems (COPs). They are similar to CSPs, but besides having the constraints they have an optimization criterion. In contrast to backtracking, B&B uses Breadth-First Search.  One part of the name, the bound, refers to the way B&B prunes the space of possible solutions: It gets a heuristic which gets an upper bound. If this cannot be improved, a sup-tree can be discarded.  Besides that, I don't see a difference to Backtracking.  Other Sources  There are other answers on the web which make very different statements:  Branch-and-Bound is backtracking with pruning (source)  Backtracking  Backtracking is a general algorithm for finding all (or some) solutions to some computational problems, notably constraint satisfaction problems, that incrementally builds candidates to the solutions, and abandons each partial candidate c ("backtracks") as soon as it determines that c cannot possibly be completed to a valid solution.  It enumerates a set of partial candidates that, in principle, could be completed in various ways to give all the possible solutions to the given problem. The completion is done incrementally, by a sequence of candidate extension steps.  Conceptually, the partial candidates are represented as the nodes of a tree structure, the potential search tree. Each partial candidate is the parent of the candidates that differ from it by a single extension step, the leaves of the tree are the partial candidates that cannot be extended any further.  It traverses this search tree recursively, from the root down, in depth-first order (DFS). It realizes that it has made a bad choice & undoes the last choice by backing up.  Branch And Bound  A branch-and-bound algorithm consists of a systematic enumeration of candidate solutions by means of state space search: the set of candidate solutions is thought of as forming a rooted tree with the full set at the root.  The algorithm explores branches of this tree, which represent subsets of the solution set. Before enumerating the candidate solutions of a branch, the branch is checked against upper and lower estimated bounds on the optimal solution, and is discarded if it cannot produce a better solution than the best one found so far by the algorithm.  It may traverse the tree in any following manner:  BFS (Breath First Search) or (FIFO) Branch and Bound  Backtracking: -optimal solution is selected from solution space. -traversed through DFS. Branch and Bound: -BFS traversal. -here only fruitful solutions are generated rather than generating all possible ones.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  