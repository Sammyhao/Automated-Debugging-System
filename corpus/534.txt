 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I am brand new to Gremlin and am using to traverse my graph. The graph is made up of many clusters or sub-graphs which are intra-connected, and not inter-connected with any other cluster in the graph.  A simple example of this is a graph with 5 nodes and 3 edges:  is connected to with edge  is connected to with edge  is connected to with edge  I want a query that will return a sub-graph object of all nodes and edges connected (in or out) to the queried node. I can then store this sub-graph as a variable and then run different traversals on it to calculate different things.  This query would need to be recursive as these clusters could be made up of nodes which are many (inward or outward) hops away from each other. There are also many different types of nodes and edges, and they all must be returned.  For example:  If I specified in the query, the resulting sub-graph would contain , , , , and .  If I specififed , the returned sub-graph would consist of , , .  If I queried , the exact same subgraph object as returned from the query would be returned.  I have used both Neo4J with Cypher and Dgraph with GraphQL and found this task quite easy in these two langauges, but am struggling a bit more with understanding gremlin.  EDIT:  From, this question, the selected answer should achieve what I want, but without specifying the edge type by changing to just .  However, the loop syntax: is invalid in Python of course. Is this loop function available in ? I cannot find anything.  EDIT 2:  I have tried this and it seems to be working as expected, I think.  Is this a valid solution to what I am looking for? Is it also possible to include the queried node in this result?  1 Answer 1  Regarding the second edit, this looks like a valid solution that returns all the vertices connected to the starting vertex. Some small fixes:  you can change the to  if you want to get also the starting vertex you need to move the step before the  I would add a step to remove all duplicate vertices (can be more than 1 path to a vertex)  2,63111 gold badge1313 silver badges2424 bronze badges  3  Great, this looks like it returns the correct result, but when I run the following two queries to 1. find the total number of nodes in the entire graph and 2. find the total number of nodes in the returned subgraph, the results are 3 (correct) and 21 (obviously not what I want) respectively. 1. 2.  To explain in more detail, what I would want to achieve is for the query in your answer to return an entire sub-graph object that I can then run queries and traversals on, just as if it was the original, entire graph itself being queried. Is this possible? In otherwords, is it possible to create a graph object from the result of a traversal?  @KOB If you are working with Tinkerpop you can save the subgraph by using the step as described here: tinkerpop.apache.org/docs/current/reference/#subgraph-step. you can also take the ids of the vertices in the first query and use them in the second query, add id() after the and use the ids in the  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  