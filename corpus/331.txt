 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I am required to write a function in C, that given a pointer to a linked list, will print out the elements in Python syntax: e.g. For the list consisting of 1,2,3,4 and 5, the function will print out [1, 2, 3, 4, 5].  I have tried to write the code as follows:  Output looks like this: [1, [2, [3, [4, [5[]  I understand that every time the function calls itself, "[" will be printed. is there a way to print "[" only when the function is called for the first time?  Yes. Second option, add a flag to the parmeters that tells you if you should print a bracket  I would but I"m not really sure if I'm allowed to do it as this is for homework and I think the whole thing is meant to be printed within the function  If recursion wasn't an actual part of the requirement (it might be if this is a practice assignment), don't do things like this recursive  4 Answers 4  You could create a wrapper function for printing braces. In between prints, call the actual recursive function, like this:  Edit: As pointed out by Felix Palmen, a variable is an option, but not the best. It works only when you call the function the first time. After that, the counter has to be reset, which isn't easy to do and makes the recursive function impure.  An example of the use of :  This prints:  A static integer retains its value in between function calls. So, you'd be able to use it the very first time you call your recursive function, but you'd need to reset it every time you hit the base case.  309k7777 gold badges559559 silver badges608608 bronze badges  21  Is it possible to solve the problem without creating a wrapper function or global variables?  Good idea, but the name is a poor one (since identifiers starting with an underscore are implementation reserved). Should be  @M.Ng It is, with a static integer variable. I don't want to sound redundant, since this answer already proposed it.  @cᴏʟᴅsᴘᴇᴇᴅ it is possible to reset it e.g. in the tail of the recursive call. Still, it defeats the typical purpose of recursion, so I think your original answer is indeed the best one.  – user2371524  Jul 18 '17 at 13:06  2  @M.Ng no, in something like , the isn't an assignment but an initialization. Initialization only ever happens once per lifetime of the variable, regardless of where it is declared. Assignment would look like and this would indeed assign in each and every call.  If this is for practicing recursion, I don't think it's a good solution. Recursive functions typically aim to be pure functions, a global variable defeats that purpose. If on the other hand recursion isn't required, there are much better iterative approaches.  – user2371524  Jul 18 '17 at 12:57  The if inside the outer else was theoritically useless.  I tried to give a solution with the least amount of modifications to the original solution. However, the solution that is pure is the only solution. This solution will work, however like @FelixPalmen it needs to be pure. I made it reset the counter to zero when it hits the end of the linked list so it works for OP's needs now.  Add an additional parameter which shows if it was called from outside or recursively. Most elegant way but will cost you some stack.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  