 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I have a directed graph. Initially, all nodes are assumed to be unvisited and flag is -1 in . Now we start from a source node & push into and make . Now I do DFS traversal & push nodes & make . if all the DFS directed links are visited I pop the element of the stack and mark it ; while pushing if we encounter a node with , the cycle is detected and i do an increment in variable;`  you can see in my code, I am storing DFS traversal in a vector, which I think is garbage, how can I directly pass these connected nodes directly to check the flag and detect the cycle. currently my code works but fails for larger input. kindly looking for help.  Have you tried to add some checks to make sure that no vector indexes will go out of bounds?  Why don't you just implement a known algorithm? This looks inefficient. For one: why would you maintain a counter, as you could just exit whenever you find a cycle. There is no need to continue when you find one. It is not that it will go away ;-) But also that vector: why do you have it? Why not use straight away in your dfs traversal? ... In short: why don't you just implement one of the several known algorithms?  @trincot sir, thank you so much for your kind suggestion, yeah I want to remove the temp vector and pass flag straight in dfs traversal,but I am not able to do it, I request you to please suggest me a code to do it. thanks!  Design a class with attributes for the data you need. The dfs function becomes a method of the class so that it can access the attributes without needing to have them passed in as parameters ( which consumes a lot of stack memory for a recursive function so you will be unable to process large graphs ).  1 Answer 1  It is important to minimize the parameters in the signature of a recursive function if you want to handle large datasets. Each call requires the parameters to be kept on the stack, a fairly limited resource.  To minimize the parameters, use a method on a class which stores just one copy of the parameter data as an attribute whenever possible. For DFS, everything except the index of the currently visited node can be moved out of the parameter list.  Here is a straight forward implementation of DFS which I have used successfully on graphs containing hundreds of thousands of vertices.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  