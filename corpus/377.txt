 deque::clear() and deque::erase() in C++ STL  Deque or Double ended queues are sequence containers with the feature of expansion and contraction on both the ends. They are similar to vectors, but are more efficient in case of insertion and deletion of elements at the end, and also the beginning. Unlike vectors, contiguous storage allocation may not be guaranteed.  deque::clear()  clear() function is used to remove all the elements of the deque container, thus making its size 0. Syntax :  Examples:  Errors and Exceptions 1. It has a no exception throw guarantee. 2. Shows error when a parameter is passed.  CPP  Output:  deque::erase()  erase() function is used to remove elements from a container from the specified position or range. Syntax :  Examples:  Errors and Exceptions 1. It has a no exception throw guarantee, if the position is valid. 2. Shows undefined behaviour otherwise. Removing element from particular position  CPP  Output:  Removing elements within a range  CPP  Output:  Application Given a list of integers, remove all the even elements from the deque and print the deque.  Algorithm 1. Run a loop till the size of the deque. 2. Check if the element at each position is divisible by 2, if yes, remove the element and increment the iterator, else just increment the iterator to check the next element. 3. Print the final deque.  CPP  Output:  clear() VS erase() . When to use what?  clear() removes all the elements from a deque container, thus making its size 0. All the elements of the deque are removed using clear() function. erase() function on the other hand, is used to remove specific elements from the container or a range of elements from the container, thus reducing its size by the number of elements removed.  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  