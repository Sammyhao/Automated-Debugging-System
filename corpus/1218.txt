 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I have an stl unordered_map and I would like to store references to elements in that map. I would like there to be no duplicate references. I thought I could create an set of iterators which pointed to elements. For one I wasn't sure that it would recognise , but even so I got some long template errors which I think boiled down to there being no comparison operator < for iterators.  I then tried an unordered set compiling with g++ -std=c++0x but got pages of errors.  1 Answer 1  Since you are trying to store the iterators in an unordered set, you don't need a comparison operator but rather a hash function.  I'm guessing, since each distinct iterator will be pointing to a distinct key, you can use the hash value of the key for hashing the iterator.  and instantiate the unordered set as:  also requires an equality function, but the iterators own should do fine, as long as all the iterators belong to the same .  39.3k66 gold badges5353 silver badges8989 bronze badges  1  Great this compiles. Coming to think of it. There are lot of useful set algorithms like intersection that I can use directly and simply with a normal set. Is there an arbitrary comparison function I can implement so that I can utilise these without actually caring about the ordering.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  