 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  The standard says that and the two related functions and are O(log n) if the data structure has random access. So, given that, I presume that these algorithms have O(log n) performance on (assuming its contents are kept sorted by the user).  However, it seems that the internal representation of is tricky (it's broken into chunks), so I was wondering: does the requirement of O(log n) search hold for .  3 Answers 3  Yes it still holds for because the container is required to provide access to any element in constant time (just a slightly higher constant than ).  That doesn't relieve you of the obligation for the to be sorted though.  92.7k1010 gold badges104104 silver badges184184 bronze badges  1  +1 for the first correct answer. Although I would say specified to provide constant time rather than "designed" :-). (The constant-time is required by the spec.) Also the requirement of is not really the constant-time but the use of "random access" iterators. These tend to go together.  Yes. deque has constant time access for an index if it is there. It is organized in pages of an equal size. What you have is smth. like a vector of pointers to pages. If you have let's say 2 pages with 100 elements and you would like to access 103rd element than determine the page by 103/100 = 1 and determine the index in the page by 103 %100 => 3. Now use a constant time access in two vectors to get the element.  Deques may be implemented by specific libraries in different ways, but in all cases they allow for the individual elements to be accessed through random access iterators, with storage always handled automatically (expanding and contracting as needed).  Just write a program to test that, I think deque's implementation of binary_search will slower than vector's, but it's complexity is still O(logn)  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  