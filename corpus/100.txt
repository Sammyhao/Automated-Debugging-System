 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I'm trying to implement a function using Breadth First Search to find the paths given a start and end nodes. I'm new to c++, I implemented the same in python already and it works.  With the following graph, it should give the paths :  I created a function called BFSPaths to solve the problem, however I keep on getting an extra digit in the answer . I haven't been able to figure out why the 2 and the 4 are being added to the answer. This is how the functions looks like:  This is how I'm calling my function (to print to the shell):  I would appreciate if someone can give me a push in the right direction.  1,30966 gold badges2424 silver badges4545 bronze badges  2  Very nice, clean code. However, how do you call the code? More precisely, what are and initially?  @KonradRudolph I just updated the question with the call I'm making to the function, which is essentially . head is the starting vertex and tail is ending index.  2 Answers 2  As far as I understand your calculating the set difference between reachable vertices and the path to the current vertex here:  But it does not make any sense in terms of BFS. As you can see further, you are adding vertices from this difference to your answer no matter if they lies on path from head to tail or not. You should look to another approach in this case and change your algorithm a little bit. Steps that I would recommend:  Add the head vertex as you do, but without a path.  Extract queue's head and add all adjacent vertices to queue with a link to their predecessor.  Repeat until queue is not empty or tail is reached.  Get the path from head to tail by following links to predecessors.  Btw, I would recommend you not to use method when you want to delete a head of queue (use instead). And also, you can change method to simple .  The last thing -- it looks for me not very clear why do you store adjacent vertices in if you have to sort them often. Use smth like instead so you will not have to worry about it.  thanks! I followed your advice, implemented BFSPaths using a vector of sets for the graph. The queue I changed it from a vector to Queue C++ from C++. Implemented format.  The problems was that the path was being updated . I need to use a temporary path so that the original path was not needlessly changed by visited nodes during the iteration.  I also used sets (not much of a difference, it only removes the sorting step).  The function after fixed looks like this:  The is now what's passed to the queue or added to the vector.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  