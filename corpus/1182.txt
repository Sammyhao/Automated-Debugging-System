 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I need to create a method which sorts an array of integers using a Stack and a Queue. For instance if given [-1, 7, 0, 3, -2] -> [-2, -1, 0, 3, 7]. I'm completely lost at how to do this question, because I would just use a sorting method, however for this question I am not allowed to do that. Can anyone explain how to do this with a Stack and a Queue?  1,54244 gold badges2929 silver badges5050 bronze badges  7  1  It's not that you have to sort with a stack or a queue. It's possibly that, your array should be implemented as a stack or a queue.  Well given the requirement of using either a stack or a queue, the only logical way to do it would be to use some form of mergesort.  Yes. First that you need it's transfer your data structure to array. Later you can use some of sort algorithm. Quick sort for example.  4 Answers 4  Many fast sorting algorithms (for example mergesort and quicksort) can be implemented efficiently on linked lists by using the fact that you can efficiently treat a singly-linked list as a stack (by prepending elements to the front) or queue (by appending elements to the back). Consequently, one possible way to solve this problem would be to take one of those sorting algorithms and approach it as if you were sorting a linked list rather than a normal sequence.  For example, here is one simple way that you could implement mergesort using queues. I've written this to sort s, but this could easily be extended to handle other types:  Overall, this will run in O(n log n) time, which is asymptotically optimal.  Alternatively, you could use quicksort, as shown here:  This runs in best-case O(n log n) time and worst-case O(n2) time. For an interesting exercise, try making it pick the pivot at random to get expected O(n log n) runtime. :-)  For an entirely different approach, you could consider doing a least-significant digit radix sort on the values, since you know that they're all integers:  This will run in time O(n log U), where U is the maximum possible value that can be stored in an .  Of course, all of these algorithms are efficient and elegant. Sometimes, though, you will want to do a slow and inelegant sort like bogosort. Now, bogosort is somewhat difficult to implement, since it typically requires you to shuffle the input sequence, which is way easier to do on an array. However, we can simulate shuffling a queue as follows:  Choose a random index into the queue.  Cycle through that many elements.  Remove that element from the queue and add it to the result.  Repeat.  This ends up taking time O(n2) rather than O(n), which has the unfortunate side-effect of making bogosort take expected time O(n2 &mdot; n!) rather than O(n &mdot; n!). However, it's the price we have to pay.  339k9494 gold badges838838 silver badges10141014 bronze badges  1  @templatetypedef Hey short question, let's say I wanted the parameter to be ArrayQueue<E> instead of Queue<Integer>, how should I modify the answer?  You can implement a Selection sort fairly easily with a Stack and Queue:  If the data is originally on the stack, put it all on the Queue, and do the following:  After the sort is over the elements will be sorted on the Stack, removing them all will return data in order Greatest to Least (which can easily be reversed).  No this is not very efficient, i'm assuming it's a homework assignment. Realisticaly if you want to sort data you should use Arrays.sort or Collections.sort which implement a merge sort for objects and a quicksort for primitives. These will be far faster (O(NlogN) vs O(N*N)). Realize however you'll need to have data in an array or a list to do this, not a stack or queue.  The method is supposed to take in an int[] list, which contains all the numbers. And then uses a Stack and Queue to sort it, which is unnecessary and pointless... EDIT: Also, I'm only limited to enqueue(), dequeue() and isEmpty() methods for the Queue, and push(), pop() and isEmpty() in the Stack.  In that case simply put every element from the int[] onto the Queue, then at the end put all the elements from the stack into the int[] in reverse order. I'll edit the code for your methods.  For queue specifically, is what you need to sort the . Have a look at the java docs.  You can insert the values in the using the method and you will get a sorted back. You can also control the sorting order by using a .  7,47422 gold badges2626 silver badges5050 bronze badges  4  Isn't the question about how to use stacks and queues to sort a list? Priority queues and queues are not the same as queues, and isn't an option for a stack or queue.  When a question is tagged in java and is talking about . Which do you think the questioner is talking about.  I thought that the question was about stacks and queues in the abstract, not the Java or type. The question seems like a silly trick question if the answer is "in Java, these are actually implemented as arrays, so you can use standard sorting techniques."  Stacks and Queues are data structures. Stack is a FILO and a Queue is FIFO. If you understand how those data structures work, you will be able to figure this out. Ultimately you can use the same logic that you would normally use for this type of problem, except you need to use stacks and queues as you data structures.  One way to use a stack in Java would be to sort the numbers with a recursive method, since Java has an internal memory stack.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  