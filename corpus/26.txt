 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I need to initialize a constant HashMap and would like to do it in one line statement. Avoiding sth like this:  similar to this in objective C:  I have not found any example that shows how to do this having looked at so many.  You should not use this method. It creates a new class for every time that you use it, which has much worse performance than just plainly creating a map. See stackoverflow.com/questions/924285/…  The reason I downvoted this is because it didn't explain that this creates a new class for every time that you use it. I think that people should be aware of the tradeoffs of doing it this way.  @TimoTürschmann Seems that if I ever needed static initialization of a map like this, that it would also be static, eliminating the every time you use it performance penalty - you'd have that penalty once. I can't see any other time that one would want this kind of initialization without the variable being static (e.g., would anyone ever use this in a loop?). I may be wrong though, programmers are inventive.  Please don't use this anti-pattern, it's actively dangerous and there are reasonable alternatives.  You can use Google Guava's ImmutableMap. This works as long as you don't care about modifying the Map later (you can't call .put() on the map after constructing it using this method):  This map is immutable. If you want the map to be mutable, you have to add:  If you can't use Java 9, you're stuck with writing a similar helper method yourself or using a third-party library (like Guava) to add that functionality for you.  3,78811 gold badge2323 silver badges2929 bronze badges  2  After adding 10 entries, it throws strange error "can not resolve method", is this bug with this method ?  @vikramvi yes If you look at the documentation is only done up to 10 entries since it is quite laborious  Maps have also had factory methods added in Java 9. For up to 10 entries Maps have overloaded constructors that take pairs of keys and values. For example we could build a map of various cities and their populations (according to google in October 2016) as follow:  The var-args case for Map is a little bit harder, you need to have both keys and values, but in Java, methods can’t have two var-args parameters. So the general case is handled by taking a var-args method of objects and adding a static method that constructs them. For example:  1,16222 gold badges1212 silver badges2222 bronze badges  1  Excellent if you could use Java 9+. Also these factory method returns immutable map.  Java has no map literal, so there's no nice way to do exactly what you're asking.  If you need that type of syntax, consider some Groovy, which is Java-compatible and lets you do:  Ignoring the declaration of (which is necessary to avoid an "unreachable statement" diagnostic), technically it's only one statement.  True, but this is the sort of code that I never hope to stumble across in production.  Omg i have searched for this today,how this code works? I have added it into the code for testing but i can't figure it out how it works internally... :)  6,87322 gold badges4848 silver badges7272 bronze badges  2  This method shouldn't be used since the implementation is not type safe! Example: Map<Integer, String> map1 = mapOf(1, "value1", "key", 2, 2L);  Based on solution, presented by @Dakusan (the class defining to extend the HashMap), I did it this way:  .. and using it this way:  (Not sure if there is any disadvantages in that way (I am not a java developer, just has to do some task in java), but it works and seems to me comfortable.)  Another approach may be writing special function to extract all elements values from one string by regular-expression:  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  