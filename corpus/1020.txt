 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  Description:  My program crash sometimes in , I write a minimal program to reproduce this situation, but everything is just alright. Here is the minimal example:  Here is the GDB stack info:  0 0x00007f24244d9602 in article_cmp (cand_article_1=0x7f23fd297010, cand_article_2=0x4015) at src/recom_frame_worker.h:47  1 0x00007f24244fc41b in std::__unguarded_partition<__gnu_cxx::__normal_iterator > >, cand_article*, bool ()(cand_article, cand_article*)> (__first=, __last=, __pivot=@0x7f230412b350: 0x7f23fd297010, __comp=0x7f24244d95e1 ) at /usr/include/c++/4.8.3/bits/stl_algo.h:2266  2 0x00007f24244f829c in std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator > >, bool ()(cand_article, cand_article*)> (__first=, __last=, __comp=0x7f24244d95e1 ) at /usr/include/c++/4.8.3/bits/stl_algo.h:2296  3 0x00007f24244f1d88 in std::__introsort_loop<__gnu_cxx::__normal_iterator > >, long, bool ()(cand_article, cand_article*)> (__first=, __last=, __depth_limit=18, __comp=0x7f24244d95e1 ) at /usr/include/c++/4.8.3/bits/stl_algo.h:2337  4 0x00007f24244ed6e5 in std::sort<__gnu_cxx::__normal_iterator > >, bool ()(cand_article, cand_article*)> ( __first=, __last=, __comp=0x7f24244d95e1 ) at /usr/include/c++/4.8.3/bits/stl_algo.h:5489  is called in and article_result is a . is a struct. Here is the definition of :  Here is a piece of code where the crash happens:  Question:  I don't know how to handle this kind of , cause is a kernel space address? Any suggestions on how to fix this kind of bug? sorry, I can't reproduce this situation with a minimal program. And this happened in a , so you don't need to think about situation.  0x4015 is not a kernel address, but it might be a damaged pointer, or the result of dereferencing a member in a NULL pointer. However, your function doesn't seem to have anything to do with the other code you posted, so what's going on ? Do you have any code people can compile and run that also crashes ?  and tell me that you're not familiar with C++. Your error suggests a memory corruption, which is indeed not easy to reproduce in a simple program. But the style of C++ you're inadvertently using does lead easily to memory corruptions.  @CharlesLiuChina: Not easy to explain in a comment. Three main things: Memory corruption is best avoided by using objects instead of pointers to objects, by using smart pointers if you still have to use objects, and by using RAII.  2 Answers 2  The rule is "if crashes, you have an invalid comparison function". Your comparison function is:  This is not a strict weak ordering. In particular, if the display times are equal it returns , which means that if you swap the arguments it will still return ... and that is not allowed. You need:  The reason your simplified example works (congratulations for at least trying to simplify), is that you simplified the comparison function so it is valid. If the return statement was , and you used a smaller range of values, it too would probably crash.  Incidentally, a much more natural C++ declaration of your example structure would look like:  27.5k33 gold badges4646 silver badges8484 bronze badges  1  Thanks, we have modified the code, and watch for one day. If the crash doesn't happen, I'll accept your answer. Thank you so much. And also metioned . ^_^  Your minimal program is making memory leaks. Because it just removes all the items from the list but did not release the memory used by them. In the case your items are big enough, your program might get crashed after eating up all the memory. That's why your minimal program is still okay, because the items there are very small.  if after changing this, your program is still crashing, I can think of another issue. That is if your program using any other lib which is complied stl in release mode and the other part of your program using stl in debug mode. This might crash your app as well. The way to check is try compiling your app in both release and debug mode then run them 2 and see. Hope this will help you solve the problem  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  