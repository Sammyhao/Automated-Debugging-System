 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  The program's purpose is to get the input from files in directory and make binary tree. The condition is given input is integer ranging from 1 to 999. If program read -1 then it skips that position of the node and move next to it.  input  I hope you get it by now. So, to make that I made program while measure the whole length and width of array by Fill it with zero by , and change the place where I need to by .  And It seems work fine by logic, except it doesn't work on compiled exe file.  Program stops without getting out of the loop, so I'm guessing is runtime error. But I can't know what is causing it because the debugger prints out without any problem.  The program I'm using is VSCode and compiler is g++. Hope someone help me to find what is the problem and why debug works while release version fails. https://ibb.co/4pVKMJH (result of debugger) https://ibb.co/cDd1gvL (result of release)  It could happen that the debugger initialize data to be zero, which for pointers means they will be null-pointers. If you have checks for null-pointers, they will work in the debugger. But outside the debugger these pointers will be indeterminate (read garbage) and the program might believe that they are not null and continue to use these invalid pointers leading to undefined behavior. Use the GCC sanitizers to help find the problems. And review your code to make sure all pointers are initialized and checked properly.  As an example: The default constructor doesn't initialize the and pointers. Will you ever default-construct a object? And the class breaks the rules of three, five and zero. That could be an issue as well.  And why ? Why not plain and use the pointer-to operator (as in ) when a pointer to it is needed? Or pass it by reference instead. The less pointers your code have, the more robust it will be, with less possible causes or errors.  "Here is my whole code." -- please don't. You should boil your problem down to a minimal reproducible example. Remove code until you cannot remove any more without the problem disappearing (or being replaced by a different problem). This is more challenging when undefined behavior is involved (a reasonable guess in this case), but at least put in the effort. Keep in mind that the minimal reproducible example does not need to preserve your intended functionality; it needs only demonstrate that the functionality is different between debug and release modes. (Also, since you started your question with code, you might want to review How to Ask.)  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  