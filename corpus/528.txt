 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I don't understand for potential cyclic graph traversals, why for is there a connection between source and destination node in the graph:  i) DFS, if a node is visited, we return false  ii) BFS, if a node is visited, we continue (in the loop)  Simulate either algo on a piece of paper using various graphs. In particular, use graphs with loops, not just simple trees.  When I draw it out, it seems to be for DFS, we should be using continue as well. Because the graph can be cyclic, potentially, we may be choosing a node we already searched first on the stack but that doesn't mean we should return false, it should just mean we ignore that path.  Well, do whatever works for you then! Apart from that, it's hard to reason code I can't see. Since you obviously didn't write the code, include a source attribution. That could also enable you to find updates/errata that might reveal important info. Please, as a new user, also take the tour and read How to Ask.  I've edited my body with code. Do you see where my question is, for DFS, we return false if the Set has the current node, but for BFS, we simply continue (to skip the iteration).  1 Answer 1  pop a current node off the stack, which gives you A  it's not the destination and wasn't visited, so you add it to the list of visited nodes  you now add the neighbours to the stack, which are A and B  next iteration, you pop another current node off the stack, which gives you A again  it was already visited, so you return false, even though a path exists  In short, your algorithm is faulty. Note that this doesn't even require the special case of an edge looping in on itself. All it takes is a loop that is evaluated before reaching the target. Also, if by chance the neighbor B was checked first, you would have gotten a correct result.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  