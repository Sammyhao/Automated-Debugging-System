 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I am trying to understand how is iterating through a hashtable implemented. I just cannot imagine it. I am particularly interested in the speed of such iteration. For example:  Is this an operation?  I tried to dig in the source code, but could not find the proper definition.  1 Answer 1  Some implementations of hash tables also maintain a linked list of all entries to allow fast iteration (a so-called "linked hash-map").  When they don't, the only way is to iterate over all buckets of the hash table, while also iterating over the elements in each bucket.  The speed of this operation depends on the fill state of the table. When it's very low, a lot of empty buckets need to be iterated, which wastes time. When the table is filled well, and one or more elements are in each bucket, it's almost like iterating a linked list. On a perfect hash map where each bucket contains exactly one element, it's like iterating an array.  Your loop is equivalent to the STL algorithm . That algorithm is linear in the number of elements being visited. Furthermore, the container has at least a forward iterator, and all operations on such iterators are at most amortized constant. This means that a loop over an entire hash table also has linear time complexity (and not just linear size complexity).  That requirement on iterators is IMO unfortunate. It means that technically if you write an "successive powers iterator" that returns some BigNum type, doubled each time you increment the iterator, and pass it to a standard algorithm, then you have undefined behavior. Not just slower-than-expected, UB. If the complexity guarantees of the algorithms were expressed in terms of the number of iterator ops as well as the number of predicate ops/copies/whatever, then behavior could be defined. But they aren't, they require amortized constant iterator ops.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  