 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  In Kotlin, are data structures such as stack, queue, heap, tree, etc. supported through standard library?  As a person mostly familiar with Python but didn't use Java before jumping into Kotlin, this question came to my mind.  For example, if one wants to use Kotlin for competitive programming, or if one doesn't want to reinvent the wheel implementing the common data structures, are these supported through the standard library? Or are they not supported due to some design reason of Kotlin? At least I wasn't able to find these in the documentation. Then if one is using Kotlin on JVM, do people usually use the implementations from Java's library?  2 Answers 2  Kotlin mostly reuses Java's Collection API in this case, so you can utilize it freely. Collection API has 4 major interfaces:  Queue - a collection designed for holding elements prior to processing. You can utilize it's FIFO interface. Also it is extended with Deque interface which supports elements' insertion and removal at both ends.  Most of the needs can be satisfied with this interfaces' implementations.  Such as as a classic implementation in terms of Doubly Linked List data structure; also it implements . implements interface using array internally; it has much faster elements access due to arrays' indexed access efficiency nature (except of the case when you are accessing either first or last elements, because than it's identical), but insertions can really cost you on insertions not in the end or on insertions when the capacity of the internal array is exceeded, because it then should get reinitialized and refilled, which is a hit for both time and space. Java's internal is internally relatively fast though.  Stack and Queue both can be also fulfilled with , which is, again, an array-backed implementation, but in this case of .  uses Red-Black tree algorithm internally; uses internally is you need single elements rather than associations.  For hashtable-based implementations you can use for associations and for sole elements respectively (same story with reuse as for tree-based implementations).  For all the other things (thread-safe too - designed for concurrency or simple locking-applying decorators) you can search for an appropriate implementations of these interfaces actually - the standard library is big enough.  Thanks for the reply. So does normally one look for specific data structure implementation from the Java's standard library, unless it's not stated in the Kotlin's collection API?  Kotlin's collection API is actually just a restate of Java's one. More specifically - type alias: . But it would be more sane to use Kotlin's API in this case because it integrates better with all the other Kotlin code as well as you can actually enjoy Kotlin's immutable collection interfaces level of abstraction.  Good overview of the library (though I've always seen the interface (superinterface of , , and ) given as one of its most fundamental parts, and as less important). Also worth mentioning that Kotlin treats those interfaces as read-only, and adds subinterfaces.  @gidds immutable and mutable interfaces are aforementioned in the previous comment  Adding to the above answer, Java's implementation of Heap is PriorityQueue, passing a comparator appropriately, and you can use it in Kotlin no problem.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  