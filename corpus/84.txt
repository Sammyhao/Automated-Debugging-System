 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  What is the best way to debug an array so that you can see what values are being stored and in what keys in the array they are being stored at? Also how do you make it so that it's easier to look at visually so that you don't have to keep looking through the array for the key and it's value in the one line function?  EDIT:  I now realize that is not the only solution to debugging arrays. So if you have alternate solutions that would be lovely as well to learn more about debugging.  I'll just advise against using (and promoting) the buggy and outdated Krumo. It hasn't seen updates in 5+ years, does not show private members, in some cases even alters displayed data (!) and is buggy all around. Disclaimer: I am the author of Kint, I released it as a superior replacement for Krumo.  @Raveren how would I implement Kint into a MVC such as CodeIgniter? Is there a way that I can load it in as just a class so that it can be a library?  It depends, I don't use CodeIgniter, but the universal way is to add somewhere in the bootstrap process.  11 Answers 11  Every PHP developer should have a function for this. My function is below:  To nicely print data, just call . If you want more detail, you could use this function:  8,30611 gold badge2424 silver badges3131 bronze badges  7  2  you need the TRUE in the second paramater of print_r because it outputs it as a string, if you don't then the won't take effect if you don't include it.  @Elias you are correct that if you pass as the second param, returns the output rather than printing it. But this code is working because lines are separate. <=== in this case, you do need the second param.  Yes, the first call prints the pre tag first, so the next 's output is shown well in the browser, and the other echo closes the pre tag.  Everyone suggests which is in core and works really well. But when it comes to view a large array, drives me nuts narrowing down the output.  Give a try to krumo. It nicely prints the array with visual formatting, click-expand and it also gives you the exact array key call that you can simply copy and paste.  Itroubs mentioned Kint as a better alternative to Krumo. (Thanks ITroubs!)  4,57722 gold badges2727 silver badges4848 bronze badges  11  Thanks @ITroubs. Going to give it a try right now (honestly I thought Krumo has no competitors :) )  I think one of my friends uses something similar if not this in CakePHP, looked nice, but didn't know if it was just something built into Cake.  i use kint with a little modification that moves al kint output to the top of the page (because sometimes there was not enough place to view the output)  Krumo and kint look good. One thing I'm not sure on, though, is if they will show private class properties. I know the built-in functions can show them, but other methods might not be able to show them.  @ITroubs I may have to look into using kint, then. I looked at it briefly and it says that it needs zero configuration, which it would definitely have over krumo.  Quick solution: Open the source code of the page, and you'll see 's output in several lines and perfectly indented.  or this. But this sometimes suck in very big pages where you already have footer, header etc. ;)  print_r is not one lined (it uses as new line, not ). Add a around it to show the multiple lines.  uses as its line delimiter. Use tags or view the page's source code to make it look right. (on Windows, Linux works with )  I personally, never liked all this fancy stuff, i use because it's not overwhelming and it gives enough information.  Here is mine:  This if statement is to ensure that other people don't see what you've printed. There is a good add-on for Mozila-Firefox and Google Chrome called "user agent switcher", where you can create your custom user agents. So I create a user agent called "Debug", and when I'm working, I change the user agent.  If I use default user agent nothing will happen and the page wont , only you and people who also change the user agent to "Debug" will see the printed variable. This is helpful if you want to debug a problem in a production environment, and you don't want the page to and it is also good if other people are also working on the project and you don't want to interrupt them by killing the page.  Then I echo out the current File and Line, this is helpful when you work in a framework or CMS or any other big project with thousands of files and folders, and while debugging, if you might forget where you've typed or and you need to remember where you've been and which variables you have printed.  I use the NetBeans IDE for PHP development, I have a macro set up so when you select a variable and use it, it will paste this debugging tool to the text editor and put the selection inside a function. If you also use NetBeans, you can use this macro:  To be honest, I'm surprised that (print human-readable). There are three native functions which each have their advantages and disadvantages in printing data to a document. As mentioned elsewhere on the page, wrapping your output in tags will be very beneficial in respecting newlines and tabbing when printing to an html document.  The truth is that ALL php developers, from newbie to hobbyist to professional to grand wizard level 999, need to have the following techniques in their toolbox.  var_export() is the format that I use most often. This function wraps strings in single quotes. This is important in identifying trailing whitespace characters and differentiating numeric types versus string types. To maintain the integrity of the output data and permit instant portability of the data into a runnable context, single quotes and backslashes are escaped -- don't let this trip you up.  print_r() is probably my least-used and the least-informative function when data needs to be inspect. It does not wrap strings in any kind of delimiting character so you will not be able to eyeball invisible characters. It will not escape backslashes, single quotes, or double quotes. It wraps keys in square braces which may cause confusion if your keys contain square braces originally.  var_dump() is uniquely powerful in that it expresses data types AND the byte count for strings. This is hands-down the best tool when there is a risk that you might have unexpected multibyte characters interfering with the success/stability of your script.  Depending on your php version and which function you use, you may see differing values with same input data. Pay careful attention to float values.  debug_zval_dump() very much resembles the output of , but also includes a . This native function is not likely to provide any additional benefit relating to "debugging an array".  There are also non-native tools which may be of interest (most of which I've never bothered to use). If you are using a framework, Laravel for instance, offers (dump and die) as a diagnostic helper method. Some devs love the collapsed/expandable styling of this tool, but other devs loudly voice their annoyance at the tedious clicking that is necessary to expose nested levels of data.  As a sideways approach to printing iterable data, you could entertain the idea of echoing a json-encoded string with the JSON_PRETTY_PRINT. This may reveal some things that could cause trouble like multibyte and whitespace characters, but don't forget that this is literally "encoding" the data. In other words, it is converting data from one form to another and it will mutate certain occurrences in the process. Like , a json encoded string is an excellent form to maintain data integrity when it needs to be tranferred from one place to another (like from your project to your Stack Overflow question!).  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  