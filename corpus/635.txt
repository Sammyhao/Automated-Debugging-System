 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  How to convert an type to a or a in Dart, so the variables become key/value pairs?  5 Answers 5  Based on my experience, dart does not provide that kind of system yet. So, basically we create function like that manually convert the object to a key-value pair of map.  For example:  So, later when you have a object, you just can call .  he is using dynamic because value might be a string or integer or boolean. declaring dynamic type will assign the type of variable during the run time  @OunknownO - Basically you can also write method as a getter. In that case, you would say  This is a much easier and error-prone-free approach, (And if you are already using these classes as DTO objects that need to be serialized this is a double win).  Add the following 3 dependenciess in your pubsec.yaml  In the class that you want to get the Map for do the following.  That's it, you then just have to run the following command in your terminal so flutter can generate the "toMap()" method for you.  Then use it like such.  Ez. This is a much better approach especially if you have complex objects with multiple objects inside. Just make sure that each nested object contains these changes as well (JsonSerializable annotation, the 'part 'class.g.dart'' , and the 2 methods)  NOTE: that if property changes are made to the classes, just run this command again.  is this method will refer the changes to other files also? eg: i change the file here (converting to map, change the value, converting it back to class), would that affect if i cal this class elsewhere?  With dynamic in Map<String, dynamic> we can have the values of the map of any type. In the example above, it is String.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  