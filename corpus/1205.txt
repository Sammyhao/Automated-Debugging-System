 Stack Data Structure (Introduction and Program)  Stack is a linear data structure that follows a particular order in which the operations are performed. The order may be LIFO(Last In First Out) or FILO(First In Last Out).  Mainly the following three basic operations are performed in the stack:  Push: Adds an item in the stack. If the stack is full, then it is said to be an Overflow condition.  Pop: Removes an item from the stack. The items are popped in the reversed order in which they are pushed. If the stack is empty, then it is said to be an Underflow condition.  Peek or Top: Returns the top element of the stack.  isEmpty: Returns true if the stack is empty, else false.  How to understand a stack practically? There are many real-life examples of a stack. Consider the simple example of plates stacked over one another in a canteen. The plate which is at the top is the first one to be removed, i.e. the plate which has been placed at the bottommost position remains in the stack for the longest period of time. So, it can be simply seen to follow the LIFO/FILO order.  Time Complexities of operations on stack:  push(), pop(), isEmpty() and peek() all take O(1) time. We do not run any loop in any of these operations.  Backtracking is one of the algorithm designing techniques. Some examples of backtracking are the Knight-Tour problem, N-Queen problem, find your way through a maze, and game-like chess or checkers in all these problems we dive into someway if that way is not efficient we come back to the previous state and go into some another path. To get back from a current state we need to store the previous state for that purpose we need a stack.  In Memory management, any modern computer uses a stack as the primary management for a running purpose. Each program that is running in a computer system has its own memory allocations  String reversal is also another application of stack. Here one by one each character gets inserted into the stack. So the first character of the string is on the bottom of the stack and the last element of a string is on the top of the stack. After Performing the pop operations on the stack we get a string in reverse order.  Implementation: There are two ways to implement a stack:  C++  C  Java  Python  C#  Output :  Pros: Easy to implement. Memory is saved as pointers are not involved. Cons: It is not dynamic. It doesnâ€™t grow and shrink depending on needs at runtime. Implementing Stack using Linked List:  C++  C  Java  Python  C#  Output:  Pros: The linked list implementation of a stack can grow and shrink according to the needs at runtime. Cons: Requires extra memory due to involvement of pointers.  https://youtu.be/vZEuSFXSMDI We will cover the implementation of applications of the stack in separate posts.  Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  