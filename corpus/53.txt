 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I'm designing a dynamic buffer for outgoing messages. The data structure takes the form of a queue of nodes that have a Byte Array buffer as a member. Unfortunately in VBA, Arrays cannot be public members of a class.  For example, this is a no-no and will not compile:  You will get the following error: "Constants, fixed-length strings, arrays, user-defined types and Declare statements not allowed as Public members of object modules"  Well, that's fine, I'll just make it a private member with public Property accessors...  ...and then a few tests in a module to make sure it works:  Test #1 works fine, but Test #2 breaks, is highlighted, and the error message is "Wrong number of arguments or invalid property assignment"  Test #2 now works! GSerg points out that in order to call the correctly and also refer to a specific index in the buffer, TWO sets of parenthesis are necessary:  Test #3 fails - the original value of 3 is printed to the Immediate window. GSerg pointed out in his comment that the only returns a copy and not the actual class member array, so modifications are lost.  How can this third issue be resolved make the class member array work as expected?  (I should clarify that the general question is "VBA doesn't allow arrays to be public members of classes. How can I get around this to have an array member of a class that behaves as if it was for all practical purposes including: #1 assigning the array, #2 getting values from the array, #3 assigning values in the array and #4 using the array directly in a call to (#3 and #4 are nearly equivalent)?)"  5,70544 gold badges2626 silver badges5555 bronze badges  8  I ran accross this issue while building a data structure to buffer outgoing messages for some networking code. I was eventually able to resolve it, but since I didn't find the question on SO already, I figured I'd add it. If anyone knows the answer feel free to add it! If someone else gets it before I am able to post the answer, I'll accept.  If you actually meant to copy the array each time, then you forgot the parentheses, . Otherwise you might want to have a look e.g. here.  @GSerg That's the solution I realized - I could do something like changing the accessor to if all I wanted to do was access individual items in the array, but in my case I need to use the buffer in a statement, so that wouldn't work.  @GSerg I've actually been playing around with creating my own class using and to get around the fact that VBA copies arrays for assignments instead of doing it by reference. Do you know if there is a way of using Variants to pass around a reference of the same array in memory? (the and method leaks if the user clicks the Stop button in the debugger :'( so it's not my first choice for a solution)  You can construct an array descriptor over existing (other array's) data. Or you can keep the accessor pattern, just add another property that would return the pointer (varptr) to the first member of the array, which you then can pass to .  3 Answers 3  So it turns out I needed a little help from OleAut32.dll, specifically the 'VariantCopy' function. This function faithfully makes an exact copy of one Variant to another, including when it is ByRef!  I know it is an old post, but thought I'd post it anyway.  Below is a code I used to add an array of points to a class, I used a subclass to define the individual points, it sounds your challenge is similar:  Mainclass tCurve  subclass cCurvePoint  This will create a tCurve with 1500 tCurve.Curvepoints().dY (for example)  The trick is to get the index process correct in the main class !  Thanks for this! The accessor functions you have for getting and setting values definitely fill requirements #2 and #3, but unfortunately it doesn't satisfy requirements #1 (be able to set the whole buffer directly from an existing one) and #4 (be able to get a direct reference to the buffer so I can CopyMemory())  Not the most elegant solution, but modeling from the code you provided...  In clsTest:  And in mdlMain:  I added code to pass the class array to another array to prove accessibility.  Even though VBA won't allow us to pass arrays as properties, we can still use Functions to pick up where properties fall short.  Sorry I've gone so long without replying! The problem with this method is that creates a copy of the entire array. This might not seem like a big issue, but suppose we're talking about a 2GB array... that would suck :(  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  