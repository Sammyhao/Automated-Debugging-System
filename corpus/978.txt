 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I'm thinking about building a tool to help me visualise the generated LLVM-IR code for each instruction/function on my original source file. Something like this but for LLVM-IR.  The steps to build such tool so far seem to be:  Start by with LLVM-IR AST builder.  Parse generated IR code.  On caret position get AST element.  Read the element scope, line, column and file and signal it on the original source file.  Is this the correct way to approach it? Am I trivialising it too much?  3,46177 gold badges3232 silver badges4646 bronze badges  1  Looks quite correct. The thing you want to achieve is rather simple with llvm, but will require a lot of UI code  1 Answer 1  I think your approach is quite correct. The UI part will probably be quite long to implement so I'll focus on the llvm part.  Let's say you start from a input file containing your LLVM-IR.  Step 1 process module: Read file content to a string. Then Build a module from it, and process it to get the debug info:  Step 2 iterate on instructions: Once done with that, you can simply iterate on function and blocks and instructions:  4,39911 gold badge2828 silver badges3838 bronze badges  4  What is the *context supposed to be? I found examples where getGlobalContext() is used but I don't have it defined on my "llvm/IR/LLVMContext.h".  As @Regis Portalez said the for code is a bit longer. To iterate over each collection I figure out to do it like this: for (auto curFref = m->getFunctionList().begin(), endFref = module->getFunctionList().end(); curFref != endFref; ++curFref) {...}  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  