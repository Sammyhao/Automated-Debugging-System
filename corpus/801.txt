 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  5,11499 gold badges3232 silver badges5151 bronze badges  3  4  Maps are inherently not ordered (except the are iterated insertion order, which requires sorting and then [re-]adding).  14 Answers 14  A Map object iterates its elements in insertion order.  You could do it this way:  Using , remember that the array is sorted according to each character's Unicode code point value, according to the string conversion of each element. So will be sorted correctly.  If the map keys are numbers, you will get invalid results with numbers like being put after in sorted map. Code that works with numbers:  Short answer  If you're expecting strings: As normal for you need to return -1 if lower and 0 if equal; for strings, the recommended way is using which does this correctly and automatically handles awkward characters like where the position varies by user locale.  So here's a simple way to sort a map by string keys:  ...and by string values:  These are type-safe in that they won't throw an error if they hit a non-string key or value. The at the start forces to be a string (and is good for readability), and itself forces its argument to be a string without hitting an error.  In detail with examples  tldr: is redundant, just is fine; and a lazy without passing a sort function risks weird edge case bugs caused by string coercion.  The in (suggested in many answers) is redundant, probably adding an extra iteration of the map unless the JS engine optimises that away for you.  In the simple test case, you can do what the question asks for with:  ...which, if the keys are all strings, compares squashed and coerced comma-joined key-value strings like and , returning a new Map with the new insertion order:  Note: if you see only in SO's console output, look in your real browser console  HOWEVER, it's not a good practice to rely on coercion and stringification like this. You can get surprises like:  Bugs like this are really hard to debug - don't risk it!  If you want to sort on keys or values, it's best to access them explicitly with and in the sort function, like above; or with array destructuring in the function arguments:  And if you need a different comparison than alphabetical order of strings, don't forget to always make sure you return and for before and after, not or as with raw because that is treated as equals.  28.9k1818 gold badges9393 silver badges115115 bronze badges  1  20  What an answer, we gotta fix S.O. discovery mechanisms. Something this good shouldn't be lost down here.  The idea is to extract the keys of your map into an array. Sort this array. Then iterate over this sorted array, get its value pair from the unsorted map and put them into a new map. The new map will be in sorted order. The code below is it's implementation:  Unfortunately, not really implemented in ES6. You have this feature with OrderedMap.sort() from ImmutableJS or _.sortBy() from Lodash.  One way is to get the entries array, sort it, and then create a new Map with the sorted array:  But if you don't want to create a new object, but to work on the same one, you can do something like this:  The snippet below sorts given map by its keys and maps the keys to key-value objects again. I used localeCompare function since my map was string->string object map.  However, the question has keys that are not usual ones, A clear & general example with explanation, is below that provides some more clarity:  I would suggest to use a custom iterator for your map object to achieve a sorted access, like so:  Using an iterator has the advantage of that it has only to be declared once. After adding/deleting entries in the map, a new for-loop over the map would automatically reflect this changes using an iterator. Sorted copies as shown in most of the above answers would not as they only reflect the map's state at exactly one point in time.  Here's the complete working example using your initial situation.  Perhaps a more realistic example about not sorting a Map object but preparing the sorting up front before doing the Map. The syntax gets actually pretty compact if you do it like this. You can apply the sorting before the map function like this, with a sort function before map (Example from a React app I am working on using JSX syntax)  Mark that I here define a sorting function inside using an arrow function that returns -1 if it is smaller and 0 otherwise sorted on a property of the Javascript objects in the array I get from an API.  As far as I see it's currently not possible to sort a Map properly.  The other solutions where the Map is converted into an array and sorted this way have the following bug:  The sorting creates a new object and all other pointers to the unsorted object get broken.  Slight variation - I didn't have spread syntax and I wanted to work on an instead of a .  If the sorted Map is just needed in an angular template it can be easily sorted using the KeyValuePipe which has a default sort included:  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  