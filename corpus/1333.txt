 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  My professor provided me with a file called CursorList.cpp that implements a "Cursor Linked List". The problem is - I have no idea what that even is!  25.3k3838 gold badges117117 silver badges173173 bronze badges  1  yuval, you should probably start by seeing what interface the file has exposed. That is, read it, look at what public methods there are, how to use them, etc. From the name, it seems pretty certain that it implements a linked-list data structure, i.e. one that lets you do inserts, deletes, traversal, that sort of thing. Test it out.  4 Answers 4  A CursorList is an array version of a Linked List. Essentially you have an array of list nodes but instead of each node containing a pointer to the next item in the linked list, each node element in the array contains the index for the next node element. So for example if we wanted to store in a linked list we would have . Inserting isn't a problem as we just change the last pointer to point to the inserted node and have the inserted node point to . Deleting is the same, we just readjust pointers. However having to always dynamically allocate (using malloc or new) memory for a new node could be problematic.  If we were to store in a CursorList, we first declare the max size of the array, then fill it. So we say where we declare a listNode object as follows:  so after filling the array with listNode objects we will have something that looks like this:  now if we want to remove 5 all we have to do is update the index. So we are left with this:  A question arises, how do we know what to set 5's index to? Well that's where the Freelist (mentioned in @Justin Ethier's repsonse) comes in. The Freelist contains the indices that are still free in the array. So upon creating the CursorList, the Freelist has 0-9. As listNode objects are assigned to elements of the array, the Freelist removes those indices. When a number is removed (such as the example with 5 above), the index is added back to the Freelist. If we want to add a number to the CursorList we just update the indices for the appropriate elements.  use arrays of objects instead  start with a Freelist  allocate space from Freelist when needed  So basically a linked list that is implemented without using pointers. Maybe this implementation is supposed to be "easier" to understand?  126k4949 gold badges221221 silver badges278278 bronze badges  1  Still not very clear on what they are. Could I extend my question then and ask what a list is, used in that context? thanks!  My guess would be that it is a linked list that additionally keeps a pointer to a "current" element, for example for iterating over the list.  If you want to be sure what exactly your professor means by it, look at the .cpp file and find out what is implemented there.  207k4949 gold badges265265 silver badges359359 bronze badges  1  That agrees with my recollection of this ADT^H^H^H object type -- list + a current position -- back in my data structures class (80s, alas), before the word was "stolen" to mean (only) and SQL result set buffer  In the cursor implementation, we build the storage pool ourselves, storing our unused nodes in a linked list stored in an array.  In C and C++, the storage pool is managed by a set of library functions provided by the language. At the beginning of execution, a suitably large pool of storage is obtained from the operating system. When a program requests a new node, storage is obtained from the pool by a language library function. If insufficient storage is available in the pool, the library requests additional pool space from the operating system. When storage is released by a program, a language library function returns it to the storage pool. The cursor implementation will normally obtain a fixed amount of storage from the system as an array, and provide functions similar to new and delete for an application program to use  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  