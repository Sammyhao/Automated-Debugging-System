 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I am trying to insert values in a binary search tree using recursion but when I run this using inorder traversal, I get an output of None. I have tried to look at other languages implementing this and I just tried copying it but it does not work. I am passing the root of the tree to the insert function and I was expecting it to traverse either left or right if it is not empty. Can someone please tell me what is wrong with this. I tried making bst.root to bst.get_root() and still it produces the same result.  2 Answers 2  The problem is that a may be and you're calling a function with it, and then assigning a node to and nothing gets saved.  Let's have a look:  In order to fix it we need to "go one level up" and if is then do the assignment to (root is a bad name by the way, so I'm using "node" instead).  One way to do it would be:  Two comments:  Now there's a cleaner interface, see how insert calls look now:  insert is an action that "sets" a value, and as such - it does not have to return anything (it can though, if you really want it to).  51.2k1111 gold badges8181 silver badges120120 bronze badges  3  thanks for the explanation. What I don't understand though is that in my code, I am passing bst.root in the insert() which is the root of the tree. If I am not mistaken, python passes by reference in a function so with if root is None: , root refers to the root of the tree and since it is None at the start, the value inserted should be assigned to root. Now, if I insert a value lower than the root, it should go to the else condition and apply the insert() on root.left and it will go again to root is None and assign the value to root.left, return and assign it to var root.left.  @mike26 by the argument is getting resolved to so when you're making the call it gets resolved to: - you'll be able to see it if you'll run with a debugger. Hope this helps!  Oh I see. So you cant pass something to a function that is None to begin with. I thought I was passing a memory slot for root that contains None. Thanks @alfasin  The problem was that you never assigned the result of insert to your root node. Look at the method insert and how the self.root is assigned the return value of _insert.  EDIT The major problem is that the result of the insert call is not saved into root. If you change your original code as follows it will also work:  3,45622 gold badges3333 silver badges5252 bronze badges  3  Hi @Asterisk , thank you. Can you explain to me though why this works and my code did not? Why does self.root have to be assigned with the insert function? Also, is it possible to do this in just one function?  Sure, the problem is that you do not save the result of insert as your root. If you change your code as folllows: bst = BinaryTree() bst.root = bst.insert(bst.root, 2) bst.root = bst.insert(bst.root, 4) bst.root = bst.insert(bst.root, 3) bst.root = bst.insert(bst.root, 1). It will also work.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  