 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I am trying to find a way to solve the longest path problem for a graph with the following characteristics:  Directed  Weighted (including negative weights)  NOT acyclic, although I am only looking for simple paths.  I have had a look at Boost.Graph for the first time the last two days. It seems very complex and I want to be sure that I can solve my problem with this library before I dig deeper into the documentation just to find out that I actually can't use it.  So can I use Boost.Graph for my problem? Is it maybe even NP-Complete? And even if I could use Boost.Graph, would there be a better alternative based on performance?  1 Answer 1  Here is some code using the boost graph library to find the longest ( most heavily weighted ) path between two vertices in a graph. The graph is checked for cycles which are removed by deleting the back edges in a copy of the graph.  16.3k55 gold badges5454 silver badges8989 bronze badges  13  Thanks, do you know if it can also calculate the path in cyclic-graph but only with positive cycles?  I think that you will need to convert your cyclic graph to a DAG. The exact way to do this depends on your needs. In general, do a depth first search and remove edges that return to a previously found vertex.  Thank you very much, but if I remove the cycles I "damage" my graph and it is not correct anymore  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  