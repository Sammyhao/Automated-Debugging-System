 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I'm reading Cormen et al., Introduction to Algorithms (3rd ed.) (PDF), section 15.4 on optimal binary search trees, but am having some trouble implementing the pseudocode for the function in Python.  Here is the example I'm trying to apply the optimal BST to:  Let us define as the expected cost of searching an optimal binary search tree containing the keys labeled from to . Ultimately, we wish to compute , where is the number of keys (5 in this example). The final recursive formulation is:  which should be implemented by the following pseudocode:  Notice that the pseudocode interchangeably uses 1- and 0-based indexing, whereas Python uses only the latter. As a consequence I'm having trouble implementing the pseudocode. Here is what I have so far:  However, if I run this the weights get computed correctly, but the expected search values remain 'stuck' at their initialized values:  What I expect is that , , and be as follows:  I've been debugging this for a couple of hours by now and am still stuck. Can someone point out what is wrong with the Python code above?  3 Answers 3  It appears to me that you made a mistake in the indices. I couldn't make it work as expected but the following code should give you an indication where I was heading at (there is probably an off by one somewhere):  In the end I used pandas' and objects initialized with custom and to coerce the arrays to have the same indexing as in the pseudocode. After that, the pseudocode can be almost copy-pasted:  which yields the expected results:  I would still be interested in a solution with Numpy arrays, though, as this seems more elegant to me.  Kurt, Thanks for your post! Yours is the only working implementation of this problem I found. I spent mucho tiempo wrestling with the indices. Here is my implementation with numpy arrays.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  