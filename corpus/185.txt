 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I am trying to solve the Word Ladder problem from leetcode. In a nutshell, it asks you to write code that transforms one word into another by replacing one letter at a time, such that each intermediate string is also a word.  I know anyone can solve it easily with BFS. But I think dynamic programming (dp) technique will also work here. So I am trying to solve it with dp. For every sample test cases, it works fine. But this code fails for large input (System judges). .  Still now I am not understanding why dp won't work here?  Can anyone please give me a small input where this fails? You know it is almost impossible to test this code debugging by this large input.  DP solution is highly inefficient for this problem. why do you need to traverse across the whole recursion tree if you only need a shortest path from your source state to destination state  I'd attack this algorithmically first, and worry about the technique, dynamic or otherwise, only then.  Yeah, it is highly inefficient to use dp solution here. But . I didn't get what you are trying to understand me. Isn't it the same path that we would create in BFS for this problem?  BFS is dynamic programming. Your algorithm is broken, and will not always give the correct answer. When you fix it it might be DP as well.  sorry for that comment, I removed it. It is not even possible to apply dynamic programming altogether in this problem because the recursion tree has cycles. There is no point in memoizing states because any cached state can get invalid on the next call  1 Answer 1  It looks like you are trying to memoize a DFS. DFS will run into trouble on cycles, and also means that you have to explore a possibly large search space before you consider very short solutions.  Incidentally I would not suggest using BFS for this problem. Instead I would suggest using A* search.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  