 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  Why would you expect that the start and the end pointer of a linked list stay the same after sorting the linked list? If you're looking for an in place sort, use a , the and iterators will stay the same even after sorting.  @πάνταῥεῖ can you please explain why my first output only printing 2 numbers? I just don't get it.  changes the values of and , they aren't the same as you saved before., you're outputting only the range of sorted numbers between these two. That's why.  1 Answer 1  is an iterator to the element in the list. is an iterator to the end of the list. After sorting is an iterator to the element and is an iterator to the end of the list. The elements starting from after sorting are:  std::sort requires random access iterators and so cannot be used with list . This function also differs from std::sort in that it does not require the element type of the list to be swappable, preserves the values of all iterators, and performs a stable sort.  With iterators get invalidated. Thats not the case with . Sloppy speaking, iterators into s are more stable than others generally. In your example and still point to the same elements. After sorting, the element that was at the first position is no longer at the first position. It is at the second but last position and still points to the lists .  Consider that a is a linked list, to change order it isnt necessary to modify or move elements to other postion in memory, only links have to be updated.  79.3k99 gold badges7171 silver badges140140 bronze badges  7  After sort values : and and are now the for loop looks like then why are are printing as output? i am sorry to bother but unable to grasp it thanks for the help  @heeat because you hold iterators to and to the end of the list. After sorting the two iterator still point to and the end of the list  @heeat what else did you expect and why? I can only reiterate what I already said: After sorting the iterators still refer to the same elements in the list.  Got it ! Sorry I was missing the obvious , confused because I was debugging and after sorting instead of and which I was using in the . if I use and instead of and inside the I will get a different result right? Thanks for your help!  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  