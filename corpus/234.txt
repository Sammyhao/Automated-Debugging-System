 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  There are n trees in a row and you have been given the height of these trees. On each tree there is one monkey and each monkey have (sic) particular power to climb the tree. Power of each monkey can be calculated as π(x). Where x is the total number of maximum consecutive trees (I.e. to the left of the current tree including itself also) which has height less than or equal to the height of the current tree. Print the maximum power that can be obtained among n monkeys. Here π(x) can be stated as: - π(x)=(x)∗(x−1)∗(x−2)................1.  You have to answer t independent test cases.  Output the answer modulo 10^9+7.  [...]  Sample input: -  Output: -  EXPLANATION:-  For the first tree smaller or equal to itself to the left is only none. So, for the first monkey power will be π(1) =1. For the second tree smaller or equal to its left is none so π(1)=1.For the third tree the tree which is smaller or equal to its left is π(3)=6.And similarly for the rest of the trees.  My Code:  CodeChef is giving me a runtime error. Can anyone tell me why?  Could you explain how your algorithm (should) work? I'd use a binary tree to find the number of smaller elements seen so far and insert the number, then get factorial. Also, do you always get a runtime error (and which one) or just on particular inputs?  1 Answer 1  The prime reason you got the runtime error was due to the recursion. Have a look at the constraints on the number of elements as provided in the question: .  Therefore, for relatively larger values of , the function consumed more than allowed memory and caused the system stack to overflow.  Remember, always avoid recursion if you can solve the problems using loops.  I replaced the recursive call with a loop in the function and I got .  Time Limit Exceeded means, we have successfully avoided the runtime error, but now, we need to work on optimising the algorithm further.  Have a look at the following code with correct implementation of modulo arithmatic for large values of :  PS: As the runtime error is avoided, I suggest you to optimise your code further.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  