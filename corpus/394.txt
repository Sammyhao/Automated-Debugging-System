 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I have written below code. However I am not sure if I have inserted my tree correctly. The code compiles sucessfully but I don't get the DFS traversed array in the output. Can someone tell me where I am going wrong ?  The input tree is below but please let me know if I have made the correct calls in the main function ? As my output is coming - [a b c d e f g h i j k]. whereas the correct output should be [a b e f i j c d g k h].  Note - Thanks for the explanation , but I made some edits in the way I constructed the tree in the main function and continued using return this statement and it worked.  @Scheff Good point. I admit to a little binary-tree-focused narrow-mindedness. ;-) Still, I got one "agree" on that comment. So maybe being explicit about it would be helpful. And the tree representation is slightly odd elsewhere, too.  OP insisted in that has to and asked for another way to circumvent the issue. I tried to convince OP that would make more sense than .  Actually, I intuitively expected that would return the the created child which costed me some extra debugging to find the actual bug. :-)  Concerning  the way I have constructed my tree in the main function - is it the right way or there can be more efficient way of doing that  I personally find the code in not that bad as it is.  However, there are often more than one way to Rome.  So, here is just another idea:  A second constructor to construct child nodes explicitly:  which allows to write the tree init. in like this:  17.7k55 gold badges2828 silver badges5050 bronze badges  5  Thanks for the clarification. It works fine now. But my confusion is - the way I have constructed my tree in the main function - is it the right way or there can be more efficient way of doing that . What I want is do not change "return this to return child" and I want to know is there a way we write in main function our tree construction that the code will work with "return this " also .  @islia If you don't then how do you get the pointer to the node created inside ? On the other hand, why ? is something you definitely know beforehand. (Otherwise you couldn't call for a certain node because just returns the node for which was called.)  @islia There are cases where (or ) makes sense to allow chaining of operators or member function calls. (The idiomatic overloading of is well-known example.) I wouldn't consider your as such a case.  I edited my code and changed the way i constructed the tree and also included return this. The code worked correctly.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  