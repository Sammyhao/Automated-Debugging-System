 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  What is the difference between Dictionary and Hashtable. How to decide which one to use?  It seems that this question should be closed as a duplicate, and its answers merged with one of the duplicates.  Although related to java language but this thread is worth reading to know the difference between and . Few differences apply to C# world also.  7 Answers 7  If you are .NET 2.0 or above, you should prefer (and the other generic collections)  A subtle but important difference is that supports multiple reader threads with a single writer thread, while offers no thread safety. If you need thread safety with a generic dictionary, you must implement your own synchronization or (in .NET 4.0) use .  Lets give an example that would explain the difference between hashtable and dictionary.  As a note.....you can enumerate over Hashtable properties, as described here: msdn.microsoft.com/en-us/library/…. You have to use a DictionaryEntry as your variable, which can then provide key and value objects.  Superb answer,Also you can use DictionaryEntry for enumerate over Hashtable.Ex: foreach(DictionaryEntry dnty in objHashTable ){lblDisplay.Text= dnty.Value + " " +dnty.Key}  There is one more important difference between a HashTable and Dictionary. If you use indexers to get a value out of a HashTable, the HashTable will successfully return null for a non-existent item, whereas the Dictionary will throw an error if you try accessing a item using a indexer which does not exist in the Dictionary  Dictionary is typed (so valuetypes don't need boxing), a Hashtable isn't (so valuetypes need boxing). Hashtable has a nicer way of obtaining a value than dictionary IMHO, because it always knows the value is an object. Though if you're using .NET 3.5, it's easy to write an extension method for dictionary to get similar behavior.  If you need multiple values per key, check out my sourcecode of MultiValueDictionary here: multimap in .NET  8,12111 gold badge2626 silver badges2727 bronze badges  5  2  For multiple values per key: in .NET 3.5, you might also consider implementing (which is the multi-map interface). Unfortunately the default concrete implementation is immutable, but it is easy to re-implement (or add to your MultiValueDictionary). There is a simple example of such in MiscUtil (EditableLookup<TKey,TValue>)  Good tip indeed, I had forgotten about that interface. I looked at the implementation in the BCL but it's indeed immutable so pretty much useless for every-day multi-value usage ;). I'll add the interface.  Hmm, there's a problem with ILookup<>: it also implements an Enumerator, which is different from the Dictionary enumerator. When a Linq operator is used on the multivaluedictionary, it can't chose which enumerator to use as it also can use IEnumerable<TKey, IGrouping<TKey, TValue>>, even though ILookup is implemented explicitly... Which makes it harder to use the dictionary as it requires explicit type specfication.  MultiDictionary is also present in PowerCollections: www.wintellect.com/powercollections.aspx  Trying to acess a inexistent key gives runtime error in Dictionary but no problem in hashtable as it returns null instead of error.  e.g.  here no error for key 0 & also for key "ten"(note: t is small)  here error for key 0 & also for key 10 as both are inexistent in dictionary, runtime error, while try to acess.  14.3k2424 gold badges6868 silver badges9393 bronze badges  1  I suppose you should be using to find the item if you are trying to work with a collection outside foreach and for.  The Hashtable class is a specific type of dictionary class that uses an integer value (called a hash) to aid in the storage of its keys. The Hashtable class uses the hash to speed up the searching for a specific key in the collection. Every object in .NET derives from the Object class. This class supports the GetHash method, which returns an integer that uniquely identifies the object. The Hashtable class is a very efficient collection in general. The only issue with the Hashtable class is that it requires a bit of overhead, and for small collections (fewer than ten elements) the overhead can impede performance.  There is Some special difference between two which must be considered:  HashTable: is non-generic collection ,the biggest overhead of this collection is that it does boxing automatically for your values and in order to get your original value you need to perform unboxing , these to decrease your application performance as penalty.  Dictionary: This is generic type of collection where no implicit boxing, so no need to unboxing you will always get your original values which you were stored so it will improve your application performance.  the Second Considerable difference is:  if your were trying to access a value on from hash table on the basis of key that does not exist it will return null.But in the case of Dictionary it will give you KeyNotFoundException.  Not really very ironic... both Hashtable and Dictionary<,> are based on this approach, so it doesn't in any way answer the question of choosing between them.  The real irony is that I was reading the same MCTS book, got really confused as to which one to prefer, posted it here and got the same text i just read in the form of your answer!!! :) Thanks for replying nyways..  The HashTable is the base class that is weakly type; the DictionaryBase abstract class is stronly typed and uses internally a HashTable.  I found a a strange thing about Dictionary, when we add the multiple entries in Dictionary, the order in which the entries are added is maintained. Thus if I apply a foreach on the Dictionary, I will get the records in the same order I have inserted them.  Whereas, this is not true with normal HashTable, as when I add same records in Hashtable the order is not maintained. As far as my knowledge goes, Dictionary is based on Hashtable, if this is true, why my Dictionary maintains the order but HashTable does not?  As to why they behave differently, it's because Generic Dictionary implements a hashtable, but is not based on System.Collections.Hashtable. The Generic Dictionary implementation is based on allocating key-value-pairs from a list. These are then indexed with the hashtable buckets for random access, but when it returns an enumerator, it just walks the list in sequential order - which will be the order of insertion as long as entries are not re-used.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  