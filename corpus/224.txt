 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  So, I decided to look back at some data structures to keep myself sharp ;)  I started to implement a hash table, when I remembered that I needed linked lists for the buckets so that I can avoid hash collisions. So I started my linked list...  I implemented all of the functional methods of my linked list class (add, get, remove, etc) and then I decided that I wanted to try something that I hadn't tried before. Overloading the array index operators so that my linked list indexes can be retrieved or assigned as if the linked list was an array.  I got the retrieval part working no problem:  The get function returns the data of the associated node, not the node itself...the setter should behave where the value supplied gets stored to the data attribute of node at the given index...my vision is that the user will not ever have to touch the ListNode class.  My end goal is that I can have a smart LinkedList that will behave like so:  The getter works fine, but I am having trouble on the setter. Assume the set function with all index error checking and memory allocation is done, as it is. Any help would be appreciated. If it is impossible, then please let me know before I spend more time on it. Thanks.  4,43722 gold badges1919 silver badges2626 bronze badges  1  Since the getter function must implemented as iteration, seems trivial to add the setter. However this interface will be clunky to use, I think. In your example above what is the expected of the collision list? How do I (as a user) know that two items [1,2] are "empty"? How do plan to maintain associativity on removals, sine constant time removal is one of linked lists' main benefits?  @Nawaz const ref also suffices. it makes enough sense to me that it is my default, rather than by value.  @Nawaz passing arguments by const reference is the default convention in the c++ programs and libraries i write. if there's a good reason to deviate from the convention in a specific case, i do so.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  