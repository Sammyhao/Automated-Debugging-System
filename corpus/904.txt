 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  We can use any of these (includes List, ArrayList, Dictionary, Hashtable, Stack, Queue) to hold value or hold reference to other objects as a collection.  3,49799 gold badges3838 silver badges5050 bronze badges  3  2  You can learn all of .Net and C# by asking a series of questions here, but much easier all round would be to buy a good book!  @TimSchmelter This one is already quite bordeline: there is an obvious lack of preliminary research, and the question is too broad. Furthermore, I meant "you can't learn all of .Net and C# by asking a series of questions on SO" because you'll end up asking lots of duplicate, uninteresting, lack-of-research questions  3 Answers 3  Lists  Lists allow duplicate items, can be accessed by index, and support linear traversal.  ArrayList - An array-based list that doesn't support generic types. It does not enforce type safety and should generally be avoided.  List - An array list that supports generic types and enforces type-safety. Since it is non-contiguous, it can grow in size without re-allocating memory for the entire list. This is the more commonly used list collection.  Hashes  Hashes are look-ups in which you give each item in a list a "key" which will be used to retrieve it later. Think of a hash like a table index where you can ask questions like "I'm going to find this object by this string value. Duplicate keys are not allowed.  HashTable - A basic key-value-pair map that functions like an indexed list.  Dictionary - A hashtable that supports generic types and enforces type-safety.  Queues  Queues control how items in a list are accessed. You typically push/pop records from a queue in a particular direction (from either the front or back). Not used for random access in the middle.  Stack - A LIFO (last in, first out) list where you push/pop records on top of each other.  Queue - A FIFO (first in, first out) list where you push records on top and pop them off the bottom.  ArrayList is just for compatibility with older versions of the framework where IList didn't exist  Dictionary is used to store pairs of key/value. You cannot have duplicate keys.  Hashtable is basically a List with no possibility of duplicates (and better performance in some scenarios)  Stack stores objects in order they were added (through ), and when you retrieve an object (through ) it is removed from the stack in a LIFO manner.  15.5k44 gold badges5858 silver badges8585 bronze badges  4  What is the difference between a) cannot have duplicate keys and b) no possibility of duplicates  There is no diference in this case. Both could not store duplicate keys. And besides the performance issue, the Hashtable has not generic implementation.  @Chandraprakash To help you and other people looking for an answer: Hashtable is a loosely typed (non-generic) collection, Dictionary is a generic collection. This means that Hashtable can use both keys and values of any type, Dictionary asks during construction what type of keys and values you are going to use.  List: If you just want a list and don't care about any duplicates, i.e list of people, shopping list, list of things to do in life.  Queues: If you want to simulate a queue for example, in a hospital you have a queue and also priority queue (in emergency departments). The triage would determine who is in critical condition and needs to be treated.  Another example is a shopping queue, first person in line is 'usually' the first one to checkout.  Stacks: Used in your internal memory to push and pop values as you pass them to functions/methods.  Another interesting use is, in video game inventory method, where you can pick up an item (push) onto the stack, and drop an item (pop) off the stack.  Hash/Dictionary: These are usually seen used in database, for look up and index.  Depending on what you want to simulate, I do agree with the others, it's handy to read up on data-structures. A book helps but the internet also has a wealth of information.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  