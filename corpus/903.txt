 ListIterator in Java  Last Updated : 17 Nov, 2020  ListIterator is one of the four java cursors. It is a java iterator which is used to traverse all types of lists including ArrayList, Vector, LinkedList, Stack etc. It is available since Java 1.2. It extends the iterator interface.  Hierarchy of ListIterator  Some Important points about ListIterator  It is useful for list implemented classes.  Available since java 1.2.  It supports bi-directional traversal. i.e both forward and backward direction.  It supports all the four CRUD operations(Create, Read, Update, Delete) operations.  Interesting Fact about ListIterator  There is no current element in ListIterator. Its cursor always lies between the previous and next elements. The previous() will return to the previous elements and the next() will return to the next element. Therefore, for a list of n length, there are n+1 possible cursors.  Declaration:  Where E represents the generic type i.e any parameter of any type/user-defined object.  Syntax to get a list Iterator on a list:  This returns the list iterator of all the elements of the list.  Example:  Java  Output  ListIterator is a bi-directional iterator. For this functionality, it has two kinds of methods:  1. Forward direction iteration  hasNext(): This method returns true when the list has more elements to traverse while traversing in the forward direction  next(): This method returns the next element of the list and advances the position of the cursor.  nextIndex(): This method returns the index of the element that would be returned on calling the next() function.  2. Backward direction iteration  hasPrevious(): This method returns true when the list has more elements to traverse while traversing in the reverse direction  previous(): This method returns the previous element of the list and shifts the cursor one position backwards.  previousIndex(): This method returns the index of the element that would be returned on calling the previous() function.  Example code showing both forward and backward direction iterations using list Iterator:  Java  Output  ArrayList Iterator methods  A. listIterator()  The listIterator() method of java.util.ArrayList class is used to return a list iterator over the elements in this list (in proper sequence). The returned list iterator is fail-fast.  Syntax:  Return Value: This method returns a list iterator over the elements in this list (in proper sequence).  B.) listIterator(int index)  This listIterator(int index) method used to return a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list. The specified index indicates the first element that would be returned by an initial call to next. An initial call to previous would return the element with the specified index minus one. The returned list iterator is fail-fast.  Syntax:  Parameters: This method takes the index of the first element as a parameter to be returned from the list iterator (by a call to next)  Return Value: This method returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list.  Exception: This method throws IndexOutOfBoundsException if the index is out of range (index size()).  Advantages:  It supports all four CRUD (Create, Read, Update, Delete) operations.  It supports Bi-directional traversing i.e both forward and backward direction iteration.  Simple method names which are easy to use.  Limitations:  This iterator is only for list implementation classes.  Not a universal cursor.  It is not applicable for all collection API.  Parallel iteration of elements is not supported by list Iterator.  listiterator does not support the good performance of numerous elements iteration.  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  