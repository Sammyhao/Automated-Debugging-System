 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I'm creating a Tree Structure, whereby each node of that tree structure, contains a linked list of data (numbers). Now, in my head, that means, each of those linked links obviously need to have a head associated with them, so that I can access the data within them and loop through, displaying all the numbers for that TreeNode. The problem is, I've hit a brick wall, and really don't know what step to take from where I am at the moment ( see below ). I need to return a head for each linked list, for each, TreeNode, I'm unsure how.  Below is my code that I have so far for this, at this moment, it adds the Name to the Node, and a number to the list, but adding multiple numbers to the list, I'm unsure what step to next take, and then how to return an item to allow my ( in time ) print function to loop through.  2 Answers 2  Hopefully I've understood your problem correctly...  I would suggest that you add another level of indirection to the list...you could create a List struct that held the head, tail, etc. of the List, and add a List (or pointer to one) instead of ListNode* to the TreeNode struct. That way you could have a and have functions that operate directly on the list returned (this is cleaner in my opinion). This would mean your list implementation would be completely separate from your tree, meaning you could easily use it outside of this project.  The alternative is to encapsulate the List entirely in the TreeNode struct, which is what I think you're trying to do. To add to the list, you probably need a function and other list manipulation functions would be done similarly. They just need a reference or pointer to the TreeNode that provides access to the list.  To do what you're trying to do, you already have access to the if you have a :  You could easily pop this into a function taking a as a parameter. Is this what you're trying to do?  Nope, I can only use C. Sorry, but is there no way I cant do it working off from my current code, I like to try to stick to my first ideas for the solution.  Yeah, I was trying to say that with the part...let me know what is unclear. Pretty much add all the functions that would work on lists to work on s instead, which is effectively your list. It looks like you're using a singly-linked list with a null sentry, right?  Yeah, I will be using a singly linked list, but nope, Ive been working on this for a while now, still no progress, I just cant see where to start  @user1048116 I still think it's way better for the to hold a struct type with all the name, number, and list. That would simplify things drastically. But see if my edit helps you.  i make a basic print function to print tree nodes. i also modified functions prototype to make life easier :)  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  