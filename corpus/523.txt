 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I just started learning C and as a self-learning excercise, I am implementing data structures and algos in C. Right now I am working on a graph and this is the data structure representation of it.  To this graph I added a addVertex function.  This works fine except for three things.  if the newly added vertex is the same as the last vertex in the list, it fails to see it. To prevent this i changed the for loop limiting condition to , but that gives a seg fault.  if i try to free the temporarily allocated pointer, it resets the memory pointer by the pointer and this adds an infinite loop at the end of the vertex list. Is there no way to free the pointer without writing over the memory it points to? Or is it not really needed to free the pointer?  Also would destroying the graph mean destroying every edge and vertices? or is there a better approach?  Also if this data structure for graph is not a good one and there are better implementations, i would appreciate that being pointed out.  - make sure is not NULL before using it. - you didn't provide implementation, so it's hard to say what's happening here. - you print wrong vertex here, should be  Oh my bad I had a . Also I do know it is a keyword in c++ but does it really matter in C?  It does matter if there's posibility of converting your project to C++ in future. Otherwise it's just bad style.  2 Answers 2  1  If you change the limiting condition to vert!=NULL , and if the loop ends with vert==NULL ,i.e. ,the vertex to be added isn't present , then you will be reading next statement :  That means you are accesing the NULL ,vert pointer , hence the seg fault .  Now to allow checking if the last element isn't the vertex to be added ,and also to prevent seg fault ,do this :  2  The temporary "new" pointer is the memory location allocated to the Vertex you added .IT IS NOT to be freed ,as freeing it will mean that you deleted the vertex you just added :O .  3  Yes , detroying the graph essentialy means the same .  It is always a good practice to implement linked list as a adjacency list implementation of graph .Although you can always use a c++ "2 D Vector" to implement the same .  Here's a working addVertex function that you can use. I am keeping the original declarations as it is. I have added a main () to which you can give command line arguments to test.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  