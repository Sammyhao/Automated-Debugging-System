 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I already ran my program through valgrind which pointed to the two functions I've included here:  Good day everyone. I have an interesting problem if you have some time. I keep running into an error with function from for days. My code is somewhat large, so I tested it to get the same error in a minified version. I know where the problem occurs but I can't formulate a solution for it. All help is much appreciated. Full error text:  The code includes a data structure to index words with their first and second letters' alphabetical indexes as key values, and stores the word itself in a linked list pointed by a node-head living in the corresponding indexed location. It's a very simple idea. As a great man once said; talk is cheap, show me code. Start reading the data structure definitions from (1) to (3), it will make more sense:  BTW: For such a tiny program you should start using a debugger to run through your code. At least it will tell you where your error happens.  You are extremely confused about pointers. Everything in your attempt is basically broken. You need to brush up on your linked lists first. Write functions that work on a single linked list. Debug them. Then just have a 26×26 array of linked lists.  Read how to debug small programs and the documentation of every function and header that you use. Compile with all warnings and debug info, so when using GCC. Improve your code to get no warnings. Use the debugger and to understand the behavior of your program. See also this answer.  1 Answer 1  Remember: The table is a global variable which is not dynamically allocated. points to the array element of this static variable.  Here you try to free the node that is in the array. Not a dynamically allocated memory location. That won't fly.  Looking at the way you init your table, we find some more problems:  You have 46 bytes of memory that cannot be accessed using the type.  While is a pointer to char, this may work. But if you intent to use dynamically allocated memory for other nodes, you need to free it afterwards. This will not work with string literals.  You copy the content of the allocated memory (of course without the 46 extra bytes) and then you forget about the allocated memory. You are not able to free it any more.  If these node each are the head of a list, you should not allocate memory for them at all as they are static.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  