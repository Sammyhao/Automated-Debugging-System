 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I have a hashtable with keys in alphabetic and values in numeric. how to sort the hashtable based on keys?  2,1231111 gold badges3939 silver badges5656 bronze badges  3  2  A hashtable is an inherently unordered data structure. What are you trying to do? It would be possible to create a sorted List of the key/value pairs, will this do what you want?  Several answers suggest using linq's extension method. It bears mention that hashtables and dictionaries can have custom equality comparers; if you are relying on this feature, you may want to use the overload that accepts a custom instance, to provide an ordering that is compatible with the equality relation you've used to compile the hashtable or dictionary.  6 Answers 6  You can use a for this which will do the sorting by key for you. In your case a would work:  152k2727 gold badges275275 silver badges323323 bronze badges  3  2  It is worth noting that is implemented internally by a binary search tree, and has retrieval rather than the expected retrieval of a hash table. Depending on the OP's needs, he may want this or he may want to do an OrderBy as in other answers  Yes - that is a great point to make - using a is only worthwhile if retrieving by key in order has to be done often / always and the key lookup time is not critical ( is still great, but certainly worse than )  @GabeMoothart there is another advantage of : It doesn't use arrays, while does. If you have huge numbers of objects and you get into problems with large object heap fragmentation, is a quick solution to keep your data off the large object heap.  However, Im not ordering the original hashtable, only reading its values in an ordered way.  As in other replies, if you need to store your data is sorted way, the best is to use SortedDictionary  Because of the nature of hash tables, you cannot sort them on the key in place: they organize their keys in buckets based on their hash code, a value outside of hash table's control. However, you can read key-value pairs in whatever order that you like. Here is how you can do it using LINQ:  Use a list instead of a hash (or convert your hash to a dictionary), and do this:  I used a list to store keys of Hashtable and sorted it and then dislayed Hashtable using this sorted list. Here is my code:  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  