 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I've been having trouble getting my heap sort program to properly sort integers from a read in file. The output current looks like this:  I dont know what is going on with the deletion section (insert seems to work fine) of my code and have been modifying for hours and still can't get it. If anyone could shed some light on this code please do so. I would greatly appreciate it!  Since the code contains no comments and doesn't make any obvious sense, it's really hard to know how to fix it. For example, takes a parameter called which it never uses, and the name "i" gives us no clue what it's supposed to mean. The loop is also puzzling. If you delete from a heap, don't you get a smaller heap? So if is supposed to be which item to remove from the heap, it rapidly gets out of bounds. (Consider a heap with ten items. After you've removed 8 items, you try to remove item 9 -- but a heap with only 2 items left has no item 9! So what does the code mean?!)  1 Answer 1  Use assertions to test conditions that must be true if your program is correct. Do not use them to test error conditions (such as memory allocation failure) that may happen despite your program being correct, because whether the asserted conditions will be tested at all is a matter of how your program is compiled.  It's dumb to heapify after reading each input because you don't need the data to be in heap form until after the last value is added.  You have a loop immediately followed by a loop . If the first loop ever exits, then the second should perform zero iterations, but that's not what your output shows. It follows that the code you posted does not correspond to the output you posted.  Your function contains a call whose ouput is not reflected in the output you posted. Again, it follows that the output you posted does not correspond to the code you posted.  Your function is wrong, or at least it is used wrongly. It does not require its second argument, as it should always heapify however many elements are actually in the heap. If that happens to correspond to the value of the most recently added element (which you assume in your calls) then that it purely coincidental.  Your function also contains a whose output is not reflected in what you posted.  The function does not use the value of its first argument.  The function has an off-by one error here: . It should be assigning to (i.e. you should be performing a swap). When you subsequently reduce the heap size by one, the position into which you just placed the erstwhile top element will no longer be part of the heap.  Function calls once per element (remaining) in the heap, whereas it only needs to call it once.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  