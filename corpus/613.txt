 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I can see there's a sorting object, , with a quicksort method, , on it.  What would be a code example of using it, sorting an array of object of arbitrary type? It looks like I need to pass in an implementation of the trait, but I am unsure of the syntax.  Also, I would prefer answers doing this the 'Scala way'. I know I can just use a Java library.  How do we know sortWith is using java.util.Arrays.sort? Is there a reference for that?  This is a little bit different that what the original question was asking. It certainly works to create a new sorted List (or Array as posed in the original question) but sortWith returns a new object as opposed to sorting the original List or Array in place.  Sorting.quickSort declares functions for taking an Array of numbers or Strings, but I'm assuming you mean you want to sort a list of objects of your own classes?  The function I think you're looking at is  Which, if I'm reading this right, means that the objects in the Array must have the trait. So your class must extend (or must mix it in), and therefore must implement the method of that trait.  So to rip off an example from the book:  So given an Array[MyClass], then Sorting.quickSort should work.  387k9595 gold badges795795 silver badges758758 bronze badges  4  Yeah, that's the one. It makes sense now you point it out. How would I 'mix it in'?  See edit. You either extend like my example, or use "class MyClass extends OtherClass with Ordered[MyClass]", which is a mix-in.  Not to be pedantic, but...your class need not extend Ordered, it is sufficient that there is a view (also know as an implicit conversion) in scope from your class to something that does extend Ordered.  If you just want to sort things, but aren't married to the Sorting object in particular, you can use the sort method of List. It takes a comparison function as an argument, so you can use it on whatever types you'd like:  Lists probably qualify as "more scalaish" than arrays.  13.9k44 gold badges4040 silver badges6161 bronze badges  5  Hmm, so List has a sort method, but Array doesn't. How unsatisfyingly irregular. I expect that sort of nonsense from the Java API, but not Scala.  I'm too much of a scala newb to know for sure, but it may be a necessary evil, given that Scala is maintaining compatibility with all the java stuff. On the other hand, Scala does so much magic, it seems normal enough to want it to do even more!  It's also worth noting that String does define (through an implicit conversion) the < method: "daniel" < "chris" == false  Scala's "default" array is a mutable data structure, very close to Java's Array. Generally speaking, that means an "array" is not very Scala-ish, even as mutable data structures go. It serves a purpose, though. If array is the right data type for your need, then that is how you sort it. There are other sorting methods on object Sorting, by the way.  I think I just realized what your question is... you don't need to pass any implicit parameter (it's implicit, after all). That parameter exists to say that there must be some way to convert the type K into an Ordered[K]. These definitions already exist for Scala's classes, so you don't need them.  For an arbitrary class you can define it this way:  Now, if Person was Ordered to begin with, this wouldn't be a problem:  288k8383 gold badges487487 silver badges672672 bronze badges  1  Apologies, I wasn't clear: I need to sort an array of objects of arbitrary type, not numbers.  While the accepted answer isn't wrong, the quicksort method provides more flexibility than that. I wrote this example for you.  This shows how implicit and explicit conversions from Foo to some class extending Ordered[Foo] can be used to get different sort orders.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  