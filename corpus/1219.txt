 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  One thing I can do is allocate a vector of size n and store all data and then sort it using sort(begin(),end()). Else, I can keep putting the data in a map or set which are ordered itself so I don't have to sort afterwards. But in this case inserting an element may be more costly due to rearrangements(I guess).  So which is the optimal choice for minimal time for a wide range of n(no. of objects)  This is a data structures question. In an or , there is a balanced tree, which is sorted all the time - each insertion/deletion costs which means the total insertions will cost . While in a vector, each insertion will cost you (in average, because it sometimes must be duplicated), while each deletion will cost you and sorting it will cost you each time. If you need it sorted all the time, I'd say clearly you should use a tree. Otherwise, it may be just the same as using a vector and sorting it in the end  You need to measure it. For example: which is faster to insert random ints into and keep the container sorted a map, a list or a vector? Answer in 2 mins when I find the presentation.  2 Answers 2  and are usually red-black trees, they should do a lot of work to be balanced, or the operation on it will be very slow. And it doesn't support random access. so if you only want to sort one time, you shouldn't use them.  However, if you want to continue insert elements into the container and keep order, and will take time, while the sorted is . The latter is much slower, so if you want frequently insert and delete, you should use or .  @Nelfeal How big the data is? Well, "the latter is much slower" only means complexity function grows much faster.  True, but that doesn't mean one should use a set by default instead of a vector. And to the question "how big is the data?", the answer usually is "small enough". But of course, as for many other things, it depends.  @Nelfeal Yes, you're right, but I also pointed that only "frequently" operate should use map or set. :)  Using a set, you get complexity for each element you insert. So by result you get , which is the complexity of an insertion sort.  Adding everything in a vector is of complexity , and sorting it will be since C++11 (before it, have on average.). Once sorted, you could use to have the same complexity as in a set.  The API of using a vector as set ain't the friendly, although it does give nice performance benefits. This off course is only useful when you can do a bulk insert of data or when the amount of lookups is much larger than the manipulations of the content. Algorithmsable to sort on partially sorted vector, when you have to extend later on. Finally, one has to remark that you don't have the same guarantees of iterator invalidation.  So, why are vectors better? Cache locality! A vector has all data in a single memory block, hence the processor can do prefetching while for a set, the memory is scattered around the place requireing the data to find the next address. This makes vector a better set implementation than std::set for large data when you can live with the limitations.  To give you an idea, on the codebase I'm working on, we have several set and map implementations based on vectors which have their own narratives to function in. (For example: no erase or no operator[])  10.4k44 gold badges2828 silver badges6161 bronze badges  2  1  Honestly, some of that went like a tangent goes past a circle :P But I think the main point is although both gives O(NLogN) complexity on paper vector is better due to more organised data in memory  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  