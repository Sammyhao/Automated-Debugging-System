 Pointers in C/C++ with Examples  Pointers are symbolic representation of addresses. They enable programs to simulate call-by-reference as well as to create and manipulate dynamic data structures. It’s general declaration in C/C++ has the format:  Syntax:  How to use a pointer?  Define a pointer variable  Assigning the address of a variable to a pointer using unary operator (&) which returns the address of that variable.  Accessing the value stored in the address using unary operator (*) which returns the value of the variable located at the address specified by its operand.  The reason we associate data type to a pointer is that it knows how many bytes the data is stored in. When we increment a pointer, we increase the pointer by the size of data type to which it points.  C  C++  Output:  References and Pointers  There are 3 ways to pass C++ arguments to a function:  call-by-value  call-by-reference with pointer argument  call-by-reference with reference argument  Output:  In C++, by default arguments are passed by value and the changes made in the called function will not reflect in the passed variable. The changes are made into a clone made by the called function. If wish to modify the original copy directly (especially in passing huge object or array) and/or avoid the overhead of cloning, we use pass-by-reference. Pass-by-Reference with Reference Arguments does not require any clumsy syntax for referencing and dereferencing.  An array name contains the address of first element of the array which acts like constant pointer. It means, the address stored in array name can’t be changed. For example, if we have an array named val then val and &val[0] can be used interchangeably.  C  C++  If pointer ptr is sent to a function as an argument, the array val can be accessed in a similar fashion.  an integer may be subtracted from a pointer ( – or -= )  difference between two pointers (p1-p2)  (Note: Pointer arithmetic is meaningless unless performed on an array.)  Advanced Pointer Notation  Consider pointer notation for the two-dimensional numeric arrays. consider the following declaration  In general, nums[ i ][ j ] is equivalent to *(*(nums+i)+j)  Pointers and String literals  String literals are arrays containing null-terminated character sequences. String literals are arrays of type character plus terminating null-character, with each of the elements being of type const char (as characters of string can’t be modified).  This declares an array with the literal representation for “geek”, and then a pointer to its first element is assigned to ptr. If we imagine that “geek” is stored at the memory locations that start at address 1800, we can represent the previous declaration as:  As pointers and arrays behave in the same way in expressions, ptr can be used to access the characters of string literal. For example:  Here, both x and y contain k stored at 1803 (1800+3).  Pointers to pointers  In C++, we can create a pointer to a pointer that in turn may point to data or other pointer. The syntax simply requires the unary operator (*) for each level of indirection while declaring the pointer.  Here b points to a char that stores ‘g’ and c points to the pointer b.  This is a special type of pointer available in C++ which represents absence of type. void pointers are pointers that point to a value that has no type (and thus also an undetermined length and undetermined dereferencing properties). This means that void pointers have great flexibility as it can point to any data type. There is payoff for this flexibility. These pointers cannot be directly dereferenced. They have to be first transformed into some other pointer type that points to a concrete data type before being dereferenced.  Invalid pointers  A pointer should point to a valid address but not necessarily to valid elements (like for arrays). These are called invalid pointers. Uninitialized pointers are also invalid pointers.  Here, ptr1 is uninitialized so it becomes an invalid pointer and ptr2 is out of bounds of arr so it also becomes an invalid pointer. (Note: invalid pointers do not necessarily raise compile errors)  Null pointer is a pointer which point nowhere and not just an invalid address. Following are 2 methods to assign a pointer as NULL;  Quizzes – Pointer Basics , Advanced Pointer Reference: https://www.ntu.edu.sg/home/ehchua/programming/cpp/cp4_PointerReference.html  This article is contributed by Abhirav Kariya. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.  Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  