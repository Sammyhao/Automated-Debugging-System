 How to use Array.BinarySearch() Method in C# | Set -1  Last Updated : 29 May, 2021  Array.BinarySearch() method is used to search a value in a sorted one dimensional array. The binary search algorithm is used by this method. This algorithm searches a sorted array by repeatedly dividing the search interval in half. Begin with an interval covering the whole array. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise, narrow it to the upper half. Repeatedly check until the value is found or the interval is empty.  Important Points:  Before calling this method, the array must be sorted.  This method will return the negative integer if the array doesn’t contain the specified value.  The array must be one-dimensional otherwise this method can’t be used.  The Icomparable interface must be implemented by the value or every element of the array.  The method will return the index of only one of the occurrences if more than one matched elements found in the array and it is not necessary that index will be of the first occurrence.  There are total 8 methods in the overload list of this method as follows:  This method is used to search a specific element in the entire 1-D sorted array. It used the IComparable interface that is implemented by each element of the 1-D array and the specified object. This method is an O(log n) operation, where n is the Length of the specified array.  Syntax: public static int BinarySearch (Array arr, object val); Parameters: arr: It is the sorted 1-D array to search. val: It is the object to search for.  Return Value: It returns the index of the specified valin the specified arr if the val is found otherwise it returns a negative number. There are different cases of return values as follows:  If the val is not found and valis less than one or more elements in the arr, the negative number returned is the bitwise complement of the index of the first element that is larger than val.  If the val is not found and val is greater than all elements in the arr, the negative number returned is the bitwise complement of (the index of the last element plus 1).  If this method is called with a non-sorted array, the return value can be incorrect and a negative number could be returned, even if the val is present in the arr.  Exceptions:  ArgumentNullException: If the arr is null.  RankException: If the arr is multidimensional.  ArgumentException: If the val is of a type which is not compatible with the elements of the arr.  InvalidOperationException: If the val does not implement the IComparable interface, and the search encounters an element that does not implement the IComparable interface.  Below programs illustrate the above-discussed method:  Example 1:  C#  Output:  C#  This method is used to search a specific element in the entire 1-D sorted array using the specified IComparer interface.  Syntax: public static int BinarySearch(Array arr, Object val, IComparer comparer) Parameters: arr : The one-dimensional sorted array in which the search will happen. val : The object value which is to search for. comparer : When comparing elements then the IComparer implementation is used.  Return Value: It returns the index of the specified val in the specified arr if the val is found otherwise it returns a negative number. There are different cases of return values as follows:  If the val is not found and val is less than one or more elements in the arr, the negative number returned is the bitwise complement of the index of the first element that is larger than val.  If the val is not found and val is greater than all elements in the arr, the negative number returned is the bitwise complement of (the index of the last element plus 1).  If this method is called with a non-sorted array, the return value can be incorrect and a negative number could be returned, even if the val is present in the arr.  Exceptions:  ArgumentNullException: If the arr is null.  RankException: If arr is multidimensional.  ArgumentException: If the range is less than lower bound OR length is less than 0.  ArgumentException: If the comparer is null, and value is of a type that is not compatible with the elements of arr.  InvalidOperationException: If the comparer is null, value does not implement the IComparable interface, and the search encounters an element that does not implement the IComparable interface.  Example:  C#  This method is used to search a value in the range of elements in a 1-D sorted array. It uses the IComparable interface implemented by each element of the array and the specified value. It searches only in a specified boundary which is defined by the user.  Syntax: public static int BinarySearch(Array arr, int i, int len, object val); Parameters: arr: It is 1-D array in which the user have to search for an element. i: It is the starting index of the range from where the user want to start the search. len: It is the length of the range in which the user want to search. val: It is the value which the user to search for.  Return Value: It returns the index of the specified val in the specified arr if the val is found otherwise it returns a negative number. There are different cases of return values as follows:  If the val is not found and val is less than one or more elements in the arr, the negative number returned is the bitwise complement of the index of the first element that is larger than val.  If the val is not found and val is greater than all elements in the arr, the negative number returned is the bitwise complement of (the index of the last element plus 1).  If this method is called with a non-sorted array, the return value can be incorrect and a negative number could be returned, even if the val is present in the arr.  Exceptions:  ArgumentNullException: If the arr is null.  RankException: If arr is multidimensional.  ArgumentOutOfRangeException: If the index is less than lower bound of array OR length is less than 0.  ArgumentException: If the index and length do not specify the valid range in array OR the value is of the type which is not compatible with the elements of the array.  InvalidOperationException: If value does not implement the IComparable interface, and the search encounters an element that does not implement the IComparable interface.  Example:  C#  This method is used to search a value in the range of elements in a 1-D sorted array using a specified IComparer interface.  Syntax: public static int BinarySearch(Array arr, int index, int length, Object value, IComparer comparer) Parameters: arr : The sorted one-dimensional Array which is to be searched. index : The starting index of the range from which searching will start. length : The length of the range in which the search will happen. value : The object to search for. comparer : When comparing elements then use the IComparer implementation.  Return Value: It returns the index of the specified value in the specified arr, if the value is found otherwise it returns a negative number. There are different cases of return values as follows:  If the value is not found and value is less than one or more elements in the array, the negative number returned is the bitwise complement of the index of the first element that is larger than value.  If the value is not found and value is greater than all elements in the array, the negative number returned is the bitwise complement of (the index of the last element plus 1).  If this method is called with a non-sorted array, the return value can be incorrect and a negative number could be returned, even if the value is present in the array.  Example: In this example, here we use “CreateInstance()” method to create a typed array and stores some integer value and search some values after sort the array.  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  