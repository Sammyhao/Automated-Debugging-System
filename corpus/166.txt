 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  My application suddenly breaks without even showing a managed stacktrace. It shows the following message in the console:  It seems that the problem is inside OpenCL driver. How can I trace and solve the problem?  3 Answers 3  It more looks like it's happeining in OpenCL (note the 'C', this is not OpenGL, but has a relationship to it). What's probably going on is, that your program tries to map some GPU memory into its address space, but this fails, because there's no piece of address space left, that's large enough and has the proper alignment. And somewhere in the low loevel code the pointer returned by mmap is not checked, which causes the segfault.  This clearly is a bug of either Mono or your OpenCL/OpenGL driver or in the bindings for it. Send the above trace to either of the developers, filing a bug issue.  153k1212 gold badges175175 silver badges278278 bronze badges  4  It is interesting because the program works for about 10 minutes and then crashes. All memory allocations are done during it's initialization, and there are no memory allocations during processing, no GPU memory is also allocated during computation, really strange...  @Lu4: What makes you think there are no memory allocations? Mono/.net is a garbage collected system. Memory is allocated and discarded behind the scenes all the time. As long as this happens within Mono the memory management can cope with the occuring address space fragmentation (the garbage collector rearranges the memory layout every now and then). However introduce some system that expects a clean address space, OpenGL, OpenCL, etc. and all kinds of strange interactions are about to happen.  I've ran the program on windows the same problem, but it gave me stack trace, the problem with clEnqueueAcquireGLObjects. It is also strange because I'm calling appropriate clEnqueueReleaseGLObjects later, I'm starting new thread  @Lu4: Ahh, starting a new thread may be the culprit as well: A OpenGL context must be active in only one thread at a time and all OpenGL commands must be called from this very thread. Trying to access OpenGL from other threads will cause serious problems.  There were a problem with memory leak in interop, and it caused to suckout all available memory, when went beyond 2gb it crashed... So thanks everybody, mine fault...  It s a matter of a massive memory allocation in the CALayer context , you need to free the layer every time you change the view. It happened to me and that's how I solved it, you need to release the memory each time you change a page drawing certain context.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  