 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I know that the running time for BUILD-MAX-HEAP in heap sort is . But, if we have an array that already sorted in a decreasing order, why do we still have for the running time of BUILD-MAX-HEAP? Isn't it supposed to be something like ? It's already sorted from the maximum value to the minimum value, so we do not need MAX-HEAPIFY.  Is my understanding correct? Could someone please explain it to me?  2 Answers 2  You are right. It can of course be . When you know for sure that your list is sorted you can use it as your max heap.  The common implementation of a heap using array uses this behavior for its elements position:  This rule applies on a sorted array. (descending for max-heap, increasing for min-heap).  Please note that if you need to check first that the list is sorted it is of course still .  EDIT: Heap Sort Complexity Even though the array might be sorted and building the heap might actually take . Whenever you perform a Heap Sort you will still end up with . As said in the comments, Heap Sort is performing calls to . Each extraction operation takes - We end up with total time complexity of . In case the array is not sorted we will get total time-complexity of which is still .  3,81622 gold badges2626 silver badges5050 bronze badges  4  Thank you for your answer. But, why does the Heap Sort still have running time of , even though the BUILD-MAX-HEAP only takes time . Why does it not = ?  @mskeira because the time of performing heap sort is dominated by n calls to extract-max, each of which takes log n time, even if the heap is initally fully sorted. There are some variant implementations of heap sort which perform better on "nearly sorted" inputs.  @mskeira I've edited my answer accordingly eventhough it is a bit out of the scope of the question. If you find this answer correct, please consider accepting it by clicking on the V next to my answer. Glad to help.  If you know that the array is already sorted in decreasing order, then there's no need to sort it. If you want it in ascending order, you can reverse the array in O(n) time.  If you don't know whether the array is already sorted, then it takes O(n) to determine if it's already reverse sorted.  The reason building a max heap from a reverse-sorted array is considered O(n) is that you have to start at item n/2 and, working backwards, make sure that the element is not smaller than its children. It's considered O(n) even though there are only n/2 checks, because the number of operations performed is proportional to the total number of items to be checked.  It's interesting to note, by the way, that you can build a max-heap from a reverse-sorted array faster than you can check the array to see if it's reverse sorted.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  