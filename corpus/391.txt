 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I'm trying to implement a DFS, and BFS. The BFS works fine, using a queue:  Output:  Now, I'm trying to implement the DFS (same algorithm, but using a stack) however the output isn't correct:  Pro tip: it's usually simpler to implement DFS using recursion than using an explicit stack.  in order to use the stack for post-order DFS you should pop the node from stack and put its char into "out" array at some later time (i.e. not right after you discover them). Your trie node does not seem to have a field for char. In case of BFS that was not a problem because you were outputting the chars at the discovery time so you could use the integer "i" to represent those chars. In post-order DFS you can't do that unless you know which char the node actually contains.  It is possible to maintain a Map<TrieNode, Integer> or Map<TrieNode, Character> and populate it whenever we discover a new trienode, without actually having a field for char inside of TrieNode class but that looks really awkward  2 Answers 2  I have implemented the map-based approach that I mentioned in my comment, i.e. without modifying the original class:  To get the output that you wanted, you need to think about when a node is added to the out list. In your code, you start at the root and iterate throught it's offspring in a kind-of recursive style while adding them directly to your output. Therefore your output has more in common with a BFS than a DFS.  Although there are very simple DFS implementations like  if you want to keep most of your code for any reason, you could create a second stack that keeps track for you where in the tree you are and when which node is supposed to be added to the output. Explicitly, this could look something like this:  so where do you get that ? you never stored it. that's the problem I've described in the comments. code won't compile due to that line  still meaningless. the list should contain integers or characters. how will the list of TrieNodes get converted into list of integers?  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  