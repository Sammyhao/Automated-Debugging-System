 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  What is the order of DFS or BFS traversals for graphs when there may be vertices which have outdegrees of 0 if we want to do DFS/BFS from a given vertex .  1,53533 gold badges2626 silver badges4545 bronze badges  6  AFAIK the order is dependent upon how they are placed in the queue, and how they are placed in the queue is dependent upon either the data structure representing the graph, the algorithm that walks the graph or both. There is no one conical order in general. There may be specific implementations that define an order, but I don't know of that being a requirement to be either DFS or BFS.  So in my case if I using stack/queue the traversal stops after hitting 4 or just say we pass 4 initially and it don't find any adjacent nodes, then at random can we pick any node which is not visited till yet and continue the traversal and update the node till we hit the another block ?  No, that wold not be DFS or BFS. What you seek seems closer to checking if a graph is connected or if a spanning tree can be created.  Or you might be seeking the minimum set of nodes that via reachability can cover the graph.  2 Answers 2  If you want to traverse all the nodes of the graph, then you should be aware that since there are nodes that are not reachable from your selected root node, you won't be able to traverse them while using a single BFS/DFS.  The order on which the nodes are traversed is dependent on the implementation of your BFS/DFS. In your case, it depends on the order you insert each node to the adjacency list.  If you would like to traverse the whole graph, then you should maintain which nodes are visited and then run BFS/DFS for each non-visited node (e.g by using a loop). Particularly, the order of appearance of the traversed nodes again depend on the ordering of the items on which you will actually loop.  So from what I can see, the implementation of BFS is fine. IMO, its output is what I would expect for a standard implementation of the algorithm when the input to the initial call has set for the parameter.  That being said, not all directed graphs are completely traversable from any given node. Based on the directions of the arrows, when I start traversing at node , I can really only get to nodes , , , and . Nodes , , and aren't reachable from node because points to , but doesn't point to .  If you want to truly traverse the entire graph you will need to amend your BFS algorithm such that if at the end of the current implementation, the length of the array is less than the length of the array, then you will need to find the next element in that isn't present in until the lengths of the two arrays match.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  