 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I have a stream data coming, and I am maintaining them by pushing them one by one into a heap (priority queue), the resulting heap looks like:  Because I need to update the items (e.g., change (a,1) to (a, 2), or delete (c,7)) continously through out the time. To effciently find and remove an items in a heap, I want to construct a hash table with the location of every items in the heap stored in the hash table.  So that each time I want to update an item, I can use the hashtable to find it and make changes easily in the heap, simutinouly updating the position of every item in the hash table.  I have little experience with c++, wondering if anyone can help me explain the idea or provide a python version code of such an implementation?  1 Answer 1  My understanding is that the first item in your pair serves as the key, and the second item as the data payload. Then I would propose an approach the other way around, somewhat similar to this answer, but simpler.  Let the hashtable be your primary data structure for data storage and the min-heap be an auxiliary data structure for maintaining the current smallest key in your data set.  Insert new item: add the data into both hashtable and min-heap.  Update the value for the given key: update the value in the hashtable only.  Delete the item with the given key: delete the entry with the given key from the hashtable only.  Access the smallest key: if the element at the top of the heap is not found in the hashtable, drop it; repeat, until the top key is present in the hashtable.  @enaJ You should know better. That's the main functionality of min-heap data structure. If you don't need to access the smallest key, why is your question built around min-heap?  The first item in my pair represent a node, the second represent the edges that connect with this nodes. The big picture of this problem is to update a graph with vertex and nodes in a rolling time-window of 1 minute.  I want to be able to change any certain item in a heap. Not necessarily the smallest one  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  