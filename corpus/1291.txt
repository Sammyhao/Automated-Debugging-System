 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I have a struct that consists of a name and an age. What I would like is to have an unordered_map that takes a strings as its keys and then either a map or a priority_queue that then stores the age given that string:  I know I the declarations syntax are entirely correct, but hopefully you get the idea...  Which should I go with for best performance? The idea is to be able to search, insert, remove very fast.  77822 gold badges77 silver badges2020 bronze badges  5  Given that you can't search a it is not an option! It seems you didn't specify your requirements. A priority queue is only good at one thing: determining the object with the highest priority. Also, why does it matter that the map or the priority queue are within a hash map?  Well you answer your question by saying you want the fastest. On the [c++ page](cplusplus.com), it gives you runtime of the algorithms used for each implementation  That's not true. Yes, they have the same complexity for almost all operations, but map uses balanced trees (like red-black) while priority_queue is an implementation of binary heap on some random access container (like vector<>). You can refer to cplusplusreference.com for details  1 Answer 1  priority_queue is a very specific data structure which supports a limited set of operations: get size, get or remove the maximal element, add a new element. So if you need to randomly access and remove your elements, map is the only valid choice of these two options.  In general, both of them work in O(log N). priority_queue is faster but is less powerful. It's faster because it uses heap instead of balanced trees, which results in better memory usage (all elements lies together in the same memory block) and less memory (re)allocations.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  