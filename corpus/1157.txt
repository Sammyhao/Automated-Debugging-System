 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I have a problem that sounds like this: A company has 4 taxis in 4 different (A B C D) locations. 4 people (W X Y Z) call the company that they need a taxi. I need to find the fastest way that the taxis can arrive at their people knowing that a taxi can only go for 1 person and each taxi has assigned a value between its destination and the people's destinations.  I was thinking of building a tree with all the possible combinations ex: AW-BX-CY-DZ or AX-BW-CY-DZ etc and find the minimum cost for each of them but I need to solve this using the DFS or greedy BFS approach. Any ideas how this would work? I can't imagine it.  I just want the idea on how to solve this using DFS/GBFS. I can't figure out how it would have to go or when the search would end since I'm looking for the minimum distance used  1,17311 gold badge1616 silver badges3737 bronze badges  1  What is the objective function? That is, how do you compare two different matchings?  1 Answer 1  This is an instance of an assignment problem, which is finding maximum/minimum weight matching in a weighted bipartite graph. Most common algorithm used to solve this kind of problem is the Hungarian Algorithm, solving it in O(n^3). There is a Python module implementing it - munkres.  However, If You really want to use DFS/BFS You can think of some naive algorithm creating every possible solution, and then searching through the solution space using DFS/BFS, but it will be highly nonoptimal.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  