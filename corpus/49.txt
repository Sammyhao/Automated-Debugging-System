 A program to check if a binary tree is BST or not  A binary search tree (BST) is a node based binary tree data structure which has the following properties.  The left subtree of a node contains only nodes with keys less than the node’s key.  The right subtree of a node contains only nodes with keys greater than the node’s key.  Both the left and right subtrees must also be binary search trees.  From the above properties it naturally follows that:  METHOD 1 (Simple but Wrong) Following is a simple program. For each node, check if the left node of it is smaller than the node and right node of it is greater than the node.  C++  C  Java  Python3  C#  Javascript  This approach is wrong as this will return true for below binary tree (and below tree is not a BST because 4 is in left subtree of 3)  METHOD 2 (Correct but not efficient) For each node, check if max value in left subtree is smaller than the node and min value in right subtree greater than the node.  C++  C  Java  Python3  C#  Javascript  It is assumed that you have helper functions minValue() and maxValue() that return the min or max int value from a non-empty tree  METHOD 3 (Correct and Efficient): Method 2 above runs slowly since it traverses over some parts of the tree many times. A better solution looks at each node only once. The trick is to write a utility helper function isBSTUtil(struct node* node, int min, int max) that traverses down the tree keeping track of the narrowing min and max allowed values as it goes, looking at each node only once. The initial values for min and max should be INT_MIN and INT_MAX — they narrow from there.  Note: This method is not applicable if there are duplicate elements with value INT_MIN or INT_MAX.  Below is the implementation of the above approach:  C++  C  Java  Python  C#  Javascript  Output:  Time Complexity: O(n) Auxiliary Space: O(1) if Function Call Stack size is not considered, otherwise O(n) Simplified Method 3 We can simplify method 2 using NULL pointers instead of INT_MIN and INT_MAX values.  C++  Java  Python3  C#  Javascript  METHOD 4(Using In-Order Traversal) Thanks to LJW489 for suggesting this method. 1) Do In-Order Traversal of the given tree and store the result in a temp array.  2) This method assumes that there are no duplicate values in the tree 3) Check if the temp array is sorted in ascending order, if it is, then the tree is BST. Time Complexity: O(n) We can avoid the use of a Auxiliary Array. While doing In-Order traversal, we can keep track of previously visited node. If the value of the currently visited node is less than the previous value, then tree is not BST. Thanks to ygos for this space optimization.  C++  C  Java  Python3  C#  Javascript  The use of a static variable can also be avoided by using a reference to the prev node as a parameter.  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  