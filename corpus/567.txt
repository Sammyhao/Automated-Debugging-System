 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I have a doubt regarding heap in program execution layout diagram of a C program.  I know that all the dynamically allocated memory is allotted in heap which grows dynamically. But I would like to know what is the max heap size for a C program ??  I am just attaching a sample C program ... here I am trying to allocate 1GB memory to string and even doing the memset ...  If I run above program in 3 instances at once then malloc should fail atleast in one instance [I feel so] ... but still malloc is successfull.  If it is successful can I know how the OS takes care of 3GB of dynamically allocated memory.  4 Answers 4  Your machine is very probably overcomitting on RAM, and not using the memory until you actually write it. Try writing to each block after allocating it, thus forcing the operating system to ensure there's real RAM mapped to the address returned.  I did try the memset on the alloted dynamic memory ... it seems ok when i run 2 instances  Writing won't change anything and will only force the kernel to start swapping. When the swap and the RAM are full, linux kernel starts to kill processes (xenotime.net/linux/doc/swap-mini-howto.txt). So to my knowledge, you won't ever see a NULL returned by malloc because of the system is out of PHYSICAL memory. However, you can get a NULL returned by malloc because your process uses "too much" of its virtual address space. It's well explained here: duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory  1,76811 gold badge99 silver badges88 bronze badges  5  I do know about virtual memory ... I am just leaving information about my memory details  Well you're asking why allocating 3GB when you got 1GB of RAM does not fail. Let's say that you are actually using 3GB of memory through malloc. What you are actually using is 3GB of virtual pages. When the system is out of RAM, it's using the swap as a backup to store previously allocated pages on the disk and thus free some RAM for new pages. have a look to this one: apollo.lsc.vsc.edu/metadmin/references/sag/x1752.html  That means that the system is not using the swap at all. But like unwind said, calling malloc does not actually commit the memory. Pages are allocated lazily, which means the system gives you the page ONLY if you access it (read or write).  Malloc will allocate the memory but it does not write to any of it. So if the virtual memory is available then it will succeed. It is only when you write something to it will the real memory need to be paged to the page file.  Calloc if memory serves be correctly(!) write zeros to each byte of the allocated memory before returning so will need to allocate the pages there and then.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  