 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I need to "create a priority queue implemented by a binary search tree (BST)" for my algorithms II class. However, I'm not sure exactly how you would use a binary search tree as a priority queue. Could someone clarify what it is that the assignment is asking me to do?  As a reference, here are the methods the PriorityQueue must implement:  1,09355 gold badges2020 silver badges4848 bronze badges  1  your most left node should contain the least value element. When you poll()/pop() the queue remove that element and rebalance if need be. Adding is just a normal add. Good luck and keep in mind that duplicates do require some non-trivial handling.  3 Answers 3  A Binary Search Tree is always ordered and will always stay in order if new items are inserted.  The major advantage of binary search trees over other data structures is that the related sorting algorithms and search algorithms such as in-order traversal can be very efficient.  And that's your Priority Queue. In a possible implementation, items with least priority will get the highest number and items with the highest priority will get the lowest number. If these items are inserted into the BST and you read it , then you have the order in which the queue should be processed.  To process the queue, you "pop" off the first element in the tree and the rest will be ordered automatically by the BST.  The only thing you have to take care about is the correct insertion of new elements into the tree and what happens if the first one is removed.  Your methods would be mapped to the tree operations, inserts a new item in the correct place and modify the tree if necessary, for example gives back the size of the tree, will traverse the tree.  A binary search tree is used to efficiently maintain items in sorted order. If the sort-order is based on priority, then your binary tree becomes a priority queue. You pop off the highest priority item , and insert new items according to their priority.  Edited to add:  It may help to consider the alternatives - if you used a linked list as your queue, how would you know where to insert a new item, other than by walking all the way down the list, which is O(N) with a worst case of N. Using a binary tree solves that problem.  for search you can cache the size in each node which will be the current number of elements in the subtree of which the node is the root of (or in other words )  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  