 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  4,79833 gold badges3131 silver badges6363 bronze badges  1  Your title says but the code is . Note that is the exception class that takes a message, as you're doing, but does not, so the title doesn't make too much sense (i.e., doesn't have a string-accepting constructor).  3 Answers 3  (which inherits from) must make a copy of the message, even if that's not called out in the standard explicitly (that I can find). There's no reason for the class to expect that the source of the message will outlive it in the general case.  318k4949 gold badges510510 silver badges730730 bronze badges  5  1  +1; all the objects in local scope will be destroyed when the exception is thrown so there's no way you could access basically anything but string literals if it didn't make a copy.  Also don't forget that an exception object can be created and kept around (and never thrown). One of those exception objects still needs to be a valid object with the same message even if the string passed into it is destroyed or changed.  @MichaelBurr: Where is that exactly stated, though? (Obviously into pedant land now, but I'm curious.) All that's stated is that after construction of a by a named , . It doesn't say anything about copies of said exception object.  @GManNickG: I don't see anything about it explicitly stated, but for to work in the face of code such as a copy would have to be made.  I believe the lack of specificity is deliberate to allow the implementation as much flexibility as possible. What happens behind the scene is not that important as long as the constrains are achieved. I think the important thing to note is that a string passed to the constructor will be reflected in a call to what at some later point.  it takes a string refrence. And passes that to the catch block as a reference, however if you pass a string litterial into the constructor it will create a temp string object. Also, do not do + arg with a string litterial, that's a syntax error.  Where is the pointer? You are copying a string literal and implicitly casting it to when constructing the runtime error.  15.3k1313 gold badges4141 silver badges5050 bronze badges  2  the point is: does runtime_error store the reference (sorry for calling it a pointer) to the temporary object that I'm constructing, or does it copy it (which is what I hope)?  I agree with GMan. I'm pretty sure it has to make a copy as the scope of the catch block can be outside the scope of the temporary you're passing. It will work but how the compiler will actually boil it down may differ occasionally.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  