 A set is different from a vector in two ways: it stores elements in a sorted way, and duplicate elements are not allowed. Therefore, this approach cannot be used for graphs containing parallel edges. Since sets are internally implemented as binary search trees, an edge between two vertices can be searched in O(logV) time, where V is the number of vertices in the graph. Sets in python are unordered and not indexed. Hence, for python we will be using dictionary which will have source vertex as key and its adjacency list will be stored in a set format as value for that key.  Following is an example of an undirected and unweighted graph with 5 vertices.  Below is adjacency list representation of this graph using array of sets.  Below is the code for adjacency list representation of an undirected graph using sets:  C++  Java  Python3  Javascript  Output  Pros: Queries like whether there is an edge from vertex u to vertex v can be done in O(log V). Cons:  Adding an edge takes O(log V), as opposed to O(1) in vector implementation.  Graphs containing parallel edge(s) cannot be implemented through this method.  Further Optimization of Edge Search Operation using unordered_set (or hashing): The edge search operation can be further optimized to O(1) using unordered_set which uses hashing internally.  C++  Output  Pros:  Queries like whether there is an edge from vertex u to vertex v can be done in O(1).  Adding an edge takes O(1).  Cons:  Graphs containing parallel edge(s) cannot be implemented through this method.  Edges are stored in any order.  Note : adjacency matrix representation is the most optimized for edge search, but space requirements of adjacency matrix are comparatively high for big sparse graphs. Moreover adjacency matrix has other disadvantages as well like BFS and DFS become costly as we canâ€™t quickly get all adjacent of a node. This article is contributed by vaibhav29498. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  