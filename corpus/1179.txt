 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I'm trying to write a program that sorts integer elements of an array, using a Binary Search Tree(BST) as support data structure. The idea is that once the array is given, then it is possible to use a BST to sort his element; for example:  if my array is: {120, 30, 115, 40, 50, 100, 70}  then I build a BST like this:  Once I have this BST, I can do an inorder tree traversal to touch every node in order, from the lowest to the highest element and modify the array. The result would be a sorted array {30, 40, 50, 70, 100, 115, 120}  I wrote this code and I don't understand where is the error I made. It compiles without any error, but obviously there is something wrong with it:  I hope that my question is clear enough. Any help/advice would be appreciated!  @BradyDean I was trying to figure out how to insert the elements of BST in the right positiom of array, but seems not working now that I'm looking too at the function insertIntoArray. Maybe would it work if it returns -1 instead of 0 when tree==NULL ? (Sorry about my english, hope it is clear)  I about have your code working, I'm just trying to figure out . You forgot to check if in also.  Nice start. When you get it working you should get a code review at: codereview.stackexchange.com PS. They will only review working code so it needs to be fixed first.  Yes, a nice start indeed. But note, a BST is generally not something used to "sort" data, the BST is a data structure that holds the data in a sorted order to begin with, so all that is needed is an in-order traversal to output the data in sort order. If you don't need an array, there is no need to use one just to fill the BST. A std::map is generally implemented as a Red-Black tree. If you are using the array, you can simply sort it with std::sort. Lots of options.  2 Answers 2  The first issue is that you are passing an unitialized variable as a parameter:  Why. You are starting to fill the array at zero so pass zero (and get rid of the index variable).  I could not quite decipher your version of . But this version seems to work.  OK. So it should work. BUT that does not mean this is all good C++ code. You really should get this code reviewed.  242k8080 gold badges318318 silver badges538538 bronze badges  2  My insertIntoArray function was clearly not working at all, thank you for the explanation. May I ask you what do you mean with code review and what are the benefits of it? I'm new in coding and any advice is really apprecciated.  @VittorioA. Code review is a processes that all professionals use to check your code. It is where other developers read your code and point out: 1) Errors 2) Bad practice 3) Better techniques 4) Design patterns that could be used 5) Conventions used in the language (idioms).  So I modified quite a bit of the code. First thing to notice is I'm using instead of . This is a pretty common idiom when dealing with trees and traversal algorithms. Reason being is you need to be able to modify the pointer being passed in (I take it this is why you used , you could also do it that way). The big difference with is that becomes , that way each call to can share the same incrementing index. I also added a touch of memory management.  I also need to warn you that is a variable length array (VLA) and is not standard C++. is the way you should go. (in fact it makes this problem easier because you can append easily)  2,98833 gold badges2222 silver badges4242 bronze badges  2  Thank you very much for your solution! So basically Node** and Node*& are both correct to use? Which is the benefit of choosing one instead other? Also, why vector would make this problem easier?  You don’t need to make a running index to insert into a vector. You can accomplish the same thing with either a double pointer or pointer reference in your code.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  