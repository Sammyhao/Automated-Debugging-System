 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  Is there any way to avoid sorting of map on the basis of key value. Actually i want to display all pair in same order i insert it into map.  How many entries will be there in the map? if not too many or lookup is not that important you can use  As well as the obvious (and sensible) option of using a vector, there's the silly but correct answer: use an insertion counter as your key... :-(. Of course, if you want to store a key value too, you may need a pair of (ordering, key) and custom comparison.... Anyway, too much said ;-).  It seems what you require is two "views" of the data, one which maintains insert order and one which (presumably) you use for fast lookups. There is a structure which allows you to maintain this - if you can include boost. It's the boost multi_index container. You can specify two indexes, a and .  The way map is implemented internally, it's not possible for you to prevent keys to be sorted. However, you can maintain an additional list(using vector) to store the order in which keys appear. Later on, iterate over the map and the vector to achieve what you want.  20.2k3636 gold badges107107 silver badges167167 bronze badges  1  6  It's more than an internal implementation issue, it's an interface guarantee that a is ordered by key.  No, there isn't. sorts by key to implement lookup.  You can get around with a to achieve what you need, but you'll need to write your own lookup function to retrieve values by key.  I'm speculating here. Other would know for sure, but maps aren't stored in an array. It's more like a B-tree.  That means there is no way to know what record in the map was stored before or after another. Were I to build a map from scratch, I'd surely have no way to accomplish your task. Sorry.  Perhaps a map isn't your best option for storage. If you want to retrieve things in the order you've pushed them in, then perhaps a vector.  4,1801010 gold badges5757 silver badges9191 bronze badges  1  If I recall, the complexity requirements of and implicitly impose the use of red-black trees, as they are the only ones that offer on insertion, lookup and removal.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  