 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I am trying to finish my iterator class for my Unrolled Linked List (Linked List where each node has an array of items). All functions are working properly except for the '==' and '!=' overloaded operators. I'm trying to make it so that it compares the addresses of the currentNode[currentIndex], but the * and & dont seem to be working on these overloaded operators. Heres my code...  I've come up with a work-around with the code below, but it's not comparing addresses, per say like I'd like. This also crashes when I copy the iterator and try traversing through the copied iterators contents....  yes, I've used option number two you've presented me with. However, it's throwing a bad access exception at the overloaded * operator when I used the iterator on a copied iterator object for some reason....  I don't see anything wrong with the code you've shown (except for , which can't possibly compile). The problem must lie in the code you haven't shown. What's the definition of ? How is the list created? How are you traversing it?  It is declared to return , aka . But it returns , which has the type of . This can only work if is the same as - that is, if you have a list that holds pointers to iterators into itself. Which is a rather bizarre data structure to want to make.  1 Answer 1  @ Igor Here is the code for the rest of my class. I am stumped as to why my copied iterators crash with bad access code exceptions when I try to traverse them.  There are so many problems, it's hard to know where to start. For example, observe that, for a list containing exactly 50 elements, . Frankly, I don't feel like wading through this wall of code. Since what you really want is a code review, consider posting to codereview.stackexchange.com  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  