 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I am trying to write a "contains" function for a binary search tree. I receive the following error at compile "Unhandled exception at 0x77291CB3 (ntdll.dll) in BST.exe: 0xC00000FD: Stack overflow (parameters: 0x00000001, 0x001E2FFC)." The following is my code.  As it stands, I would insert a single node with value '5' and I would search the binary search tree for a node with value '4' - thus, I would expect the result to be false.  35722 gold badges44 silver badges1616 bronze badges  2  doesnt "delete temp;" free that space? @pippin1289 - That seems to resolve some of the problems I was having, but the solution still does not compile  Is it just me or did you just copy another version of the function and renamed it to ? Why do you need to construct a new node at all? Why are you trying to delete a pointer after the return? Didn't the compiler warn you that's unreachable code? What have you done to try to debug your code?  1 Answer 1  is a local variable in the function. When the function is called recursively, each new call will get it's own set of local variables an won't see what an outer call did to the local variables in the outer function.  Especially, before the recursive call, the function sets the node to a node that should be searched next. But the called function will never see that variable, it will get its own variable, initialize it to , and start searching from there.  Each recursive call will start searching from the beginning and then call itself again, until you run out of stack memory and get a stack overflow.  Instead of setting the variable you should pass the current node as an additional parameter to the recursive call of the function.  If you don't want to change the parameters of the good way to handle this would probably be to move the real work to a helper function that takes deals with the additional parameter:  If you make the helper function you can also make sure nobody gets confused by it's presence or calls it by accident.  Another possibility would be to avoid recursion altogether and use a loop instead.  207k4949 gold badges265265 silver badges359359 bronze badges  2  Ahhh - of course. Is there a way I can alter this function slightly as it stands to make it accomplish what I was trying to accomplish? Or would it be a better route to add the additional parameter?  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  