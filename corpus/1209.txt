 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I am writing a program for class for a password validator. I need the password to be at least 6 characters, but I am also limiting it to a max of 10 (not required but wanted to).  The program works great and my other validations work until I try to add a password with more than 10 characters. I can go through and reenter a new password, and I get the message that it is now a valid password. But then I get a the following error:  Run-Time Check Failure #2 - Stack around the variable 'password' was corrupted.  I can get around the error if I set the width, but I know this isn't the correct way to handle it. Also I would think that by setting the width that the user would not be able to enter anything other than that size.  By the looks of it, change variable declaration from to and you're good to go. The buffer may be simply too short to hold your data.  Don't mix C and C++. Someteimes You have C char*, sometimes std::string. This film have not happy end.  1 Answer 1  with cstrings, the operator will read a string and append the null-byte character automatically at the end of the buffer if there is enough space.  you allocate a buffer of 11, so when the password entered is higher than 10, the null byte terminating the string won't be present, causing problems with and such. Indeed, what does is simply reading the input and incrementing a counter until a is encountered.  You have now two choices:  keep going with and augment the size of the buffer (high enough to avoid surprises),  switch to the class of c++, which is an array of char able to increase dynamically (strongly recommended, here is a link to get started).  Also, concerning the code: you have a lot of unnecessary stuff. For example:  could be replaced by:  calls which checks that and you can exit the first loop only when the password is correct.  Another improvement would be to pass along the size of the password to your functions in order to avoid calling everywhere (it is common in C to always pass the size with a argument).  8,83822 gold badges2424 silver badges4545 bronze badges  9  I reviewed your link but I am not sure I understand it. I am very new to c++.. so when I change the char password[10] to string password; I get errors on every reference to password. I am not sure how to fix that.  for now, you can simply change by . If you want to use , you also need to change the signature of your methods, i.e. replace by .  please, don't forget to mark the question as answered (checkmark on the left) if the answer suits you and welcome to stackoverflow!  Thank you so much!!! For now I am increasing the size since I have the validation if it is bigger then 10. But I am going to play around with changing it to string  takes a string by reference, but doesn't let modify it. takes a string by reference, and lets modify it. takes a string by value, by copying the original string; can modify its copy of the string without changing the original string.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  