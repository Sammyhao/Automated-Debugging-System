 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  It seems that a priority queue is just a heap with normal queue operations like insert, delete, top, etc. Is this the correct way to interpret a priority queue? I know you can build priority queues in different ways but if I were to build a priority queue from a heap is it necessary to create a priority queue class and give instructions for building a heap and the queue operations or is it not really necessary to build the class?  What I mean is if I have a function to build a heap and functions to do operations like insert and delete, do I need to put all these functions in a class or can I just use the instructions by calling them in .  I guess my question is whether having a collection of functions is equivalent to storing them in some class and using them through a class or just using the functions themselves.  What I have below is all the methods for a priority queue implementation. Is this sufficient to call it an implementation or do I need to put it in a designated priority queue class?  Using a heap is one way to implement a priority queue. It is a popular and efficient way, but it isn't the only way, so you could have a priority queue which was implemented without a heap.  These are two different class of abstractions. Priority queue is a an abstract data type like a queue that holds priorities, so when you add to a queue element, it does not got to the very end of the queue, but to the place that 'fits'. The heap, in general is a block of memory used to store stuff.  @Grzegorz: The are (at least) two kinds of "heap". The "Memory Pool" thing you mention, and the heap datastructure.  5 Answers 5  A priority queue is an abstract datatype. It is a shorthand way of describing a particular interface and behavior, and says nothing about the underlying implementation.  A heap is a data structure. It is a name for a particular way of storing data that makes certain operations very efficient.  It just so happens that a heap is a very good data structure to implement a priority queue, because the operations which are made efficient by the heap data strucure are the operations that the priority queue interface needs.  97.7k88 gold badges186186 silver badges265265 bronze badges  5  2  Or one could say that "heap" is a family of data structures, having in common that they maintain the "heap property", but which do that in different ways giving somewhat different performance characteristics.  "and says nothing about the underlying implementation" ? if not explicitly defined in constructor it is implemented as std::vector, isn't it?  @computer: The C++ standard makes certain promises about the underlying implementation of the class template, but I'm talking general computer science here, nothing specific to any language or library.  Having a class with exactly the interface you need (just insert and pop-max?) has its advantages.  You can exchange the implementation (list instead of heap, for example) later.  Someone reading the code that uses the queue doesn't need to understand the more difficult interface of the heap data structure.  I guess my question is whether having a collection of functions is equivalent to storing them in some class and using them through a class or just using the functions themselves.  It's mostly equivalent if you just think in terms of "how does my program behave". But it's not equivalent in terms of "how easy is my program to understand by a human reader"  The term priority queue refers to the general data structure useful to order priorities of its element. There are multiple ways to achieve that, e.g., various ordered tree structures (e.g., a splay tree works reasonably well) as well as various heaps, e.g., d-heaps or Fibonacci heaps. Conceptually, a heap is a tree structure where the weight of every node is not less than the weight of any node in the subtree routed at that node.  144k1313 gold badges206206 silver badges368368 bronze badges  2  Just to confirm, will it be correct to say that heaps are a type of priority queue?  @AdityaPrakash Heaps can be used to implement a priority queue. There may be other uses although off-hand I can’t think of any which can’t be seen as a priority queue…  The C++ Standard Template Library provides the make_heap, push_heap and pop_heap algorithms for heaps (usually implemented as binary heaps), which operate on arbitrary random access iterators. It treats the iterators as a reference to an array, and uses the array-to-heap conversion. It also provides the container adaptor priority_queue, which wraps these facilities in a container-like class. However, there is no standard support for the decrease/increase-key operation.  priority_queue referes to abstract data type defined entirely by the operations that may be performed on it. In C++ STL is thus one of the sequence adapters - adaptors of basic containers (vector, list and deque are basic because they cannot be built from each other without loss of efficiency), defined in header ( in my case actually). As can be seen from its definition, (as Bjarne Stroustrup says):  container adapter provides a restricted interface to a container. In particular, adapters do not provide iterators; they are intended to be used only through their specialized interfaces.  On my implementation is described as  template:  In opposite to this, heap describes how its elements are being fetched and stored in memory. It is a (tree based) data structure, others are i.e array, hash table, struct, union, set..., that in addition satisfies heap property: all nodes are either [greater than or equal to] or [less than or equal to] each of its children, according to a comparison predicate defined for the heap.  So in my heap header I find no heap container, but rather a set of algorithms  all of them (excluding __is_heap, commented as "This function is an extension, not part of the C++ standard") described as  Not really. The "priority" in the name stems from a priority value for the entries in the queue, defining their ... of course: priority. There are many ways to implement such a PQ, however.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  