 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  This is one of three trees I am using to parse text and print out every unique word, the line numbers it appears on, and the number of times it appears. I have already used a hash and tree map and have both of them working correctly. My instructor said that we need to use an AVL tree for the third map and gave us code. This is where I am unsure where to go. I will include the method that creates/fills the AVL map as well as the AVL map class. If further code is needed, I will gladly include it.  AvlMap class. I know it is quite lengthy, but the methods seem to be pretty much the same as the rest of the map classes I have been using.  Here is my WordStats class that saves everything into a set and keeps occurrance.  Exception in thread "main" :  cannot be cast to  at  Thanks in advance for any insight you can provide. There are also not any compiler errors.  For future reference, try to construct a minimal test case. A lot of people who see that much code will just move on.  1 Answer 1  The root cause of this issue, as mentioned in the stack trace, is that you are trying to cast an object of type to something of type . I think that this occurs in this line:  So let's look at . This looks as follows:  So this is problematic - it looks like every time you try to do a lookup, you're just returning the key that you were trying to look up inside the map! That would explain the casting error - you're passing in a into , which then returns it. When you try casting it to a , you're getting an error because a isn't a .  To fix this, I think you need your method to actually do a search in the AVL tree and do a lookup. I will leave this for you to complete yourself. I would strongly suggest not trying to integrate your map into a larger program until you've tested it more thoroughly - having all of the logic to process words layered on top of a buggy AVL tree will make debugging extremely difficult, if not impossible. Try writing some unit tests for your AVL tree to see whether it's working. You could also consider swapping out your AVL tree map for a normal in the interim to see if the driver code works.  As another note - you should strongly consider not implementing the raw type and instead implement parameterized over a key and value type. This makes the interface way easier to use and would help catch the bug that you encountered.  339k9494 gold badges838838 silver badges10141014 bronze badges  1  The other two maps I used were Tree and Hash maps. This should get me going in the right direction. I also noticed you deleted the last line in my post. I understand a lot of people have problems with that, which is understandable. If you would like me to follow through, just lmk.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  