 char* vs std:string vs char[] in C++  In this article, we are going to inspect three different ways of initializing strings in C++ and discuss differences between them.  1. Using char*  Here, str is basically a pointer to the (const)string literal. Syntax:  Pros:  Only one pointer is required to refer to whole string. That shows this is memory efficient.  No need to declare the size of string beforehand.  Output:  Cons:  This works fine in C but writing in this form is a bad idea in C++. That’s why compiler shows warning of “deprecated conversion from string constant to ‘char*'” because in C string literals are arrays of char but in C++ they are constant array of char. Therefore use const keyword before char*.  We cannot modify the string at later stage in program. We can change str to point something else but cannot change value present at str. Refer storage-for-strings-in-c for more detail.  Here str is the object of std::string class which is an instantiation of the basic_string class template that uses char (i.e., bytes) as its character type.  Note: Do not use cstring or string.h functions when you are declaring string with std::string keyword because std::string strings are of basic_string class type and cstring strings are of const char* type. Pros: When dealing exclusively in C++ std:string is the best way to go because of better searching, replacement, and manipulation functions. Some of the useful std:string functions are discussed below.  Output:  Cases where you might prefer char* over std:string  When dealing with lower level access like talking to the OS, but usually, if you’re passing the string to the OS then std::string::c_str has it covered.  Compatibility with old C code (although std::string’s c_str() method handles most of this).  To conserve memory (std::string will likely have more overhead).  3. Using char[]  Syntax:  Pros:  We can modify the string at later stage in program.  Output:  Cons:  This is statically allocated sized array which consumes space in the stack.  We need to take the large size of array if we want to concatenate or manipulate with other strings since the size of string is fixed. We can use C++ standard library cstring or string.h for that purpose.  Output:  Here are couple of other useful functions of C++ standard library cstring.  Output :  This article is contributed by Kshitiz Gupta. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.  Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  