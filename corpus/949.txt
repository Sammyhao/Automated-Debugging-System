 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  And recently, I was able to check "custom metrics" using the pm2 monit command.  Here, information such as Heap size, used heap size, and active requests are shown.  I don't know how the heap size is determined. Actually, I checked pm2 running on different servers.  Each was set to 95mib / 55mib, and accordingly, the used heap size was different.  Also, is the heap usage closer to 100% the better?  While searching on "StackOverflow" to find related information, I saw the following article.  1 Answer 1  The heap is the RAM used by the program you're asking PM2 to manage and monitor. Heap space, in Javascript and similar language runtimes, is allocated when your program creates objects and released upon garbage collection. Your runtime asks your OS for more heap space whenever it needs it: when active allocations exceed the free space. So your heap size will probably grow as your program starts up. That's normal.  Most programs allocate and release lots of objects as they do their work, so you should not try to optimize the % usage of your heap. When your program is running at a steady state – that is, after it has started up — you'll find the % utilization creeping up until garbage collection happens, and then dropping back. For example, a nodejs/express web server allocates and objects for each incoming request, then uses them, then drops them so the garbage collector can reclaim their RAM.  If your allocated heap size keeps growing, over minutes or hours, you probably have a memory leak. That is a programming bug: a problem you should do your best to solve. You should look up how that works for your application language. Other than that, don't worry too much about heap usage.  Active requests count work being done via various asynchronous objects like file writers and TCP connections. Unless your program is very busy it stays near zero.  Keep an eye on loop delay if your program does computations. If it creeps up, some computation function is hogging Javascript.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  