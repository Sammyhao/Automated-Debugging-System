 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  To a list of points I am trying to find the nearest neighbours to each point based on distance. My dataset is too large to use a brute force approach so a KDtree seems best.  Rather than implement one from scratch I see that can find the nearest neighbours. Can this be used to find the nearest neighbours of each particle, i.e return a list?  Do you want to find nearest neighbor of each particle with sklearn method only or by any method?  Any' kdtree' based method will do, but this seems an attractive library due to the wide range of customisation!  4 Answers 4  This question is very broad and missing details. It's unclear what you did try, how your data looks like and what a nearest-neighbor is (identity?).  Assuming you are not interested in the identity (with distance 0), you can query the two nearest-neighbors and drop the first column. This is probably the easiest approach here.  @landogardner And that's where i'm not with you. Imho he asks for each nearest neighbor for each observation, based on distance! That's also one of the interpretations where his static output-dimension asked for works out.  You can use 's method, which returns a list of the indices of the nearest neighbours within some radius (as opposed to returning k nearest neighbours).  Outputs:  Note that each point includes itself in its list of nearest neighbours within the given radius. If you want to remove these identity points, the line computing can be changed to:  The sklearn should be the best. I wrote the below some time back ,where I needed custom distance. (I guess sklearn does not support custom distance fn 'KD tree' with custom distance metric . Adding for reference  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  