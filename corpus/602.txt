 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  first-time user and it seems from other posts to be a case-by-case basis. Well, I am a self-taught programmer of the C++ language. So, I finally learned about dynamically allocated memory and began thinking of new ways of programming a calculator using CLI to input a single string of text and pump out an answer. It seemed like a good jumping off point for the project and I began working on a solution. The following are my results:  I'm so so SO sorry if you read through all that, but I've been working on a second copy that's been boiled down and a lot less complicated, but I'd figure why this one stopped working all of a sudden. It was working for about 10-15 uses and the I used an input such as "2*3*4+2*3+2" and it returned "CORRUPTION HEAP DETECTED: after normal block #184". So my question is does anyone have any idea how I can debug this based off that error-message? If not, can anyone find why my code works for simple equations like 1+1 and 8*8, but not the long complex ones like I intended it to?  Remove all of those calls to and with . Once you do that, use the method of vector. Once you sort that out, then replace with .  Just looking at the code, the use of looks suspicious (you never really check its maximum value, and at least one loop starts it at value ), as it might exceed the bounds of the array it's indexing.  But it looks like you didn't learn where the appropriate places are to use it. For dynamic arrays, in modern C++, is used in place of and .  1 Answer 1  The subscript is out of bounds in the loop for the input of .  But here is the reason why I found the error quickly -- I replaced all of those calls to and with . Since you're using Visual Studio (the error is a VS error), the version does automatic checking for vector array bounds errors. The error box that shows up gives you a error, and thus the VS IDE goes right to the line where the violation occurs.  Now, the does not check bounds in a version, and in general is not supposed to do so. However the debugging libraries for VS turns on this check. So you can say I am taking advantage of what Visual Studio offers in terms of debugging help. But I was only afforded this once I changed to using .  The function serves the same purpose as using , but it gives you the range checking, regardless of whether you are running a release or debug version. I didn't replace the calls with here, but if for some reason didn't find the error, I could always change the to calls in the code until I get an error generated.  Here is a quick synopsis of the changes:  In addition, all of the calls to are no longer necessary.  Does this fix the error? No. I didn't want to check your algorithm/logic in trying to solve the equation. You still need to put in that effort to figure out what the purpose of that loop is, and why goes out of bounds. However it does show that merely using modern C++ techniques can be advantageous. Using and to create dynamic arrays is "old fashioned" and really not necessary, unless you really do need to use it.  Basically, you need to ask yourself -- are you trying to code an equation solver? If the answer is "yes", then use the tools available to create one (such as ) and move on with solving "easy" bugs, instead of fighting with using pointers and putting in a lot of effort in maintaining dynamic arrays correctly.  32.6k44 gold badges2222 silver badges4141 bronze badges  1  Holy Moly. This was. Wow. I thought pointer arrays using new[] and delete[] were the only way, but this vector stuff seems SO much easier to dynamically allocate memory! Thank you so much man. Since I'm new to the site, is there any way I can thank you by giving you a good rating or something, man? PS. Upon reorganizing my program and optimizing it, I was able to keep j in bounds, but the vector thing makes things easier to read and debug :)  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  