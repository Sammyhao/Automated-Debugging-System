 Design a stack that supports getMin() in O(1) time and O(1) extra space  Question: Design a Data Structure SpecialStack that supports all the stack operations like push(), pop(), isEmpty(), isFull() and an additional operation getMin() which should return minimum element from the SpecialStack. All these operations of SpecialStack must be O(1). To implement SpecialStack, you should only use standard Stack data structure and no other data structure like arrays, list, .. etc. Example:  An approach that uses O(1) time and O(n) extra space is discussed here. In this article, a new approach is discussed that supports minimum with O(1) extra space. We define a variable minEle that stores the current minimum element in the stack. Now the interesting part is, how to handle the case when minimum element is removed. To handle this, we push “2x – minEle” into the stack instead of x so that previous minimum element can be retrieved using current minEle and its value stored in stack. Below are detailed steps and explanation of working. Push(x) : Inserts x at the top of stack.  If stack is empty, insert x into the stack and make minEle equal to x.  If stack is not empty, compare x with minEle. Two cases arise:  If x is greater than or equal to minEle, simply insert x.  If x is less than minEle, insert (2*x – minEle) into the stack and make minEle equal to x. For example, let previous minEle was 3. Now we want to insert 2. We update minEle as 2 and insert 2*2 – 3 = 1 into the stack.  Pop() : Removes an element from top of stack.  Remove element from top. Let the removed element be y. Two cases arise:  If y is greater than or equal to minEle, the minimum element in the stack is still minEle.  If y is less than minEle, the minimum element now becomes (2*minEle – y), so update (minEle = 2*minEle – y). This is where we retrieve previous minimum from current minimum and its value in stack. For example, let the element to be removed be 1 and minEle be 2. We remove 1 and update minEle as 2*2 – 1 = 3.  Important Points:  Stack doesn’t hold actual value of an element if it is minimum so far.  Actual minimum element is always stored in minEle  Illustration  Push(x)  Number to be Inserted: 3, Stack is empty, so insert 3 into stack and minEle = 3.  Number to be Inserted: 5, Stack is not empty, 5> minEle, insert 5 into stack and minEle = 3.  Number to be Inserted: 2, Stack is not empty, 2< minEle, insert (2*2-3 = 1) into stack and minEle = 2.  Number to be Inserted: 1, Stack is not empty, 1< minEle, insert (2*1-2 = 0) into stack and minEle = 1.  Number to be Inserted: 1, Stack is not empty, 1 = minEle, insert 1 into stack and minEle = 1.  Number to be Inserted: -1, Stack is not empty, -1 < minEle, insert (2*-1 – 1 = -3) into stack and minEle = -1.  Pop()  Initially the minimum element minEle in the stack is -1.  Number removed: -3, Since -3 is less than the minimum element the original number being removed is minEle which is -1, and the new minEle = 2*-1 – (-3) = 1  Number removed: 1, 1 == minEle, so number removed is 1 and minEle is still equal to 1.  Number removed: 0, 0< minEle, original number is minEle which is 1 and new minEle = 2*1 – 0 = 2.  Number removed: 1, 1< minEle, original number is minEle which is 2 and new minEle = 2*2 – 1 = 3.  Number removed: 5, 5> minEle, original number is 5 and minEle is still 3  C++  Java  Python 3  C#  Output  Output:  How does this approach work? When element to be inserted is less than minEle, we insert “2x – minEle”. The important thing to notes is, 2x – minEle will always be less than x (proved below), i.e., new minEle and while popping out this element we will see that something unusual has happened as the popped element is less than the minEle. So we will be updating minEle.  While popping out, if we find the element(y) less than the current minEle, we find the new minEle = 2*minEle – y.  Exercise: Similar approach can be used to find the maximum element as well. Implement a stack that supports getMax() in O(1) time and constant extra space. This article is contributed by Nikhil Tekwani. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.  Approach 2:  create a class node which has two variables val and min. val will store the actual value that we are going to insert in stack ,where as min will store the min value so far seen upto that node. look into the code for better understanding.  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  