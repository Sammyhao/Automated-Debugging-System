 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  Can anyone point out a way of getting the depth of a Node in a Binary Tree (not a balanced one, or BST) without using recursion? Ideally in Java/C/C#  The node is represented as:  Using Level Order with a FIFO list was my first thought, but I was stumped at detecting when the level changes, particular for unbalanced trees.  63.2k4949 gold badges217217 silver badges238238 bronze badges  5  Recursion has to be the easiest way to do this, what's the reason you want to avoid it?  Kirschstein: There are reasons to avoid recursive calls on platforms with limited resources (e.g. embedded systems). A non recursive algorithm with a constant memory foot print is often necessary.  The recursion posts I've read on SO give the advice that recursion should be used for a max of 10 levels. 10 levels in a complete tree is 1024 items so I'm curious how you'd do it for more than that (which I assume other trees based on the Binary Tree would use, albeit always balanced)  4 Answers 4  You can implement any resursive method with a stack, which is how resursion works anyways. Imagine your resursive function looks like  +1 for the answer. There has to be a better way to get the depth without requiring each node to have a Depth property though, right?  @RepoMan yes. You can change the recursive function to function int getDepth (Node head, string val, int depth). Pass in depth+1 to the recursive calls.  I assume you mean filling in the Depth value on node, and/or finding max depth. One way to do this would be using two lists, and doing the level order as suggested. It'd be akin to:  Basically, you enumerate each node on a given level, then find each node on the next level; until you run out of nodes/levels. Clearly, List could be replaced with just about any list like data structure (Linked List, Queue, etc). And the last value of 'level' would be max depth + 1. I suspect.  One other clarification based on re reading of the question; if you are searching for a node with a specific value, and want to find its depth, you would change the foreach loop to include 'if(node.Value==searchValue) return level;'. And, technically, if you are searching for a specific value, you shouldn't be doing a Level Order Traversal, but rather a search for the value using relevant Binary Tree properties (e.g. val < currentNode.Value goto left else goto right), and tracking your depth. If you are given only the Node and want to find its depth, you would either need to perform a binary search for the node from root, or you would need to track the Node's parent.  Here's a simpler solution, I think. If the data structure allowed for an arbitrary number of children, this solution could be easily modified for that case too:  Here is the most efficient solution I've come up with (C++). The trick is to use a second queue to store the children of all nodes at your current level. This will work for balanced and unbalanced binary trees.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  