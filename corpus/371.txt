 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I have been trying to implement the delete BST function but I don't know why it is not working, I think it's logically correct. Can any body please tell me, why I'm getting run time error and how should I correct it.  All the other functions are working correctly, you just need to check the function, the other code is provided to give the idea of the structure of my BST.  34322 gold badges44 silver badges1313 bronze badges  1  Please tick some answers. It's not just for the points (who's here for that, anyway...??), but it's a way for someone with the same problem to go directly to the right solution.  7 Answers 7  you are accessing root variable after you have deleted it  Also you call  pre_display after deleting tree. delete_tree after deleting the tree should also set the BST.head to NULL  Also a critique. BST is of type tree. It already has a head member variable indicating the root node. So delete_tree/pre_display do not need any parameters at all.  23.4k11 gold badge5252 silver badges8282 bronze badges  3  Can i add the implementation of assigning null to the head in the function of delete_tree  Change delete_tree not to have any args. Have a private iDeleteInternal which does the recursive calls. So delete_tree calls iDeleteInternal and then set head to NULL before returning  But if i will do it, as you have said previously to delete after making pointers null, does'nt it mean that i'am losing the position of allocated memory and then iam deleting the null pointer?  which was already deleted. There's no need to do that since you're already freeing the memory in  Recursively delete left and right sub tree and your tree will be deleted as simple as:  Thanks for this answer. I revised it because it actually didn't work, but it helped me get started.  76.1k2323 gold badges140140 silver badges179179 bronze badges  2  But if i will do it, what you have said, it does'nt mean that i'am losing the position of allocated memory and then iam deleting the null pointer?  You should also remove the lines that are setting things to NULL in that function. There is no need to write to memory which is about to get deleted.  Short answer: your implementation of the node descriptor missing the correct explicit destructor implementation (the default generated by the compiler will be used by calling the delete operator:calling destructor and releasing the allocated space on the heap)-the one that clear references to the siblings  While this code snippet may solve the question, including an explanation of how and why this solves the problem would really help to improve the quality of your post. Remember that you are answering the question for readers in the future, not just the person asking now! Please edit your answer to add explanation, and give an indication of what limitations and assumptions apply.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  