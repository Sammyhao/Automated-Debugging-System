 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I'm trying to insert some value pairs into a std::map. In the first case, I receive a pointer to the map, dereference it and use the subscript operator to assign a value. i.e.  Later, when I try to iterate over the collection, I'm returned key/value pairs which contain null for the value attribute in all cases except for the first (map.begin()) item. The weird thing is, if I do the insertion via the map's insert function, everything is well, i.e:  Why would this be? Aren't the two methods functionally equivalent? I've pasted some snippets of actual code below for context  I'm all out of ideas. Does anyone have a suggestion please?  3 Answers 3  This will not assign tmp into the map, but will instead reference into the map creating an empty value (see @Neil Butterworth) - you have == instead of =. What you want is:  11.4k44 gold badges4343 silver badges6767 bronze badges  3  I was aware of the other behaviour of operator[] but I can't believe that I missed using "==" instead of "="! Thank you Simon.  Can't count how many times I've made the same mistake - it's normally easier to spot!  You should be aware that operator[] for std::map will insert a value into the map if one does not exist when used in expressions like this:  If the value x does not exist, one will be created and assigned the value created by the value types default constructor, or zero for the built-in types. This is almost never what you want, and you should generally avoid the use of operator[] with maps.  Take a look at this reference. The [] operator returns a non-const reference to the value. If your assignment is wrong or somehow works in an unexpected way this might be the cause.  The insert method on the other hand takes a value and stuffs it into the map. The [] operator constructs an object with the default constructor, then let's you assign stuff to it using it's assignment operator.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  