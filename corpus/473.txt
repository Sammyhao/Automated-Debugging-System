 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I'm developing an algorithm to find all the paths in an undirected, not weighted graph. I'm currently using a DFS algortihm with backtracking to try and do that. Here is my current code:  The program receives integers on his input. The first one is the number of nodes, the second one is the number of links and the third is the start node and end note, which are the same. All the integers that come after represent the connections between nodes.  The problem is, this algorithm is finding all the paths that visit a single node only once. What i want is the algorithm to find all the paths that visit each connection only once. Any idea on how i can do that?  1,27933 gold badges3131 silver badges5757 bronze badges  2  How is the connection between nodes represented as an integer? I don't quite understand.  An example, the program receives "1 2 3 3 4 5 6" 1 is the number of nodes, 2 is the number of links, 3 is the starting node, 3 4 is a connection from node 3 to node 4 and 5 6 is a connection from node 5 to 6.  1 Answer 1  You are on the right track - backtracking is a neat way to solve it.  To get all paths that "uses the same edge only once": after you use an edge in - delete it from the set of edges [delete the connection from the of each vertex of this edge] - and invoke recursively.  After you return from the recursion - don't forget to "clean up the environment" and add this edge back to both vertices.  You will need to make sure you don't run into troubles of iterating collection while modifying it. [You cannot do it - the result of doing so is unexpected] - so you will probably need to send a copy of the s [without the relevant edge] - and not the original one.  170k2525 gold badges218218 silver badges320320 bronze badges  3  @CláudioRibeiro: Have a look at the constructor LinkedHashSet(Collection) using it - you can greate a copy of the original set, and delete elements from the copy.  Looking at my code, isn't there any other way to let the program repeat the nodes he already visited? Only stoping the search when he reaches the starting node and the list of visited nodes is equal to the number of connections given by the input. I'm really having trouble getting the hashsets to do what i want...  @CláudioRibeiro: You can maintain a set for edges - and add an element before you recursively call , and remove it from there after the recursive call. You will need to make sure you don't "reuse" a 'visited' edge in your for loop: [add some condition there to make sure an edge you use is not visited yet]  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  