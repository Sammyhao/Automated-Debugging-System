 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I want to make a tree structure that takes in strings and displays everything in the tree. Please note that the purpose here is not to make a binary search tree or anything related to binary tress, rather it will be modelled on the the basis of: the first string entered is the "root", the second string is a parent, and the third is a child of the parent node. Please see illustration. The number of parent nodes can be however many.  Basically, I would like some ideas on how to approach this. I'm familiar with how a binary tree is coded and how it works, but this one seems a lot more different to implement.  binary trees are supposed to have only two child nodes at most, this one can have however many from a parent.  2 Answers 2  In your case, it is a simple tree composed of a collection of nodes (multiple children), where each child has some associated data and a set of children. With this in mind, lets have a type called which will act as a building block of our tree. And try to abstract out as base Node class that can be extended to meet the needs of a tree node through inheritance.  Note: I am going to make it generic to be able to store any type though you wanted to store 'String'.  The class contains a strongly-typed collection of instances.This class is derived from the in order to have a strong-typed collection, with methods like , and etc. Important thing to notice here is that, the arbitrary ('n') number of nodes can be added through the constructor that creates a specified number of nodes in the collection, and a method that searches the collection for an element of a particular value.  Finally, we left out with joining all what we discussed.  4,57244 gold badges2727 silver badges4343 bronze badges  4  Is the NodeList class another term for a linked list of nodes? I ask because I am not supposed to use anything other than the System class. Also, why the inheritance?  NodeList is intended for the connectivity 0..* children. I use collection since you can abstract lot of standard operation such as Add(T), Remove(T), and Clear(). These methods are automatically available when you inherit from Collection<T> which is part of generic collection namespace. Now if you have any limitation then you can remove the inherited dependency of Collection<T> and use an array within NodeList class and explicitly expose methods such Add/Remove/Clear (if you want), which essentially act on the array.  @KarimOumghar, Just wondering how comfortable you are with the solution. Was it helpful?  Yes, I'm considering this idea, theres a lot of ways to represent something like this, might as well use something similar.  There are no built in classes in .NET for manipulating tree structures and the simple reason is that there are too many variations.  I’d suggest you make your own class that would represent binary tree. Take a look at these threads for more details.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  