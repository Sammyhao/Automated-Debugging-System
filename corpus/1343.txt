 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  This class represents a node in a tree. I have chained its instances to produce a tree that looks like this:  This can also be represented like a graph by using a dictionary:  I assume that the first element in the list is the left node and the second element is the right node.  However, all the blogs and books I came across use a class for tree and a dictionary for graph. I was just curious to know the reason for the same.  2 Answers 2  When you have a tree, you usually only want to keep track of the root node (random access of nodes is not required). This type of data structure is convenient when every node has a fixed number of children for example: BST, Segment trees, Binary heap, Trie etc.  When you have a graph, you usually want to be able to access any node randomly which is not possible using a linked list like structure. So you are better off using an adjacency list.  What is the difference between using a class and a dictionary to represent a binary tree in Python?  In terms of semantics there really isn't a big difference. The main difference lies in the usability of each method.  As you observed already, both a dictionary and objects can be used to represent a binary tree. However, using objects provides a much more convenient and readable interface for a binary tree.  Why? Let's look at an example. Suppose you had the binary tree:  Alright great. Now let's say we want to accesses the right node of the root of the tree. With the dictionary, that'd look something like:  With objects that would be:  Okay, now let's say we want to get the right node, of the right node, of the root of the binary tree. In other words, . Again, this is how that would look using the dictionary:  With the objects that would be:  Are you starting to see what I mean? Sure using a dictionary may have looked okay for a small binary tree with several nodes, but the bigger the tree gets and the deeper you have to go, the uglier and more unreadable using the dictionary approach becomes.  The dictionary approach becomes even worse when you want to start doing things like inserting and deleting in your binary tree. Doing such operations require you to have a well defined root node. This is cumbersome to emulate using a dictionary because it has no set order - unlike the hierarchical structure using objects:  The readability of the above methods would be much cleaner by using named attributes such as , , and .  So, to summarize, what's the difference between using a class and a dictionary to represent a binary tree? The difference lies in the readability, usability, maintainability, and structure of your code. Want my advice? In the end, using a class over a dictionary is the right choice.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  