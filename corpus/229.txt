 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I want to know an easy way to obtain a (Map + min-Heap) data structure in C++  I tried this:  now the problem I face is with re-initialisation since it is in we can't just simply initialise like we do with . The only way to insert element is  I have also tried to use simple maps instead of using it with but the problem again is when I try to find the minimum element using it returns the value instead of the key which is also required here.  Please suggest the fastest possible way to execute the problem. I also believe that there are ways possible beyond my knowledge.  The second parameter of "must satisfy the requirements of SequenceContainer, and its iterators must satisfy the requirements of RandomAccessIterator. Additionally, it must provide the following functions with the usual semantics: front() push_back() pop_back()" --en.cppreference.com/w/cpp/container/priority_queue . meets none of these requirements.  If you're doing dijkstra then you do want a min-heap (priority_queue). That cannot be done with a map. Let it use the default underlying type (vector).  And observe that though it is not a priority queue, a regular (ordered) map enforces the heap invariant and its minimum can be obtained using  I don't really understand what you are trying to achieve though. A regular priority queue is enough for Dijkstra, how do you want to optimize it?  2 Answers 2  No, you cannot index elements in a priority queue to change the values. You either have to implement the whole priority queue yourself with the operation (which can be very optimised by the way), or do some other workaround.  I have implemented a priority queue with operation for Prim's algorithm to calculate Minimum Spanning Trees. If you want to implement the priority queue then you can check my answer here or for some other workarounds check Gassa's answer here.  If you review the first comment, and follow the link to the documentation of priority_queue, then you have all the tools you need.  Let's suppose you already have an edge defined somewhere. Let's say  You need a heap, which according to the docs should be based on vector or deque. I usually prefer vector, but I put deque here just for fun. The docs say use std::greater if you want a min-heap, therefore you also must implement edge::operator>  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  