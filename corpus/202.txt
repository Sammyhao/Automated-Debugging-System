 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I'm trying to build a graph class where the graph is represented by adjacency lists. The graph itself is a vector of pointers where each pointer points to a linked list of nodes. For whatever reason, when I use the print graph function the program outputs nothing. Can anyone show me what I am doing wrong and perhaps where my misunderstanding of pointers is? Thanks in advance!  once the scope ends the no longer exists and you have a dangling pointer. You can not store the address of a local variable in a structure that exists longer than the local variable.  In fact, anything is always true. There's no expression whose address might be null.  I will re-evaluate my code more carefully. You most likley for this assignment have to use Node* and instead of Node and &someLocal variable.  With you create a pointer to memory where you control its duration instead of a local variable that goes out of scope.  2 Answers 2  If it´s possible, you may just use vector of vector instead of linked lists and not use pointers at all. Because memory cache some insertions in vectors operations may be faster than linked lists, a structure like :  Thanks! The linked list implementation will end up with less memory complexity though right?  Assyntoticly speaking, no, it stil O(n) in the number of edges. Pratically well, depends, but mostly no also. The size of each Node2 is smaller then Node, and all of them are concatenated inside a vecor, so the only possible point of less memory efficiency is the spare capacity of the vecor itself, so you may use shrink_to_fit().  That makes sense. Though I thought the indexing/iterability of the vector adds to the memory requirement, but I'm probably confusing them with python lists.  Made these changes thanks to @drescherjm. The issue was that I had created a local variable and referenced its address instead of explicitly creating a pointer and setting it to a node instance where the object's lifetime is dynamically controlled.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  