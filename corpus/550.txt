 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I need to make, for my college homework, an interpreter in C++ for a language based on functions (or commands). The interpreter has got to read an input file, extract the words (strings), generate the commands and execute them. All commands are classes which inherit from a common super-class (, for example), which's got a virtual method called . For each word read from the input file, a command is created and stored in a .  So, I'm thinking of using a hashtable, whose keys are the names of the commands (strings) and whose values are some kind of objects which allow me to create an specific class (or give me access to the constructor of an specific class), to easily create the classes for each word instead of using a chain of if-else-if's.  By now, I'm planning to create a class with a virtual method called which returns a new object. The values of my commands hash table will be objects of the class. So I derive from it many other subclasses for all commands, which return specific new objects derived from .  But, does anything like that already exist? Or is there any more elegant way to do that? Is there any kind of object that can be extracted from a class to represent it?  2 Answers 2  If each command is a subclass of , why don't you use a and push pointers to instances of each subclass? Then you can iterate over the vector and call your virtual function.  The closest thing you can get about placing classes in a vector is . But can't be filled at runtime, no use on your specific case.  Assuming you can use C++11. If you can define commands as just a function, you can do something like:  And then put the command on a vector with:  Then just execute with a loop:  This should print to screen. But if you care a lot with speed, do a lot of ifs instead.  "If each command is a subclass of Command, why don't you use a std::vector<Command*> and push pointers to instances of each subclass? Then you can iterate over the vector and call your virtual execute function." Ok. That's what I'm gonna do with the just-created objects: push them to a vector and iterate over the vector, calling . But my problem has to do with generate these objects according to the names read from the files without using if-else-if for each name.  A lot better, man! Do you have a link to any reference, because by typing "c++ function<>" on google, I can only find the concept of functions or function declarations in c++...  The basic problem you have is: You have the name of the class as a string and want to create a class with that name. This translation you have to do somehow manually, like you mentioned. This has been discussed here several times, like in Instantiating classes by name with factory pattern or in Looking for a better C++ class factory. The only addition I would make here: use good old macros, because they have a stringize-operator. E.g.:  of course you can make it nicer by using a hash-table containing the strings and some function-pointer or generator-class pointer, but the idea remains the same: to add a new class, just add one more CREATEOBJ-thingy.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  