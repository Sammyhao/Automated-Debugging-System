 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  UPDATE - The main problem was solved by a replier below (I had a '=' where I should have had a '=='), but now I am getting the wrong output. I thought I would provide some input/output examples as suggested so maybe someone out there can spot where I'm going wrong.  Say I enter the input:  This should produce the output:  to signify x got to the most right spot of the 3rd row in 4 moves, and x had to be moved right each move.  Instead, I get the output:  In the code below, the program accepts a 6x6 block of characters to represent the game board. (periods are empty spaces, characters represent cars.) The work done in the board class and main function are correct, as I had it verified with my professor. However, I am trying to correct my output. I know my logic used in the solve function isn't the best approach for this, but I have to try and make it work so I can get points back without copying the professor's solution.  Ok. Yes. That helped immensely. lol. Can't believe I'm that big of an idiot, but I guess it always helps to have someone spot mistakes like that. Thank you. Of course that solved the -1 problem, but now I'm getting straight up wrong answers. For instance, when I enter the grid with just two x's on the front of the 3rd row, the output should read "4" (it should take 4 moves to get x to spot 17) and "x r x r x r x r". Instead it reads 3 moves, and "x r x l x r"  1 Answer 1  It is difficult to figure out what you are trying to do here because many values are hard-coded and there is not a lot of abstraction used in the program.  However, this is not a solution to the input problem.  It does not look like you are computing the next states correctly. There should be a loop to iterate over each piece of a vehicle after a vehicle is moved.  Definitely try abstracting more details. For example, perhaps you can add methods to for (1) computing a list of valid moves and (2) applying a single move, returning a new . Also, if you haven't learned how to use a debugger such as , now would be an excellent time to start learning. See How do I use the MinGW gdb debugger to debug a C++ program in Windows?  36.6k1717 gold badges109109 silver badges187187 bronze badges  2  You are correct, and I do apologize for the sloppy code. I guess I will trace the solve function to see where I went wrong. Thank you for your great suggestions.  @TheRationalist: By the way, there is an excellent free course from BerkeleyX (part of edX) on artificial intelligence: CS188.1x: Artificial Intelligence. The course has ended, but you can still register and learn the material. The first week is on search algorithms BFS, DFS, uniform cost, and A*. If you complete the first programming project, you will see a great example of abstracting away details in search problems.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  