 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I can't decide whether or not to use a bfs or dfs in these two situations  situation1: the graph is unbalanced undirected edge weighted tree with height 40 and minimal depth to any leaf node of 38. What is the best algorithm to find the minimal edge cost from root to any leaf  situation2: the graph is a max heap which algorithm is the best to find the maximum key value within each level of the heap.  For situation 1 I'm thinking DFS because you don't have to go through all of the branches to find the smallest one, the second a branch is bigger than the comparison you stop.  for situation 2 I'm thinking BFS because a BFS gets all the nodes from each level at once, and is better for comparison..  Do you not mention Dijkstra (for situation 1) for a particular reason ? It adds a logarithmic overhead, but could be efficient to avoid bad branches if the case is very unbalanced.  1 Answer 1  I am assuming that you only have a pointer to the root of the tree/heap to start off with in both cases.  The worst case time complexity for both situations regardless of whether you use BFS or DFS is , where is the number of nodes. Thus any optimizations that you may be able to come up with would be "on average" optimizations.  You are correct that DFS is likely to perform better than BFS for situation 1 for the exact reason that you have given.  For situation 2, however, DFS is no slower than BFS (in theory at least) because you can simply store each node at their corresponding levels and them compare all nodes in each level later. For space complexity, however, BFS would be better, because once a level is done and you move onto the next, you don't have to store any of the parent nodes. For this reason BFS can be recommended for situation 2.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  