 Customized Debugging in Sublime Text using C++ for Competitive Programming  Competitive Programming is a mental sport that enables us to code a given problem under provided constraints. The purpose of this article is to guide every individual on how they can debug their code efficiently during a contest.  Time is something that is precious and it matters a lot during a coding contest. When writing a code, errors do come and programmers often tend to spend a lot of time debugging it. Often programmers deal with complex data structures during a contest and it is required to debug them in the given time constraint.  This article focuses on how to debug C++ source code efficiently in Sublime Text (IDE) during a contest and save time. First of all, it is required to set up the file structure of our Sublime Text. Below are the steps to set up the file structure of Sublime Text.  Step 1: Open the Sublime Text and follow the below steps:  1. Create three files:  file.cpp: The file to write the code.  inputf.txt: The file where we will be giving the input.  outputf.txt: The file where the output will be displayed.  2. Now, perform the following steps:  Select View > Layout > Columns: 3. This will create three columns in the workspace. Move the three files into three columns.  Select View > Groups > Max Columns : 2 : input.txt and output.txt will get stacked in a single column.  Your Sublime Text would look similar to this:  Sublime Text  Step 2: Create a local function outside the main function. It is used to take input from the input.txt file and display output in the output.txt file. Below is the C++ code snippet for the same.  C++  Step 3: Call from the main function:  By combining the above steps our complete program would be:  C++  Step 4: Now the IDE would look similar to this:  Sublime Text  Debugging using print function:  Create a print function in our program whenever we need to print a variable or any data structure like vector, set, map, etc. Below is the C++ program to implement the same approach:  C++  Suppose something went wrong in our logic due to which desired output is not obtained during a contest and hence to check the status of vector after the first operation, one can create a print function outside the main function which accepts a vector.  C++  Whenever there is a need to check the vector elements one can call the print() function by passing the vector as an argument to the print function.  Below is the complete C++ program to illustrate how to implement the above concept:  C++  Output  Disadvantages of this method:  For the same data structure but having different data types there is a need to create multiple print functions. For example, there is a vector of integer type and a vector of string type, then in order to print elements, it is required to create two print functions outside the main function. One print function will accept a vector of integer type and another print function will accept a vector of string type.  Contents of the vector would be printed along with the desired values in the same output.txt file which might be confusing for us.  There is a need to comment statements that are used to call a print function from the main function, before eventually submitting the source code file to the online judge (Codeforces, Spoj, Codechef, etc).  Debugging using template:  In the above method, the data type of vector is hardcoded. The template can be used in C++. A template is a simple and yet very powerful tool in C++. The simple idea is to pass data type as a parameter so that there is no need to write the same code (print function) for different data types. Below is the C++ code snippet for the template:  C++  Below is the complete C++ program to illustrate the above concept:  C++  Output  A similar thing can be done with any data structure like a set, multiset, pairs, etc. Below is the implementation using the set:  C++  Output  Disadvantages of this method:  The above method is not very efficient as each time before submitting the program there is a need to comment print statements inside the main function.  Elements of the data structure would be printed along with other desired values in the same output.txt file which might be confusing for us.  Debugging using cerr:  The idea is to use the combination of cerr (error stream) and file handling in the program. Create a separate file (error.txt) and use cerr stream instead of cout stream. Finally, with the help of file handling, print the status of data structure in the error.txt file.  Step 1: Firstly add the following snippets outside the main function:  To print a variable we can create a print function with a template definition just above the function:  C++  To print vector elements we can create a print function with a template definition just above the function:  C++  To print set elements arranged in non-descending order we can create a print function with a template definition just above the function:  C++  To print set elements arranged in non-ascending order we can create a print function with a template definition just above the function:  C++  To print unordered set elements, we can create a print function with a template definition just above the function:  C++  To print map elements, we can create a print function with a template definition just above the function:  C++  To print unordered map elements, we can create a print function with a template definition just above the function:  C++  To print multiset elements arranged in non-descending order, we can create a print function with a template definition just above the function:  C++  To print multiset elements, arranged in non-ascending order we can create a print function with a template definition just above the function:  C++  To print unordered set elements, we can create a print function with a template definition just above the function:  C++  To print vector of vectors elements, we can create a print function with a template definition just above the function:  C++  To print a pair of elements, we can create a print function with a template definition just above the function:  C++  To print a pair of vectors elements, we can create a print function with a template definition just above the function:  C++  Step 2: Create one more new file (error.txt) and make sure it is in the same folder.  error.txt file: All the elements of the data structures that we have mentioned in the above snippets would be printed in this text file only without affecting the output.txt file.  Note that we want to write in this file using error stream (cerr). Again help from ifndef and endif preprocessor directives can be taken.  C++  After adding the above lines in our local function, the complete function becomes:  C++  Step 3: Also, we donâ€™t want to comment debug(data_structure) statements while submitting the source code file to online judges. In simple words, there is a need to figure out a way so that debug functions will work for the sublime text (IDE) but they would be skipped/ignored for online judges. Again, this can be achieved by using ifndef and endif preprocessor directives again in the source code.  C++  Now the IDE would look similar to this:  Step 4: Whenever there is a need to check the status of any data structure, the following call can be made:  Step 5: Below is the implementation of the above method:  Example 1:  C++  C++  input.txt file  output.txt file  error.txt file  Now there is no need to comment on each of the debug statements in the program before submitting the source code file to online judges.  The data structure or STL elements would be printed in a separate file (error.txt) and desired output values would be printed in the output.txt file, making it more readable.  In a nutshell, this can save a lot of time during a coding contest.  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  