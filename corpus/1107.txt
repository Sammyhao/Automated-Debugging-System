 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I am stuck on a question and cannot figure out why i am getting runtime error heap use after free.I read about it that when we free some memory then acess it with the pointer this error may arise but here in my code i am not freeing anything so why does this error arise. Let me explain i have a linked list of 3 nodes 0->2->1->NULL. At present my pointer named second is pointing to 2 and i just want to change the link 1->2. Now when i assign pre=NULL,cur=second->next this works correctly and runs successfully but when i do pre=second and cur=second->next it gives this runtime error.I mean i dont care that 2 should point to NULL let 2 point to 1 but i want that my 1 should point to 2. Here is the code:This gives runtime error While in my local compiler it is running succesfully.As this question is of leetcode and in leetcode i cannot see main function.  here is the correct code with only change as pre=NULL,cur=second.By the way in next iteration pre will become second and cur will become second->next,which is same as above solution which gives runtime.  Comments are not for extended discussion or debugging sessions; this conversation has been moved to chat. If you are asked for additional information, please do not reply in comments. Instead, simply edit your question.  2 Answers 2  After a long chat, we found that he was changing and breaking the links in the original linked list causing the free code to fail after completing. I advised him to be sure to either return data to original form or at least make it so that every node in the list could be visited when complete.  I guess you're solving 234. If that'd be the case, then this'll pass:  Not sure about your bug though!  References  For additional details, you can see the Discussion Board. There are plenty of accepted solutions with a variety of languages and explanations, efficient algorithms, as well as asymptotic time/space complexity analysis1, 2 in there.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  