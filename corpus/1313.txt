 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I want to implement adjacency list for graph using unordered_map. Selecting unordered_map because it can give me O(1) time to access neighboring vertices by a given vertex. So my idea is to define the unordered_map as below:  I use the pointer of class node as the key of unordered_map because using node object directly would require a customized std::hash implementation. The major issue of using pointer is memory management. I need to free the allocated memory explicitly.  Can unique_ptr be used here to ease the memory managment? or any better solution to suggest ?  @n.m.: you would still need an adjacency map (probably) because edges link two vertices (unless you accept duplication, but it has its own issues).  2 Answers 2  Ownership policy is indeed an issue, you have a few possibilities:  if a clear owner exists, is the best choice (see this example)  if there are multiple possible owners, you can either break the symmetry and introduce one or defer to (beware of cycles)  Breaking the symmetry can be as simple as introducing a that will contain the nodes and take pointers inside that container. Likewise, a would solve the ownership issue for the edges.  262k4141 gold badges398398 silver badges665665 bronze badges  3  "beware of cycles". That's right, in an arbitrary graph supplies most of the raw pointer safety combined with all of the the reference-counting performance.  @n.m.: It depends what it's used for. Since edges have no reason to point to other edges, could be an apt container. If edges start pointing to nodes and nodes to edges, then indeed you have a cycle forming. It all boils down to how wisely they are used, in the end.  Well, if edges and nodes do not point to each other somehow, how do you traverse the graph? Some of these pointers should not be shared_ptrs, that's all. They may be weak pointers, raw pointers, or entries in a map.  In a recent program, in my Graph class,I created a new data type called Map which I defined as:  typedef unordered_map, VertexHash, VertexEquals> Map  where Vertex objects are nodes; Edges objects are an origin Vertex, destination Vertex and double distance; VertexHash is a class or struct with an overloaded ( ) to hash Vertex objects ; and VertexEquals is a class or stuct which determines if two Verrte. Objects are equal used the overloaded ==. Each Graph object has a vector which holds a list of Vertex objects and and a Map variable which holds the graph data.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  