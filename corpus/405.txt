 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  Now i want to map object to this using . Automapper maps properties of objects but in my case there a dictionary and object.  6 Answers 6  AutoMapper maps between properties of objects and is not supposed to operate in such scenarios. In this case you need Reflection magic. You could cheat by an intermediate serialization:  And if you insist on using AutoMapper you could for example do something along the lines of:  and then:  If you need to handle more complex object hierarchies with sub-objects you must ask yourself the following question: Is the correct data structure to use in this case?  982k260260 gold badges32243224 silver badges28912891 bronze badges  3  Very good solution, especially if you're using conditionally parsing JSON objects into strong types (such that, say a 'TypeOf' property in a JSON item could fall into one or more object types).  @Darin using your approach, running into this issue (for solely using first approach): 'System.Collections.Generic.Dictionary2+KeyCollection[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, .....,[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]' is not supported for serialization/deserialization of a dictionary, keys must be strings or objects.  The solution given by @marcos-jonatan-suriani (below, on Aug 30 '19) is 'native', simpler and updated.  This thread is a bit old, but nowadays there's how to do it on automapper without any configuration, as stated at official documentation:  AutoMapper can map to/from dynamic objects without any explicit configuration (...) Similarly you can map straight from Dictionary to objects, AutoMapper will line up the keys with property names.  Update:  The following code shows a working sample (with unit tests).  While the docs state that it should work by default, running a somewhat simple test scenario reveals that this is no the case. This will result in a runtime exception:  The AutoMapper documentation is just fine. I've just updated my original answer to provide a complete example with unit tests to ensure code works fine too.  As I've just stumbled upon this question I'd like to add this answer possible with the current version of AutoMapper (even if the original question is already pretty old):  AutoMapper is quite a flexible solution. You could probably achieve this using a custom mapping profile, e.g.:  With this, I can create a custom instance of a mapper:  It's built in if your property names are same, what if they are different or if someone need to map one property in dictionary to another, in that case this type of mappers will help. And in case of writing Unit Test cases while mocking the return response, you need to use this kind of mappers to map the data moq response with the actual class object as your data will don't map automatically.  Yes, but that's not the question here. And in unit tests you should use the exact same mapper/code. So I'm not sure what you're saying.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  