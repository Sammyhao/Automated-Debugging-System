 Input: N = 3, arr[] = {1, 0, 2} Output: 3 Explanation: Total number of subarrays are 6 i.e., {1}, {0}, {2}, {1, 0}, {0, 2}, {1, 0, 2}. Out of 6 only three subarrays have the number of elements equals to sum of its elements i.e., 1) {1}, sum = 1, length = 1. 2) {0, 2}, sum = 2, length = 2. 3) {1, 0, 2}, sum = 3, length = 3.  Input: N = 3, arr[] = {1, 1, 0} Output: 3 Explanation: Total number of subarrays are 6 i.e. {1}, {1}, {0}, {1, 1}, {1, 0}, {1, 1, 0}. Out of 6 only three subarrays have the number of elements equals to sum of its elements i.e., 1) {1}, sum = 1, length = 1. 2) {1}, sum = 1, length = 1. 3) {1, 1}, sum = 2, length = 2.  Naive Approach: The idea is to generate all the subarrays of the array and if the sum of elements of the subarray is equal to the number of elements in it then count this subarray. Print the count after checking all the subarrays.  Time Complexity: O(N2) Auxiliary Space: O(N)  Efficient Approach: This problem can be converted into a simpler problem by using observation. If all the elements of the array are decremented by 1, then all the subarrays of array arr[] with a sum equal to its number of elements are same as finding the number of subarrays with sum 0 in the new array(formed by decrementing all the elements of arr[ ] by 1). Below are the steps:  Decrement all the array elements by 1.  Initialize a prefix array with prefix[0] = arr[0].  Iterate the prefix array pref[] from left to right and increment the answer by the value of the current element in the map.  Increment the value of the current element in the map.  Print the value of answer after the above steps.  Below is the implementation of the above approach:  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  