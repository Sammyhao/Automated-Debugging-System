 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I have been struggling with errors when trying to build a binary tree using a queue. The problem is what classes should include what files and how to reference objects from the other classes? I threw my files into an IDE in an attempt to pinpoint just what the problems are and the results are below. Currently my issue is that in the Queue.h file, treePtr "does not name a type". You can see the evolution of this problem here This question is different from other posts because the two classes are friend classes. This brings up the problem of circular dependencies. I have tried all sorts of combinations of including files and forward declaring but one combination causes one type of issue, and another creates different errors.  What's the purpose of the tree containing a queue, and the queue containing tree nodes?  2 Answers 2  You have to compile and (I suppose you have one) separately, instead of including in your .  Forward declarations are fine for friending classes, even if you do so circular.  Put in your file, to let the compiler see the full declaration.  In just put .  To get the final executable link all of the produced object files , and .  As I've noticed now your actual problem is, you cannot access nested classes/structs from a forward declared class/struct as you're requiring with accessing from ( should be better named something like or similar BTW).  You cannot make a private nested type in this case, it must be publicly visible.  A viable way is to put in a , that indicates it's not intended for usage outside the API.  Another viable way is to make a template class, that accepts any type of or other kind of nodes. Since can't see any use case, why needs to know about the internal specifications of (besides the trivial stuff like copying aso.), it's not really necessary to make a class.  84.6k1313 gold badges104104 silver badges179179 bronze badges  12  I have followed your instructions however none of my files will compile. I get the Error from Queue.h that "treePtr has not been declared" and "treePtr does not name a type" no matter which file I try to compile  my original solution was to #include "Queue.cpp" in Tree.cpp, and declare the Queue object in Tree.cpp. This worked.  @lefunction isn't visible from the forward declaration, hence the error. You could try forwarding the nested class/struct declaration as well, not sure if that's possible (would need an experiment).  @lefunction "my original solution was to ..." Check the link I gave in my answer. Including translation units is the wrong approach.  @lefunction Hmm, seems to be a good candidate for a template class. From your sample I actually can't see, why it needs to access any innards of the struct. You don't give a use case, why this tight coupling is actually needed. If you want to use a queue structure as container for your nodes, something like templated container should be sufficient.  My best guess here is that the problem was that since the classes Queue and Tree were friends, and Tree had an instance of a Queue as a data member, there was some conflict when trying to include files and forward declare. By sharing data members with Queue, the Tree class shared an instantiation of a Queue object with the Queue class, so there was some inception sharing going on that was not obvious. @πάντα ῥεῖ suggested to make the Queue a template class so that it could accept objects of any type, without having to couple with the Tree (which was done so the Queue class would know what to do with treePtr objects). Making Queue a template class solved the problem because now the Tree class can have an instance of a Queue, and I can pass objects of type treePtr to the Queue without the Queue knowing anything about the Tree class before hand.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  