 Reverse a linked list  Given pointer to the head node of a linked list, the task is to reverse the linked list. We need to reverse the list by changing the links between nodes.  Examples:  Input: Head of following linked list 1->2->3->4->NULL Output: Linked list should be changed to, 4->3->2->1->NULL  Input: Head of following linked list 1->2->3->4->5->NULL Output: Linked list should be changed to, 5->4->3->2->1->NULL  Initialize three pointers prev as NULL, curr as head and next as NULL.  Iterate through the linked list. In loop, do following. // Before changing next of current, // store next node next = curr->next // Now change next of current // This is where actual reversing happens curr->next = prev // Move prev and curr one step forward prev = curr curr = next  Below is the implementation of the above approach:  C++  Java  Python3  C#  Javascript  C++  Java  Python  C#  Output  Using Stack:  Store the nodes(values and address) in the stack until all the values are entered.  Once all entries are done, Update the Head pointer to the last location(i.e the last value).  Start popping the nodes(value and address) and store them in the same order until the stack is empty.  Update the next pointer of last Node in the stack by NULL.  Below is the implementation of the above approach:  C++  Java  C#  Python3  Thanks to Gaurav Ahirwar for suggesting this solution.  Using array:  1. Create a linked list.  2. Then, make a count(head) function to count the number of nodes.  3. Initialize an array with the size of the count.  4. and start a while(p->next!=NULL) loop and store all the nodeâ€™s data into the array.  5. and then print the array from the last index to the first.  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  