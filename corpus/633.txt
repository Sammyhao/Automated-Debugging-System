 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I now have an array of functions that have the same functionality,  I want to develop a program that traverses through all the array members and dumps the output to another .dat data file. The output should have the following format:  So my question is - when traversing through the array members, how could we let the program know which function name the function pointer is pointing to (e.g. func_array[0] is pointing to func_1)?  Variable/functions names are lost during compilation. They are just around to help the programmer.  It is C++. Sorry for not seeing previous post on this problem. Yes, having a map structure seems a brilliant idea : )  @alk: Function names may hang around in the executable. It depends if it has symbols or not. Access to those symbols is very platform specific though.  4 Answers 4  There is no standard way of archiving what you seek. All possible solutions either involve system dependent ways to resolve function addresses to their names (and even that does not necessarily always work) or changing the func_array like so:  you can use a macro, to ease the job:  and then use it like this:  So, if this is an option for you, you got your solution. If not, you gonna have to tell, what system you're targeting.  More C++ish solutions exist - like the std::map solutions hinted to by Govind Parmar where you could iterate and take the key <-> value pair.  You can simply keep track of the name by storing an array of pair that will match the function pointer with its name:  So we see the mangled name of which is was output:  The downsides of this which I don't know how to solve are:  requires modifying build with , and therefore does not work with static linking and likely has other downsides  does not demangle automatically  But I do think that looking into backtrace mechanisms is a good bet, and I have investigated them further at: print call stack in C or C++  Maybe we can also get away with debug information: Programmatically get debug information that might actually be the most stable approach if it were possible. But no one knows how to do it currently.  You need to remember that at the assembly/machine code level there are no "function names" (unless you have debugging information in your build); there are only addresses that indicate where a function starts.  You will have to use a data structure to keep track of this stuff. If you're using C++, then use a as commenter @MyUsername112358 pointed out.  @BodoThiesen ah you're right; removing the C portion of my answer regardless as he said that he was working strictly with C++  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  