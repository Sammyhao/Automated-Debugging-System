 Implementation of Graph in JavaScript  In this article we would be implementing the Graph data structure in JavaScript. Graph is a non-linear data structure. A graph G contains a set of vertices V and set of Edges E. Graph has lots of application in computer science. Graph is basically divided into two broad categories :  Directed Graph (Di- graph) – Where edges have direction.  Undirected Graph – Where edges do not represent any directed  There are various ways to represent a Graph :-  Adjacency Matrix  Adjacency List  There are several other ways like incidence matrix, etc. but these two are most commonly used. Refer to Graph and its representations for the explanation of Adjacency matrix and list. In this article, we would be using Adjacency List to represent a graph because in most cases it has a certain advantage over the other representation. Now Lets see an example of Graph class-  JavaScript  The above example shows a framework of Graph class. We define two private variable i.e noOfVertices to store the number of vertices in the graph and AdjList, which stores a adjacency list of a particular vertex. We used a Map Object provided by ES6 in order to implement Adjacency list. Where key of a map holds a vertex and values holds an array of an adjacent node. Now let’s implement functions to perform basic operations on the graph:  addVertex(v) – It adds the vertex v as key to adjList and initialize its values with an array.  JavaScript  addEdge(src, dest) – It adds an edge between the src and dest.  JavaScript  In order to add edge we get the adjacency list of the corresponding src vertex and add the dest to the adjacency list.  printGraph() – It prints vertices and its adjacency list.  JavaScript  Lets see an example of a graph  Now we will use the graph class to implement the graph shown above:  JavaScript  bfs(startingNode) – It performs Breadth First Search from the given startingNode  JavaScript  In the above method we have implemented the BFS algorithm. A Queue is used to keep the unvisited nodes Lets use the above method and traverse along the graph  JavaScript  The Diagram below shows the BFS on the example graph:  dfs(startingNode) – It performs the Depth first traversal on a graph  JavaScript  In the above example dfs(startingNode) is used to initialize a visited array and DFSutil(vert, visited) contains the implementation of DFS algorithm Lets use the above method to traverse along the graph  JavaScript  The Diagram below shows the DFS on the example graph  This article is contributed by Sumit Ghosh. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  