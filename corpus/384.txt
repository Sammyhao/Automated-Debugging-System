 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  Is there a DFS implementation possible using stack which gives me all possible path from one vertex to another in a graph in case of graph ( cyclic/Acyclic ).  My present DFS code is as follows :-  This does gives me one of the possible path if exist but what I want is and not just the one .  none ...just out of curiosity .. I am working on algorithms these days so DFS was giving me one of the possible paths . There might be ways to find all possible path but I wanted to know if it can be done with slight modification in DFS function itself  It's essentially a one-line change where you stop the search. In the cyclic case you need to add code to detect the cycles, else you enumerate an infinite number of paths - which doesn't finish in time.  And you need to change the "node visited"-check, it removes many paths from the set of possible results as it is.  @Patrick Yes I have for time bieng made this as undirected graph, in graph with directed nodes eith no cycles of course I can mark the poped node as unvisited after adding all the connected nodes with it . But in case of Cyclic you mean to say that I need to use somesort of backtracking in case a Cycle is found  1 Answer 1  No - in the case of an undirected graph there are an infinite number of paths (just go back and forth over any given edge, or go around cycles), so you cannot write code to return them all.  If you put some other constraints on (like "paths which visit each node only once"), then yes.  For the constraint of "paths which visit each node only once" you will essentially change your search so that visited[i] is "have I visited [i] this on this path" instead of "have I ever visited this node?" (as it is in the code now), and then every time you reach your target, you should add your current path to the list of found paths, and continue as though you hadn't found it.  Being unknown of how many actual paths exist here , do i need to run an exhaustive search here as there are probably no other way then that to find all possible paths in this scenario.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  