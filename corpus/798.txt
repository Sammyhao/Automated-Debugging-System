 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  All implementation of Dijkstra's algorithms I have seen do not have a recursive function, but I have also read that by definition dynamic programming is an algorithm with a recursive function and "memory" of things already calculated.  So is Dijkstra's algorithm with a loop qualified as dynamic programming? Or in order to qualify as dynamic algorithm I have to change a loop into a recursive function.  You can have dynamic programming with recursive or iterative solutions. It's the approach of simplifying the problem into subproblems that is dynamic, not whether or not you solve it recursively or iteratively.  4 Answers 4  All implementation of Dijkstra's algorithms I have seen do not have a recursive function  Recursion gives us a stack. But we don't need a stack here. We need a priority queue. The efficient way to implement Dijkstra's algorithm uses a heap (stl priority_queue in c++).  but I have also read that by definition dynamic programming is an algorithm with a recursive function and "memory" of things already calculated.  Dynamic Programming need not be written in a recursive way though most people prefer to write it in a recursive way.  For example:  is a recursive implementation of DP  and  is an iterative way of writing it to save stack memory.  1) that does not recalculate the result that is already found and  2) uses the existing result to find the required result  can be called as a DP.  So is Dijkstra's algorithm with a loop qualified as dynamic programming?  Dijkstra is DP!  Or in order to qualify as dynamic algorithm I have to change a loop into a recursive function.  The paper claim that Dijkstra’s algorithm is strongly inspired by Bellman’s Principle of Optimality and that both conceptually and technically it constitutes a dynamic programming successive approximation procedure par excellence.  Dijkstra's Algorithm is like a water filling algorithm. At each step it chooses local minima that's the reason why many consider it as Greedy Algorithm. If you will try this same algorithm with choosing any arbitrary path not the local minima, then you will come to know that it's still working. Choosing a local minima is just because of filling water optimally as I mentioned earlier that it's like water filling algorithm. So, the main concept behind Dijkstra's Algorithm is to store the previous result to predict the upcoming result and that is what Dynamic Approach is.  Dynamic Algorithms mean breaking a procedure down into simpler tasks. Several dynamic algorithms iclude the idea of recursion but are not limited too..  Considering Dijkstra's algorithm the clasic solution is given by a for loop and is not a dynamic algorithm solution.  However, From a dynamic programming point of view, Dijkstra's algorithm is a successive approximation scheme that solves the dynamic programming functional equation for the shortest path problem by the Reaching method.  In fact, Dijkstra's explanation of the logic behind the algorithm, namely:  14k99 gold badges4343 silver badges6565 bronze badges  2  Also from wikipedia: Sometimes, applying memoization to a naive basic recursive solution already results in an optimal dynamic programming solution; however, many problems require more sophisticated dynamic programming algorithms. Some of these may be recursive as well but parametrized differently from the naive solution. Others can be more complicated and cannot be implemented as a recursive function with memoization. Examples of these are the two solutions to the Egg Dropping puzzle below.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  