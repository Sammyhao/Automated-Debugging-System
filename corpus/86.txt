 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  Guys! Can someone help me with this bfs code? I can't understand how to solve this queue line.  26411 gold badge66 silver badges1414 bronze badges  3  What do you mean by "solve?" What is the solution supposed to be? Also, be careful with making a default argument be in Python. See this article.  I think by "solve this queue line", he means, diagnose the error that occurs on the line beginning with . Namely,  Incidentally, OP, watch out for that in your function definition - you may get surprising results if you run this function more than once. See this question on default mutable arguments.  4 Answers 4  To extend your queue with all nodes not yet seen on the path, use set operations:  or use a generator expression:  Lists don't support subtraction.  You don't really need to filter the nodes, however, your code would work with a simple:  as the test also guards against re-visiting nodes.  The check is expensive... can this be made more efficient? I understand path has to contain order. Perhaps, a second set can be used to just test for membership.  @cᴏʟᴅsᴘᴇᴇᴅ: I've experimented in the past with this; unless your paths are very long it is usually not worth the effort.  This line is giving , because you are not allowed to subtract two lists. You could convert them to a different collection that does support differences. For example:  Result:  By the way, it may be good to modify the argument list so that you don't have a mutable list as a default:  71.3k1212 gold badges107107 silver badges147147 bronze badges  4  You don't need to convert both to a set ( takes any iterable) and takes any iterable as well, so the call is redundant too.  Good observation on the unnecessary call. Edited. However, it looks like both conversions are necessary if one wants to use the minus operator. Although, an explicit call could take a list, as you say.  in order to avoid to add to the queue, more than once, a node which has not been visited yet.  Bug is that there is no list difference method. Either you can convert it to set and use set difference method or you can use list comprehension as  queue.extend(graph[vertex] - path)  can be replaced by  queue += [i for i in graph[vertex] if i not in path].  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  