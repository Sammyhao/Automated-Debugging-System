 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  In computer programming languages, a recursive data type (also known as a recursively-defined, inductively-defined or inductive data type) is a data type for values that may contain other values of the same type  I understand that Linked List and Trees can be recursive data type because it contains smaller version of the same data structure, like a Tree can have a subtree.  However, it go me really confused because isn't fixed size array also contains sub-array? which is still the same type?  Can someone explain with examples that what makes a data structure recursive?  74011 gold badge1111 silver badges2626 bronze badges  1  1  ` isn't fixed size array also contains sub-array` maybe, but that's not by design. By design, a node has a node as its parent, and an array of nodes as its children. By definition it recurses, not just because it has an array with another node in it.  2 Answers 2  However, it go me really confused because isn't fixed size array also contains sub-array?  Conceptually, you could say that every array "contains" sub-arrays, but the arrays themselves aren't made up of smaller arrays in the code. An array is made up of a continuous chunk of elements, not other arrays.  A recursive structure (like, as you mentioned, a linked list), literally contains versions of itself:  Whereas, if you think of an array represented as a class with fixed fields for elements, it contains elements, not other arrays:  (This is a bad, inaccurate representation of an array, but it's the best I can communicate in simple code).  A structure is recursive if while navigating through it, you come across "smaller" versions of the whole structure. While navigating through an array, you'll only come across the elements that the array holds, not smaller arrays.  Note though, that this depends entirely on the implementation of the structure. In Clojure for example, "vectors" behave essentially identical to arrays, and can be thought of as arrays while using them, but internally, they're actually a tree (essentially a multi-child linked list).  A data type describes how data is stored (at least logically; on deeper layers there are only numbers, bits, transistors, etc. anyway). While an array (but only a non-empty one) can be considered as something plus another (sub-)array (such an approach is used commonly for lists in languages like Lisp and Prolog), it is usually stored element-wise.  For example, a list in Prolog is defined as either an empty list (a special case) or an element (called ) concatenated with another list (called ). This makes a recursive data type.  On the other hand, a list in C can be defined as . Here in not used in how is defined (only and are used), so it's not a recursive data type.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  