 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I have an exercise for university where I have to write an extended DFS algorithm. Based on the DFS, I have to specify a procedure that traverses an undirected, continuous graph, classifying each node according to whether it is part of a cycle or a dead end and print the nodes which are in the cycle or in the dead end. This procedure must be applied to the graphs shown with start node S. The drawn graph  I have the following adjacency list:  I have mapped each node to the following numbers:  Here is the code I have written so far for detecting a cycle in a graph (edited):  What is still missing here is to print the nodes that are in the cycle or in the dead end.  don't compare booleans to a boolean constant, use the boolean or not boolean. No need of around an expression (it is not C++), if the parameter of a method is the number of vertices don't call it but something like , is not a very descriptive name, in 6 months you will be confused  pass the visited notes to the util func and return a modified list if found a cycle and print this list  @rioV8 I have added the cycle which which I return when a cycle is found. The thing is that when I change the arrangement of addEdge then it doesn't work correctly but also for the another graph at the bottom of the code (see my edited code).  : a non-empty list is "True", get rid of the global variables, use the node names and not a mapping to numbers, never use a as default argument, use a debugger to see what else is wrong in the recursive logic  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  