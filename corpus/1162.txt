 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I'm trying to make a program that consists of an array of 10 integers which all has a random value, so far so good.  However, now I need to sort them in order from lowest to highest value and then print it onto the screen, how would I go about doing so?  (Sorry for having so much code for a program that small, I ain't that good with loops, just started working with Java)  It may help you understand loops by implementing yourself. See Bubble sort is easy to understand:  Of course, you should not use it in production as there are better performing algorithms for large lists such as QuickSort or MergeSort which are implemented by  4,93322 gold badges2121 silver badges3434 bronze badges  3  BubbleSort is definitely a good algorithm for beginners to learn, but as you mentioned QuickSort or MergeSort perform much better for larger datasets and those are the algorithms used by Arrays.sort(array) method for this reason. Thanks for mentioning this for anyone that may not have realized.  I upvote this answer since it will be more likely searched by beginners and beginners should know how to implement a sort function by themselves.  Since the initial question is about sorting an array of 10 integers, bubble sort is totally acceptable. Production or not if there is no expectation to have a bigger input.  Your array has a length of 10. You need one variable () which takes the values from to .  For reverse Order : -- > It is a static method in Collections class which will further call an inner class of itself to return a reverse Comparator.  reversed solution doesn't work for primitives, unfortunately. IntStream.range(0, size).map(i -> array[size-i-1]).toArray(); does. size = array.length;  See below, it will give you sorted ascending and descending both  Output will be  Note: You can use Math.ranodm instead of adding manual numbers. Let me know if I need to change the code...  just FYI, you can now use Java 8 new API for sorting any type of array using  uses Fork/Join framework introduced in Java 7 to assign the sorting tasks to multiple threads available in the thread pool.  The sorting algorithm is a parallel sort-merge that breaks the array into sub-arrays that are themselves sorted and then merged. When the sub-array length reaches a minimum granularity, the sub-array is sorted using the appropriate Arrays.sort method. If the length of the specified array is less than the minimum granularity, then it is sorted using the appropriate Arrays.sort method. The algorithm requires a working space no greater than the size of the original array. The ForkJoin common pool is used to execute any parallel tasks.  So if the input array is less than granularity (8192 elements in Java 9 and 4096 in Java 8 I believe), then simply calls sequential sort algorithm.  Just in case we want to reverse sort the integer array we can make use of comparator as:  Since Java has no way to sort primitives with custom comparator, we have to use intermediate boxing or some other third party library which implements such primitive sorting.  20.3k77 gold badges8686 silver badges8989 bronze badges  1  Why not use simple method (from Java 1.2) like this: Arrays.sort(myArray); ? Not need Java Stream.  This doesn't work! The first loop is only mutating the loop variables (x) and the array elements aren't getting set. So, you'll end up sorting an array of zeros.  If you want to build the Quick sort algorithm yourself and have more understanding of how it works check the below code :  We can also use binary search tree for getting sorted array by using in-order traversal method. The code also has implementation of basic binary search tree below.  Be aware that Arrays.sort() method is not thread safe: if your array is a property of a singleton, and used in a multi-threaded enviroment, you should put the sorting code in a synchronized block, or create a copy of the array and order that copy (only the array structure is copied, using the same objects inside).  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  