 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  Either this is a bug, or I'm about to learn something new about how Python behaves. :)  I have a dictionary filled with key/value pairs. Each key has a unique prefix, . I'm attempting to get a list of every unique prefix in the dictionary.  First I get a list of all keys which end in .  Next, I strip from all of them using ).  This works fine for all of them, except for the last one, . Instead of being stripped to , it becomes . Run the code to see for yourself:  Actual Output: (Python 2.6, 2.7, and 3.2 (must change print to print() for 3.x to work))  Expected Output:  If I change the key's name from to something like , or , the glitch doesn't occur. Why is this happening?  12k1111 gold badges6161 silver badges6767 bronze badges  2  In retrospect, it might have been more correct and less confusing if the argument of were a set instead of a list. But sets were added later to Python.  You could always just slice off the final three characters: . Note that is not the same as the test you have run.  512k113113 gold badges892892 silver badges798798 bronze badges  1  never realized this! from the name it was easy to misunderstand as removing the 'thing' at the end..  The chars argument is a string specifying the set of characters to be removed. If omitted or None, the chars argument defaults to removing whitespace. The chars argument is not a suffix; rather, all combinations of its values are stripped.  .rstrip's parameter isn't the string which we want to strip, it's the characters we want to strip. Check that examples:  Not really. Premature optimization maybe? :) But I don't know which one is the fastest.  But I must admit that I like your solution more... and based on some very quick testing, it seems to be at least twice as fast as the re one. Note to self: stop relying on regular expressions for everything.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  