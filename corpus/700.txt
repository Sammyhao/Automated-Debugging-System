 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  20 Answers 20  P.S. This answer doesn't exactly focus on "binary" trees -- instead, it prints all kinds of trees. Solution is inspired by the "tree" command in linux.  @VasyaNovikov how would you rewrite if HashMap was used for children? I managed to modify every other part but this one.  I actually implemented something similar in a small Java library called text-tree. Maybe it helps someone.  I've created simple binary tree printer. You can use and modify it as you want, but it's not optimized anyway. I think that a lot of things can be improved here ;)  It will be great if you can elaborate on choosing 2^n - 1 as first spaces and 2^(n+1) - 1 as the between spaces  It is good for balanced trees as I tried it for one of the right-skewed trees of 15 values and it became very unmanageable to see the print.  My tree is 44 layers deep, so java crashes when trying to print 8796093022207 whitespaces. So be warned.  I've made an improved algorithm for this, which handles nicely nodes with different size. It prints top-down using lines.  To use this for your Tree, let your class implement .  17.2k99 gold badges6767 silver badges123123 bronze badges  11  I was trying to replicate the "selected answer" technique. But I think this one of the best answers here. So Robust and concise.  After implementing this it appears to work great, but only for balanced trees. Anything imbalanced returns odd results.  I get instead of the lines between nodes but should be just some UTF8 ans stuff problem. Anyway, great stuff, I have to say. Best answer for me as it is really easy to use.  Yes, that was it. Just had to change all the special characters of your lines and spaces paragraph.  Adapted from Vasya Novikov's answer to make it more binary, and use a for efficiency (concatenating objects together in Java is generally inefficient).  5,39488 gold badges4545 silver badges7070 bronze badges  5  It does not work for a tree when we insert values: 30,40,50,60,70,80 into a BST. As that creates a right-skewed tree. The value for isTail should be false when .I did the edit and tested it, it works fine.  Thank you, @Vasya Novikov's answer is great but I need a linklist version of it, and your answer just fit my case.  In all of the answers, this produces the best looking tree, and the code is very clean!  I found VasyaNovikov's answer very useful for printing a large general tree, and modified it for a binary tree  michal.kreuzman nice one I will have to say. It was useful.  However, the above works only for single digits: if you are going to use more than one digit, the structure is going to get misplaced since you are using spaces and not tabs.  As for my later codes I needed more digits than only 2, so I made a program myself.  It has some bugs now, again right now I am feeling lazy to correct them but it prints very beautifully and the nodes can take a larger number of digits.  The tree is not going to be as the question mentions but it is 270 degrees rotated :)  Place this function with your own specified TreeNode and keep the level initially 0, and enjoy!  Here are some of the sample outputs:  Only problem is with the extending branches; I will try to solve the problem as soon as possible but till then you can use it too.  Your tree will need twice the distance for each layer:  You can save your tree in an array of arrays, one array for every depth:  If your tree is not full, you need to include empty values in that array:  Then you can iterate over the array to print your tree, printing spaces before the first element and between the elements depending on the depth and printing the lines depending on if the corresponding elements in the array for the next layer are filled or not. If your values can be more than one character long, you need to find the longest value while creating the array representation and multiply all widths and the number of lines accordingly.  What if the tree isn't complete? In that case it seems like you should be able to do this without doubling the space at each level.  Yes, but only in some very limited cases where most subtrees are linked lists instead of trees from the same level downward or you would draw different subtrees with different spacing between the layers...  Based on VasyaNovikov answer. Improved with some Java magic: Generics and Functional interface.  This is a very simple solution to print out a tree. It is not that pretty, but it is really simple:  This was the simplest solution for horizontal view. Tried with bunch of examples. Works well for my purpose. Updated from @nitin-k 's answer.  I needed to print a binary tree in one of my projects, for that I have prepared a java class , one of the sample output is:  Here is the code for class along with class . For printing any tree you can just create an equivalent tree with class.  Finally here is a test class for printing given sample:  Here's a very versatile tree printer. Not the best looking, but it handles a lot of cases. Feel free to add slashes if you can figure that out.  A Scala solution, adapted from Vasya Novikov's answer and specialized for binary trees:  Here is another way to visualize your tree: save the nodes as an xml file and then let your browser show you the hierarchy:  Horizontal representation is a little complex compared to vertical representation. Vertical printing is just plain RNL(Right->Node->left or mirror of inorder) traversal so that right subtree is printed first then left subtree.  In horizontal representation, the display is built by HashMap of TreeMap or where HashMap contains node's y-axis/level_no as Key and TreeMap as value. The Treemap interally holds all nodes in same level, sorted by their x axis value as key starting from leftmost -ve, root=0, rightmost=+ve.  Using HashMap makes algo work in O(1) lookup for each level and TreeMap for sorted order in O(logn) if self balancing tree/Treap is used.  Still while doing so don't forget to store placeholders for null child such as ' '/spaces so that the tree looks as intended.  Now the only thing left is to calculate horizontal node distance, this can be done with some math calc,  calc tree width and height.  once done, when displaying the nodes, present them at a optimal distance based on calculated width, height, and skew info if any.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  