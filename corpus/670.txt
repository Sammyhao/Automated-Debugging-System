 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I'm trying to implement a BFS function that will print a list of nodes of a directed graph as visited using Breadth-First-Search traversal. The function has to be implemented non-recursively and it has to traverse through all the nodes in a graph, so if there are multiple trees it will print in the following way:  Tree 1: a, b  Tree 2: d, e, h  Tree 3: .....  My main difficulty is understanding how to make the BFS function traverse through all the nodes if the graph has several trees, without reprinting previously visited nodes.  2 Answers 2  For simplicity, you can use a Queue to perform BFS non recursively. You need two data structures here.  A Queue to maintain the BFS order.  List item hash table (or set) to look for duplicates.  This is the algorithm:  Enqueue the initial point on the graph into the queue and also the hash table.  If the queue is not empty  Dequeue from the queue.  Enqueue all neighbors of the dequeued element to the queue and insert them into the set if they are not already present in the set.  Print (/access/process) the dequeued element.  Repeat steps 2 through 4 until the queue is exhausted.  You can find many examples and optimizations online. Eg:  BFS is usually done with a queue. When you process a node, you push its children onto the queue. After processing the node, you process the next one in the queue.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  