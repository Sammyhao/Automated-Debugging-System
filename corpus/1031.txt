 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  However, unlike the referenced question, I don't wish to create a overarching linked list object which contains a lot of metadata and provides the iterator (they are not necessary for my application).  My question is: Is there any fundamental reason why I should not or can not provide an iterator that doesn't iterate over elements it contains, but instead jumps through distinct element objects that are linked to each other via references?  The iterator is not necessary for proper functioning of the code, but I rather like the syntactic sugar of the construction.  My implementation looks a bit like this (simplified version):  The LinkedAccount object provides an iterator that iterates from one LinkedAccount to the next, using the .next parameter already stored in the LinkedAccount object.  This approach appears to work, but the python iterator documentation seems to assume that the iterator is going to walk through elements contained by the parent object. Are there any pitfalls that preclude me doing something like this?  2 Answers 2  It sounds like it would work but it is semantically weird for the exact reason you mentioned. Having the defined on makes it sound like you're iterating over the account itself and not a list of accounts. What you have now makes it seem like you're setting up lines of code like this:  Which makes no sense. In this case I think you could just a simple generator:  Think of each as not only a node in a collection, but also as a collection itself, which includes the nodes after it.  A linked list may be thought of as a node and possibly another linked list.  Indeed, this is the concept of list in languages like Lisp.  There is nothing, functionally or documentation-wise, that precludes an iterator from returning the same type as the object that it was called on. Likewise, there is no prohibition on collections "containing" (or equivalently, pointing to) other collections, nested n-deep.  If you are okay with viewing your like the list above, and this makes sense for the people using your code, you are probably okay.  69k4141 gold badges179179 silver badges258258 bronze badges  3  The way I understood the question was that this isn't a list of collections, but that he's having an item in a collection return the iterator that iterates over the collection. So in Lisp terms it would be like trying to make it so that you're writing code that semantically means iterating over the of a list but actually iterates over the list itself.  Thank you for the well written and direct response to the question re: potential technical problems with such an implementation!  @ChadMiller, the doesn't have a pointer to the next item, but does have a pointer to the next item. Thus in this analogy is the , and is the .  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  