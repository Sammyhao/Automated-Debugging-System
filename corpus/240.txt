 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  What is the most elegant way to recursively check that the data entries are the same in terms of content and order? Say the stack and queue shown above have the same data and same order.  I'm having a problem conceptually understanding what to do because the data pop() in opposite order.  I can't conceptually envision a way to do it, so I haven't tried anything. However, it did just occur to me that I can peek the front AND back of a queue according to STL queue. I think this helps.  Are you sure this isn't for a class? Especially since it seems to be around the same time. This might be considered cheating  4 Answers 4  A partially recursive solution would be to recursively pop all the elements from the queue in an auxiliary stack and then check if the auxiliary stack and the original stack are the same. This check can be done also recursively.  3,56111 gold badge2323 silver badges3636 bronze badges  1  1  That's very true; it seems thought there is a way to do it without creating a new queue or stack.  No need for recursion, this would be a useless waste of resources. No need to mutate your and either (in other words, this works even on 's).  Assuming your and both internally use the same type of underlying container (which should be if you used the default) then you can access the protected members (your real containers) of both and and compare them using operator :  Now, if you use different containers types as the underlying implementation of and , you can still use that same technique to obtain containers that are sorted in the same order: both and call the underlying container's method, it's only when you (and similar operations) that the reversing happens for . Since those underlying containers will be in the same order, you can then compare things more easily (left as an exercise to the reader ;)).  Credit: I was too lazy to reimplement a protected member accessor again, so I shamelessly copied and modified this one.  If by recursion, you do not mean a recursive function call, but just looping, then here's an answer. The function first checks if the stack and queue are the same size. If they aren't the same size, the function returns false. The function has a local stack object that gets the stack parameter's elements, in order to be popped in the reverse order as the stack parameter that is passed in. Then a loop checks each front/top element of stack and queue for equality. If equal, the loop continues to the next iteration. If not equal, the function returns false. If the loop finishes without returning false, the function returns true.  1,69122 gold badges1717 silver badges3434 bronze badges  1  This works, but that's a lot of copies. Depending on the actual size of the containers this could be an issue.  U may not pop them simultaneously, u can try to pop one(use something record it) ADT(dont pop queue, pop stack), and to the base(size==1), and u compare and made some change to the queue, and returns. Then do something with the recorder and the currently queue's front after every recursion calls, you will find the answer.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  