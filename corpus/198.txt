 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  and an external pointer (to the root node) write a function in largest (numbernode * tree) will return the largest number in the tree , if the tree is not empty. your function should return -1 if the tree is empty.  its a practice question for a test, i've spent hours trying to figure it out, i need some code assistance!!  If you've spent hours, show us some of what you have tried, and then we can help.  5 Answers 5  Recursion problems are really easy to solve once you start thinking about them the right way, especially with regards to trees. "What is the largest number in the tree? Well its the highest of myself, my left child, and my right child...what is the highest of my left child? well its the highest of that child, its left, and its right...." and so on.  this is the basic idea. You go down the children of the current node, and get the result back, see if their results are better than yours. The highest value will work its way up the chain.  P.S. the syntax in my code is simply wrong. For instance, there's no semi-colons. It also ignores pointers or anything. Think of it as C++ friendly pseudo-code only.  78.6k2222 gold badges151151 silver badges199199 bronze badges  1  I'm digging up this old post, but what can we do if the tree contains all values less than -1?  Just do a traversal of the tree using any of the known method of inorder, preorder or postorder. You are bound to encounter the largest element during the traversal.  A binary tree is not necessarily ordered. You are confusing binary trees and binary search trees, i'd say  What would be the point of storing the number in the tree in the first place? I know it was an assumption of mine going in, and that the comparison might not be a < > comparison. Other than that, point taken.  So - I can figure out a few dozen reasons why I'd store unordered numbers in a binary tree. Heck, even in an unbalanced one. (even objects identified by numbers just to stretch the imagination). This would happen in cases where it's not just about the nodes, but also the edges  In the context of a programming test question, I think it's reasonable to assume the integers are the values and not pointers or id's to external data. True, one can contrive many different reasons, but in the context of a test question, I don't feel my reply was unreasonable. Also, I know well the difference, but thanks for the lesson, anyways.  Do you know the tree traversal algorithms (in-order, pre-order, post-order)?  Draw a simple tree, and do the steps with you pencil. At some point in a subtree, try to 'generalize' a description that works for the subtree, and then see if you can come up with a description that would 'keep' working for the whole tree.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  