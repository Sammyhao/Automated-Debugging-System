 Modify a binary tree to get preorder traversal using right pointers only  Given a binary tree. Modify it in such a way that after modification you can have a preorder traversal of it using only the right pointers. During modification, you can use right as well as left pointers. Examples:  Method 1 (Recursive) One needs to make the right pointer of root point to the left subtree. If the node has just left child, then just moving the child to right will complete the processing for that node. If there is a right child too, then it should be made right child of the right-most of the original left subtree. The above function used in the code process a node and then returns the rightmost node of the transformed subtree.  C++  Java  Python3  C#  Javascript  Output:  Method 2 (Iterative) This can be easily done using iterative preorder traversal. See here. Iterative preorder traversal The idea is to maintain a variable prev which maintains the previous node of the preorder traversal. Every-time a new node is encountered, the node set its right to previous one and prev is made equal to the current node. In the end we will have a sort of linked list whose first element is root then left child then right, so on and so forth.  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  