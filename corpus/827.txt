 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  What is the performance difference between using an iterator to loop through an STL map, versus a vector? I'd like to use the map key for insertion, deletion, and some accesses, but I also need to do regular accesses to every element in the map.  6 Answers 6  With both map and vector, iterating through the entire collection is O(N). however (like list vs vector) vector stores elements contiguously, so accessing the next element is much cheaper because it will use cache optimally, whereas the map won't.  But since you need to have lookup based on keys, there isn't really an alternative. You could use a vector of pairs sorted on the first element, but if the collection needs to be mutable this is going to be very slow. Just use a map.  This link has a nice table of performance for various operations on all of the STL containers.  Generally speaking, if you need to do a lot of inserting, removing or searching based on a key then the map is the way to go.  If you only need to set up the container once and then access it like an array then use a vector.  EDIT: Performance table of STL container operations:  26.6k1313 gold badges6464 silver badges8585 bronze badges  5  2  There is a subtlety in the question. The user does not want to access one element, but rather all elements in the map. Amortized cost analysis yields O(N) for the whole map transversal (each edge in the tree is transversed only twice, once downwards, once upwards).  Why insert head for vector is n/a and remove head for vector is O(1)? They both should be O(n). And vector find is O(log n)? There is something wrong there.  What we really need to know here is, "At what point does it become more efficient to use a vs. a , both for deletions and loop iterations separately?"  Iterating through a map may be linear but practically , it is not so efficient from the implementations in C++ . So my advice is to use a vector and use another map to locate the items in the vector in linear time .  Use map if you need fast way of access by the key. Otherwise use vector all the time unless some performance issues will be discovered with profiler.  54.1k1414 gold badges8383 silver badges101101 bronze badges  1  Access of every element in the map is somewhat more important, as it's going to be firing off frequently, but I still need reasonably quick key-based lookup (I can take out that requirement, but things will get unreasonably hairy). Map does seem to be the better fit, per Greg Rogers' answer above.  Browsing the tree is not expensive (grosso modo like following a linked list), you won't benefit from the cache as much with a vector, but generally it's what you do when you iterate that is expensive, not the iteration itself.  Could you tell us more about what you expect to do when you iterate through the whole map?  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  