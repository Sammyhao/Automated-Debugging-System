 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I am trying to write a tree sort of structure in C++. As in every tree there are branches and leaves. A branch can contain other branches as well as leaves. Now my implementation calls for each branch and leaf to have different functionalities. So for example. Take the tree structure  Now Each Leaf and branch has a different function to execute so Leaf1 will have a function called leaf1_func, Leaf2 will have leaf2_func, Branch4 has Branch4_func.  I was initially trying to implement composite design pattern. But that means I would have as many classes as leafs. But since I have tons of leaves and branches I would like to avoid creates more classes. I realize this is an unusual situation but was hoping somebody could help me in this regard. What would be the best way to implement this tree without creating too many classes.  i am using map STL container to store datas as well, i want to use this tree implementation to solve this in TSP problem.  @Potatoswatter, no its not homework, i wanna suggestion how to avoid using those functions  3 Answers 3  Different functions with the same signature do still have the same type. Even if the functions are completely unrelated, you can have a tree that stores random data by using (type erasure) and then typecast back to the known actual type after the leaf node is reached.  You could also use virtual methods with inheritance and store pointers to base class type in the tree. It depends on what the nodes really are.  None of this is really related to the fact it goes into a graph.  129k2222 gold badges244244 silver badges406406 bronze badges  6  it was ok, can you help me regarding dynamic way of tree implementation and paralleling it.  @visanio_learner Well, if you've already chosen a viable tree implementation, there's no sense in changing it unless you have a good reason. What you show above is fine, except the vertices are so there's no function involved. Edit: Oh, but you should call graphMap.size() instead of having a variable .  there's no func involved in my code, i know that, i wanna get ideas from experts, that how do i use to implement a tree structure for that graph that i created using map(stl container) i hope u might have understood my problem now... you also suggested me that maultimap is good, i agree with that.  @visanio_learner There are plenty of ways to implement a tree, each suited to different algorithms and applications. You have chosen one good way, but there's no way to say which is best without what you're doing. It seems you've solved the graph problem, and you need an answer to the functions problem, which is separate. Either way, I need more specifics to give a better answer.  i need to build a tree for this graph that i created for now, is ternary tree struct is good for me, since i have lots of children for root node itself, if my n-value is 5 city problem, then i might have 4 children... what should i use? is ternary tree is good enough to solve my problem  From the look of you diagram it seems that you want a tree where the nodes can have more than two children. If that's the case then the STL containers are not going to work for you. They are are self balancing binary trees.  If you're OK with a binary tree then there are a couple ways to do this. The first is to write functions and then to store function pointers or functors in the tree.  The problem with this approach is that all of your functions have to have the same type, i.e. take the same arguments and have the same return type. What's more, while they can define different behaviors, they cannot keep state, i.e. you cannot store data in a function pointer.  The second options, as you mentioned, is to write classes. If you need to vary the behavior of the nodes then the best way to do that is to define an interface and use polymorphism.  You did not say whether you need to force certain behaviors to be leaves and other to be internal nodes, or if the nodes need to be ordered in a particular way, but if you do then you may be able to accomplish this by creating a custom less-than function:  Again, if you need something that isn't a binary tree, though, then you're out of luck. And any way you slice this you will need to write some code implementing the behavior stored in each node, whether it's functions or classes.  I don't think OP is even aware that STL uses trees "under the hood." To him it's an irrelevant implementation detail.  @OliCharlesworth, look i have edited my query, look my coding so far i have done using #include<map>, i don't need 'set' stl container, i see map is one way to store data efficiently.  @Potatoswatter: In many senses, it is an implementation detail. and don't expose a parent-child relationship to the user, so they're not useful if you want an actual tree that you can manipulate in a tree-like fashion.  @Oli: Yeah, that's fair. I suppose I was a bit too focused on the idea of ordered storage and not enough on the tree structure itself, which, as you point, seems to be the main issue here.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  