 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I have implemented a BFS algorithm to detect cycles in a graph, this is the following code:  Where start is the starting node. where node is the following struct:  This is the Graph that I have constructed:  The output is: Has cycle Has cycle Has cycle  The correct output is nothing since there is no cycle. I have spent a lot of time trying to debug this, please help!  note: This is not a directed graph so I want them to be double edges  For undirected graph, for every connected component of size , if there are more then edges, there is a cycle in the graph  2 Answers 2  I presume you want a cycle of size 3 or more in an undirected graph. In that case, you should ignore the parent in the BFS traversal when checking for 'visited'.  no i dont want a cycle of size 3, it shouldnt output anything since there is no cycle (in an undirected graph)  I am saying that you have to remove a cycle of 'size 2' by checking the parent. Hence you are looking for a cycle of size 3 or more. This is an undirected graph, the parent is always the child's neighbour (2-cycle with respect to your implementation).  BFS does not for well for finding cycles in graph. for example have a look at the undirected graph , the BFS from will discover first , and then and , and will stop there - without detecting the loop.  Your implementation should NOT use an undirected edge twice, and your implementation does, for every , - it uses both and (*)  Your implementation only detects loops through , it will miss "laso" loops [loops that are reachable from , but do not contain ].  A possible solution: Note that for a not directed graph, for each connected component of size , if there are more then edges - the component is not a tree, and the graph has at list one cycle [since tree in a directed graph is the maximal structure without cycles]. So, in order to find if there is a cycle - you can just find all connected components [BFS is good for it], and check if each such component contains more then edges.  (*)2 is debateable actually - but in standard BFS implementation - there is no point to do it, since BFS is for discovery of nodes, and if you already used an edge - both vertices connected to it are already discovered.  170k2525 gold badges218218 silver badges320320 bronze badges  1  I don't see anything wrong with using the edge twice. You can always build an undirected graph from a directed graph implementation.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  