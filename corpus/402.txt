 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I did a quick search for DFS/BFS without Stack/Queue. I believe I am missing something. I was writing a small method for DFS:  Where TreeNode41, is a Binary node, with left and right references. It does not even need to check for visited, or non visited, when the recursive function has nowhere to go, it pops off, which sort of acts like a stack. This Algorithm traverses a binary tree, in a DFS fashion. However I feel like I am missing something. Is the stack data structure needed when one implements DFS Non-recursively? Or is it that, this algorithm will not work for cyclical graphs or something that's not trees?  When you implement DFS recursively, you're still using a stack - the stack you are using is the program's stack - the one that keeps track of local variables, and return addresses for called methods.  I see, that does make sense. It is just that I saw recursive implementations that explicitly implemented a stack, say like, an ArrayList of TreeNodes for example. Which then, kinda seems overly-redundant?  Without looking at the implementation(s) you're talking about, it's hard to say. Maybe the explicit stack was just to accumulate results?  Okay. Thank you. I just wanted to make sure that it was correct to do recursive BFS without an explicit stack. (Just so that I wasn't making any obvious errors) Thnx EDIT: Sorry one follow-up. It is known at DFS done iteratively, is more optimized than recursive DFS because of an accumulating function stack in recursive solution. Does this consider the fact the iterative one still uses a stack?  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  