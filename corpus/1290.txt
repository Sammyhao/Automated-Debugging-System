 unordered_map in C++ STL  unordered_map is an associated container that stores elements formed by the combination of key-value and a mapped value. The key value is used to uniquely identify the element and the mapped value is the content associated with the key. Both key and value can be of any type predefined or user-defined.  Internally unordered_map is implemented using Hash Table, the key provided to map are hashed into indices of a hash table that is why the performance of data structure depends on hash function a lot but on an average, the cost of search, insert and delete from the hash table is O(1).  Note: In the worst case, its time complexity can go from O(1) to O(n2), especially for big prime numbers. You can read more about this on how-to-use-unordered_map-efficiently-in-c. In this situation, it is highly advisable to use a map instead to avoid getting a TLE error.  C++  Output:  unordered_map vs unordered_set : In unordered_set, we have only key, no value, these are mainly used to see presence/absence in a set. For example, consider the problem of counting the frequencies of individual words. We can’t use unordered_set (or set) as we can’t store counts.  unordered_map vs map : map (like set) is an ordered sequence of unique keys whereas in unordered_map key can be stored in any order, so unordered. The map is implemented as a balanced tree structure that is why it is possible to maintain order between the elements (by specific tree traversal). The time complexity of map operations is O(log n) while for unordered_map, it is O(1) on average.  Methods on unordered_map A lot of functions are available which work on unordered_map. most useful of them are – operator =, operator [], empty and size for capacity, begin and end for the iterator, find and count for lookup, insert and erase for modification. The C++11 library also provides functions to see internally used bucket count, bucket size, and also used hash function and various hash policies but they are less useful in real applications. We can iterate over all elements of unordered_map using Iterator. Initialization, indexing, and iteration are shown in below sample code :  C++  Output:  A practical problem based on unordered_map – given a string of words, find frequencies of individual words.  Below is a C++ solution using unordered_map.  C++  Output:  Methods of unordered_map :  at(): This function in C++ unordered_map returns the reference to the value with the element as key k.  begin(): Returns an iterator pointing to the first element in the container in the unordered_map container  end(): Returns an iterator pointing to the position past the last element in the container in the unordered_map container  bucket(): Returns the bucket number where the element with the key k is located in the map.  bucket_count: bucket_count is used to count the total no. of buckets in the unordered_map. No parameter is required to pass into this function.  bucket_size: Returns the number of elements in each bucket of the unordered_map.  count(): Count the number of elements present in an unordered_map with a given key.  equal_range: Return the bounds of a range that includes all the elements in the container with a key that compares equal to k.  Recent Articles on unordered_map This article is contributed by Utkarsh Trivedi. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  