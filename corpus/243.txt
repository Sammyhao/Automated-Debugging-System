 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  In my header file I have included the std::map and use the appropriate namespace. One of my members is:  And in my .cpp file I attempt to do something that I have been doing frequently for some time now:  The above is even mentioned in one the examples of using std::map at cplusplus.com . Even though I have done pretty much the same in other parts of the code which cause no compile errors, on this particular line I get the following error from Cygwin:  Which seems rather strange. Any idea what might be wrong? (my header is, of course, included in my .cpp)  84422 gold badges88 silver badges1717 bronze badges  2  It's complaining that the iterator returned by begin() is a const_iterator, but you're assigning it to an iterator. But I'm not sure why, this looks right to me too. What compiler is this?  begin() seems to be capable of returning non-const iterators as well. I use Cygwin's g++ on windows.  4 Answers 4  It would seem that at the scope this loop exists, the map is const. For example, is the loop in a class method declared const, like so?  or passed as a const argument, like this?  If it is, you must use const iterators:  Or, if you're using C++11, then you should use the auto keyword:  Since in the case you've shown you must use const iterators, you can't use them to modify the map or the data within it. That's const correctness, and it's a good thing :).  An alternative is to mark the member as . But don't tell anyone I told you that :-)  The method running the loop is indeed const, and that makes me understand why the map is const in it's scope as well. Considering I don't need to edit it in this method, const iterators seem to the answer.  Well, the error says you're trying to cast a const_iterator to an iterator. You say that is a member. Is it a member of a const object? If it is, begin() and end() will return const_iterators.  Not sure to be honest, it's a declared private member of my 'nbclassifier' class, while the method that performs the loop is a member of that class as well.  An alternative is to mark the member as . But don't tell anyone I told you that :-)  Const is coming in somewhere. If the member variable isn't declared const, and if the method isn't declared const, then maybe the method is being called on a const object (which would make the member variable implicitly const). Does the compiler error come with a call stack? EDIT: wait, it would have to be a const method if it's being called on a const object.  Where in the error does it say that? it says : conversion from GARBAGE to non-scalar type LINE_NOISE requested.  You need to use const_iterators for maps, so it should be:  Edit: As pointed out the above is right, but for completely wrong reasons (maps have non-const iterators. What was I thinking exactly? I don't know). Most likely your map is defined as const (as pointed out in another answer).  23.5k66 gold badges6060 silver badges7575 bronze badges  4  1  Won't that cause issues when altering their value(it++)? Also, I have been using regular iterators for similar loops so far and never had problems.  @JohnAthanasiou: A mutable const-iterator is not the same as a const non-const iterator! Think vs .  John: const_iterators aren't themselves const, they just refer to a const object.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  