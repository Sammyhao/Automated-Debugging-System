 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  In a current project, I have a list of objects. And 2 of the properties are of type string[].  Currently I'm able to display the amount of items with their primary identifier. But alongside that I want to display all the different strings in the designated string[].  The class looks like this:  In my page, I have the following (working as described above)  And for completion, the setting of the binding:  But the DaysOfWeek gets displayed like: String[]-matrix.  I would like it to be something like "monday|friday|sunday".  If it would be possible to match this with a fixed set (in this case all the weekdays) and put a strikethrough through all the missing items, that would be great, but I would already be thankful for the first.  4 Answers 4  The problem is that you are binding the property of your to a instead of a .  What happens internally is that WPF calls the method on the string array, which results in "System.String[]".  What you want is to bind to .  There are various ways to do this. A highly recommended way would be to create a "view model" that holds the data you actually want to display rather than the data that, say, came out of a database or some other kind of model.  So, you could create a , which looks like this:  Then, instead of binding to objects, you bind to objects, which you create in your code behind class, like so:  This assumes you have a property in your code-behind.  If you want to understand more about view models in general, I recommend you read up on the Model-View-ViewModel (MVVM) pattern. Here as an article published by Microsoft to get you started. MVVM is considered by many to be a best practice for programming in WPF (and other XAML-based frameworks).  To handle your "extra credit" question regarding the strikethrough, that's going to be a bit more tricky. You would need to modify your view model to something like this:  Meanwhile, your XAML would need to present the days of week inside something like an , where each item is bound to a . Then you could use an to determine whether the should include a or not. (Sorry, I don't have time to write this part at the moment, but hopefully that's enough of a hint to get started.)  40.3k4747 gold badges168168 silver badges282282 bronze badges  2  I have considered this solution, but it seems at least unlogical to place another class in front of the model. And at every update, there is at least 2 objects that need to be updated (or 1 needs to be recalculated). But if I went with the approach, is there an idea for the second question?  I added some more content to my answer to begin to address the strikethrough problem. As for why bother with a view model? View models are not always necessary, but the larger your project becomes, the more helpful it is to create a hard separation between what needs to be stored in the database and what needs to be stored on screen. Reading up on the MVVM pattern would help make this more clear.  I basically agree with devuxer on his approach. On the other hand, if you wish to keep your model class, the easiest way to cover your second question will be adding converter from string array to TextDecorations.  You are welcome. It's off topic but I think it is better to change type of DaysOfWeek property from string array to array of System.DayOfWeek enumeration for safer matching.  You want to display DaysOfWeek as a text in a TextBlock. DaysOfWeek is a string array not a string so it will be not shown as you expected. You have to convert to a string and you can specify the format in the conversion function. You have to ways to convert your string array to a formatted string in WPF  First solution: The nicer but complex way  And apply it:  Second solution: simply use a property to specify the format:  whenever you assign value to string array it will automatically creates a string in that all array elements ware combined together with a delimiter , Since is a read only property you cannot assign value to it. you will get the value from this property as well at the time of binding  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  