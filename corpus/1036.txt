 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  i'm newbie in programming and my teacher asked the class to make a feel exercises in the judge system URI  When I tried to do this exercise the URI system said that my code exceeded the limit time, and ran in 2 seconds. My code was:  The output is always right, but I want to know if there are forms to optimize the running time, because the is a number between 2 and 500.000  doing probably isn't doing you any good, also you could do the search as you add the variables, and thirdly you could use or to do the duplicate search for you and they are much faster than pure python  25.4k66 gold badges3535 silver badges5555 bronze badges  1  Thaaaanks, I used your first but the judge system didn't accepted(idk why), but the second one was really much more faster than the others  the in your loop is another search through the whole list and thus making the runtime O(n^2). You can make use of the dictionary instead which implements a hash table and makes the search a lot faster and do the duplicate checking at the same time you are taking the inputs (with the already taken inputs!).  This code runs with python3. I couldn't check with the URI judge, as I don't find any submission link on the page. However, it should run within the limit.  A straightforward way to do this is to use a nested list (also known as a 2D array in C/C++/etc) to mark quadrants that have already been visited.  You traverse through the entries in the input one by one, and check if they have already been visited. If so, you set the answer to be 1 and stop processing further input. Otherwise, you set the corresponding entry in the list to True, to indicate that that particular (X, Y) quadrant has already been visited.  This means that you need to traverse the list at most once, which is about as efficient as you get.  Note that X and Y are constrained to be below 500 and hence those are the limits for the list you need to worry about.  However, note that this solution is not exactly Pythonic, but is the rough equivalent of what one would do in C or C++ without resorting to the standard library.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  