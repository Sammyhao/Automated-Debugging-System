 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I need to draw a corporate structure tree (sort-of like a family tree) in C#. All the ancillary code is there. It is colored, interactive, and fancy. The only trouble is the algorithm that actually decides where to put each node is giving me a lot of grief.  For the moment, boxes are 100x50 in size, and I have a class called which represents a staff member at a particular x,y co-ordinate.  The algorithm just needs to create a with the appropriate x's and y's.  This is incredibly tricky.  Basically the algorithm is recursive along the corporate structure, so left->right, then top->down along the tree. Obviously it is bad if two nodes are on top of one another.  I can think of a few algorithms that might produce something like this:  Whereas something like this would be better, since the tree is very large and space is very limited:  Have any of you had to draw a tree like this before? If you have I'm sure you've come across the many hurdles I've got. Any tips? So far I've spent an entire day on it.  2,67255 gold badges2121 silver badges3131 bronze badges  2  what are you trying to do? Shouldn't it be done in microsoft visio or something??  2 Answers 2  There are many good algorithms for drawing trees, each of which shows off some different property of trees. If you want to show off a hierarchy, there is this code for WPF that draws hierarchies. For a more general discussion of how to draw graphs and trees, considering looking at these lecture slides detailing many such algorithms. There's also these excellent slides covering similar material.  339k9494 gold badges838838 silver badges10141014 bronze badges  2  2  That's absolutely perfect! Just what I needed. It uses the Reingold-Tilford algorithm.  @user1002358 Thank you for that comment. I had trouble understanding the algorithm from the answer listed here, however Googling "Reingold-Tilford algorithm" lead me to this question, which I found more useful. I also summarized the steps for coding the algorithm here in case anyone else is looking for a simple explanation  You could use an iterative approach. Lay out the tree using something like the first example you used above. Then move nodes or subtrees closer to each other, while making sure no constraints are violated (eg: Nodes cannot overlap, child nodes must be below parent nodes).  Can be applied continuously to a changing tree.  Agreed, but sometimes an iterative optimization approach can be useful if a single pass algorithm is computationally infeasible for large numbers of nodes.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  