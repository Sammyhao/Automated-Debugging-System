 Check if the given permutation is a valid DFS of graph  Given a graph with N nodes numbered from 1 to N and M edges and an array of numbers from 1 to N. Check if it is possible to obtain any permutation of array by applying DFS (Depth First Traversal) on given graph. Prerequisites: DFS | Map in CPP  Approach: We assume that the input graph is represented as adjacency list. The idea is to first sort all adjacency lists according to input order, then traverse the given graph starting from the first node in the given permutation. If we visit all vertices in the same order, then given permutation is a valid DFS.  Store the indexes of each number in the given permutation in a Hash map.  Sort every adjacency list according to the indexes of permutation since there is a need to maintain the order.  Perform the Depth First Traversal Search with source node as 1st number of given permutation.  Keep a counter variable and at every recursive call, check if the counter has reached the number of nodes, i.e. N and set the flag as 1. If the flag is 0 after complete DFS, answer is ‘NO’ otherwise ‘YES’  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  