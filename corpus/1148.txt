 Shortest Common Supersequence  Given two strings str1 and str2, the task is to find the length of the shortest string that has both str1 and str2 as subsequences.  This problem is closely related to longest common subsequence problem. Below are steps. 1) Find Longest Common Subsequence (lcs) of two given strings. For example, lcs of “geek” and “eke” is “ek”. 2) Insert non-lcs characters (in their original order in strings) to the lcs found above, and return the result. So “ek” becomes “geeke” which is shortest common supersequence. Let us consider another example, str1 = “AGGTAB” and str2 = “GXTXAYB”. LCS of str1 and str2 is “GTAB”. Once we find LCS, we insert characters of both strings in order and we get “AGXGTXAYB” How does this work? We need to find a string that has both strings as subsequences and is shortest such string. If both strings have all characters different, then result is sum of lengths of two given strings. If there are common characters, then we don’t want them multiple times as the task is to minimize length. Therefore, we first find the longest common subsequence, take one occurrence of this subsequence and add extra characters.  Below is the implementation of above idea. The below implementation only finds length of the shortest supersequence.  C++  C  Java  Python  C#  PHP  Javascript  Output:  Below is Another Method to solve the above problem. A simple analysis yields below simple recursive solution.  Below is simple naive recursive solution based on above recursive formula.  C++  Java  Python  C#  PHP  Javascript  Output:  Time complexity of the above solution exponential O(2min(m, n)). Since there are overlapping subproblems, we can efficiently solve this recursive problem using Dynamic Programming. Below is Dynamic Programming based implementation. Time complexity of this solution is O(mn).  C++  Java  Python  C#  PHP  Javascript  Top Down Memoization Approach : The idea is to follow the simple recursive solution, use a lookup table to avoid recomputations. Before computing result for an input, we check if the result is already computed or not. If already computed, we return that result.  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  