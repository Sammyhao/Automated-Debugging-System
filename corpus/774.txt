 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  My inputs results , and I am getting following result .  I am using a stack. When I have manually checked this program the node is not going through at 4 on stack, even if has right sub tree.  2 Answers 2  The algorithm seems to be the recursive one adapted for iteration and  The class knows about being visited.  Here is a different solution (you will need to adapt it a bit):  Referring back to my first comments, you don't say you wrote pseudo code and tested it. I think this a key step in writing new algorithms.  This looks like a class exercise, designed to help you understand binary trees.  Before you write any code, draw a picture of your tree, with a value at each node, such as "A", "B", "C", etc. Then starting from the root node, see what you need to do to visit each node in order. Write what you have learned in pseudo code, and test it by doing what it says. Make sure you test all the different cases you can think of for each node (you should have at least three). Put about seven nodes in your tree.  Now you can start on your code. Type in your pseudo code as comments, then insert your Java code in between each comment.  2,74222 gold badges1212 silver badges1919 bronze badges  1  Thank you for you advice but this is not xlass exercise and i have already tested it using node circles and passing step by step and i have also printed conditions on eveey single iteration to know what actully happening.the actual problem is i have a right node 9 for 4 node even though it has a right node its not taking second condition where i am checking for right node as true. I have also implimented recirsive method befor i have started this which gives me perfect answer.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  