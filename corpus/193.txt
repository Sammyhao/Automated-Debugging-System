 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I'm trying to create a directed graph represented by an array of pointers to nodes, but I'm struggling to add nodes into each index of the graph. Here is what I have:  Here is how I am creating the graph:  I then try to add a node into index 0 in the graph in the following way, but I get an error that "operand types are 'Node' and 'Node*'":  Without changing either of my structs, how could I correctly add a node into an index in my graph's array of node pointers?  That would work just as well, but it doesn't look like that solves the issue of adding a node into an index in the graph's array of pointers  issue of adding a node -- Your attempt is not adding a -- it is attempting to add a , and that is wrong. So before an answer, what are you trying to accomplish? Is it to utilize an array of , or an array of ? If it's the former, your declaration in is wrong. If it's the latter, then add a and not .  I'm hoping to utilize an array of Node*, though correcting my declaration of graph to "Graph graph" doesn't seem to solve the issue. Is there a way to utilize an array of Node* while keeping my declaration of graph as a pointer to graph?  My point of is to emphasize the need to not allocate memory. C++ is not Java or other languages where every object needs to be created with .  3 Answers 3  is a pointer to an array of s. If you want an array of pointers, you need to declare it as , and allocate the array with :  Although correct, it is inefficient for no apparent reason. Almost always prefer a vector over a list. It is as easy to work with, but takes less memory and works faster on almost any conceivable use case:  Next, the code:  Holds a block of Node objects, not pointers to nodes. The best thing is to use a vector of pointers:  This way deallocation and memory management will be automatic.  Then your usage example becomes:  I then you can add a node into index 0 in the graph in the following way:  This was the better way to do it, but if you insist on:  Without changing either of my structs, how could I correctly add a node into an index in my graph's array of node pointers?  Then you should note that "graph's array" is not made of pointers, but of nodes. So adding nodes is done differently:  But now nodePointers is a misnomer, because it should be named nodes (not pointers).  Then add a node into index 0 in the graph in the following way (by this point it is already constructed):  Now let me explain you, Suppose you want an array of int then you can declare it as . What it shows in second case that x is an pointer which points to int object not to int pointer. I hope you got your solution.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  