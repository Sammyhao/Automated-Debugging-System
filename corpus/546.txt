 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I want to create a hash table for an exercise I have to send in my University. The program will open a number of files, break each file's content to (tokens) and it will save each in a hash table with the frequency of each .  In case the word is already in the hash table , the program will increase the word's frequency.  At the end the program will print the words and it's frequencies accordingly. Also the frequencies should be printed from the highest word frequency to the lowest. The comparison of the will ignore upper and lower case letters.  For example if a file contains : It should print:  four 4 three 3 two 2 one 1  The professor gave us a template that we should complete but I'm really confused on what to do with the and functions as well as the compare one.  Haven't got to the compile step yet. Trying to figure out the main functions in the program. Thanks for the tip though :)  3 Answers 3  I'll answer you in a new post because it's hard to be exhaustive in comments.  1. Malloc  Why would I need to use malloc then ? Shouldn't i write directly to the htable? (on the insert_ht() funtion)  You need to use malloc because you declare a char pointer in struct (). The thing is that you never initialize the pointer to anything, and as far you don't know the size of the token, you need to malloc every token.  But, as you use , you don't need to malloc token because strdup does. So don't forget to free every token in order to avoid memory leaks.  2. Segfault  I can't test you code, but it seems like the following line causes the segmentation fault :  Indeed, you try to access token while is NULL, and to assign a char * to a link type (list).  You need to loop with this :  3. Notes  should be .  Don't malloc new_list if you don't need to.  Because new_list if used when htable[hashval] is NULL, will set new_list->next to NULL.  You should use the -Wall option in gcc (for warnings) and you may use valgrind to understand your segmentation faults. In this case, use gcc with debug mode (-g).  96511 gold badge99 silver badges3131 bronze badges  3  Thanks for this. I think the main problem is with the fopen in the main program. I have no idea why i get the segmentation error . I run it like  Never mind. The error still exists inside . I changed what u said but still getting seg.fault.  @Scotoner Until today, i could not run your program. I will try it this afternoon, and we'll found what is the current problem.  Double and Final edit : Ι found the solution. Apparently for some reason my function was wrong. I still haven't figured out why but here is the correct one, hopefully someone else will find this post helpful!  Edit: deleted old answer . Found the correct way I think but I have another problem right now. The function doesn't work correctly. My is fine but it doesnt sort them with the frequiencies. I want them to be sorted from the highest to lowest .  In this example: the file contains -> one two three four Two Three Four THREE FOUR FoUr And I get: two 2 one 1 four 4 three 3  While I should be getting : four 4 three 3 two 2 one 1  takes a word of the file and puts into the hash table. In brief, if the word exists in the hash table, you just have to increment its frequencie. Otherwise, you need to create another node and put the frequencie to 1, then ad it to the array. At the end, you will have one entry for each unique word.  will be used by qsort. It returns 0 if elem1 = elem2, a negative number if elem1 < elem2 and a number > 0 if elem1 > elem2. By passing compare to qsort, you allow qsort to sort you array according to your own criteria.  may set all the values of the array to NULL, in order to restart another count ?  96511 gold badge99 silver badges3131 bronze badges  11  I'm having trouble figuring how to do the insert function mostly. I did this for the clear_ht():  @Scotoner You don't need to take htable as a parameter, as it is a global variable. Additionnaly, you don't need to because you didn't malloc'd it. Same thing for freq, it is an integer. But you will need to free every token because you will malloc them in the insert function, like this :  @Scotoner, you can't free something that hasn't been malloc'd or calloc'd. The reason is that malloc allocate the memory on the heap, and you need to manage yourself this memory. You may read this in order to help you to understand : gribblelab.org/CBootcamp/7_Memory_Stack_vs_Heap.html . So you will need to free tokens, because you need to malloc them, because you declare them with the and not I can only speculate concerning hash : usually, a hashCode should be a unique value associated with an element. So, if two elements have different hashcodes, they are different.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  