 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I'm trying to create an adjacency list implementation of a graph with linked nodes, visually it'll look something like this:  A graph of 3 nodes, with vertices numbered 0-2, right?  So Here is the code I am implementing:  I figured since the headnodes variable is global it would be fine but it's causing a RunTime error (Access Violation), apparently it's pointing to a null node (but it's global so wth)? I don't get what's wrong.  Can someone point me in the right direction. I feel I'm close.  because it gets initialized inside the Graph's Create function...right? From what I understand, the Graph's constructor creates a pointer to an array of headnodes, and initializes each head node to point to a null node. The Create function populates those headnodes. So it's no longer pointing to null nodes (That's I'm trying to attempt anyway)  1 Answer 1  Your problem is pretty straight forward. In your function you try to iterate over the adjacency lists however you continually index the which you probably know is outside the bounds of the array.  You pass in 3 as and assign it to and in your loop continue to index it as . You can verify this by adding before each access of ; you'll see each time.  You likely want to index them according to as that would be the iteration index.  12.3k88 gold badges4343 silver badges6969 bronze badges  3  That was the issue. Oh also, I made it global so my main function can have access to it. I couldn't get my program to work with the headnode variable as a private member of Graph  OK, feel free to accept it as the answer then. I imagined that although I can't recommend doing it. The better option is to encapsulate those aspects especially in this case. As you wouldn't be so crazy to corrupt your graph on purpose, it's generally not sufficient to assume the same from other users, graders, or professors. You should be able to provide a graph such that the user should not need or want to know about the notion of . My comment though was really to point out that visibility in no way guarantees an object isn't null. @mastrgamr  I understand that, I'm wrestling with null checking where nodes point to now. Good Luck to me! face-palm  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  