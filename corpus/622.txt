 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  Recently I came across one interesting question on linked list. Sorted singly linked list is given and we have to search one element from this list.  Time complexity should not be more than . This seems that we need to apply binary search on this linked list. How? As linked list does not provide random access if we try to apply binary search algorithm it will reach O(n) as we need to find length of the list and go to the middle.  12.6k2222 gold badges8383 silver badges124124 bronze badges  3  2  The cop-out answer is that if you're needing to perform a binary search, then you're using the wrong data structure. :)  6 Answers 6  It is certainly not possible with a plain singly-linked list.  Sketch proof: to examine the last node of a singly-linked list, we must perform operations of following a "next" pointer [proof by induction on the fact that there is only one reference to the th node, and it is in the th node, and it takes a operation to follow it]. For certain inputs, it is necessary to examine the last node (specifically, if the searched-for element is equal to or greater than its value). Hence for certain inputs, time required is proportional to .  You either need more time, or a different data structure.  Note that you can do it in O(log n) comparisons with a binary search. It'll just take more time than that, so this fact is only of interest if comparisons are very much more expensive than list traversal.  You need to use skip list. This is not possible with a normal linked list (and I really want to learn if this is possible with normal list).  44.3k1212 gold badges112112 silver badges137137 bronze badges  4  1  Skip list is the solution for binary search with linked list. Its not possible with normal linked list.  This should be the accepted answer. The top-voted answer is either misleading or incomplete. It only says that "you probably need something else" which is not very amazing. This answer hits the spot.  This answers clearly answers the "singly-linked list" case. The SkipList is provided as a reasonable alternative.  35211 gold badge55 silver badges1717 bronze badges  1  2  The method given by the paper in your link is even worse than a linear search since to find middle pointer will waste a lot of time.  As noted, this is not in general possible. However, in a language like C, if the list nodes are contiguously allocated, it would be possible to treat the structure as an array of nodes.  Obviously, this is only an answer to a trick question variant of this problem, but the problem is always an impossibility or a trick question.  45.9k1717 gold badges114114 silver badges193193 bronze badges  10  What would be the point of a linked list if the nodes are contiguously allocated?  @MarkRansom To give the interview question setter a feeling of superiority? To test for candidates who can work quickly with weird, crufty code? I do note that this is a trick answer to a trick question, after all.  It's not even a trick answer, as if you rely on elements being stored contiguously you give up the main advantage of it being a linked list - insertion/deletion time. So it's better than to use an ordinary array, and not bother about the linked list.  The answer with a skip list is the best answer because: 1) It answers the question directly saying that this is impossible with single linked list. 2) It provides a sensible alternative, as close to the presented problem as possible. I've downvoted every answer I've deemed deserving a downvote, don't worry. As a side note, I'm wondering who downvoted the skiplist answer recently - that doesn't seem wise, rather envious.  @BartoszKP This answer notes that it is impossible in the general case. You just like skiplists. As to "It provides a sensible alternative, as close to the presented problem as possible" that is nice, but it's not a reason to downvote answers which don't answer the question you wish had been asked.  Use MAPS to create LINK LISTS. Map M , M[first element]=second element , M[second element]=third element , ... ... its a linked list... but because its a map... which internally uses binary search to search any element.. any searching of elements will take O(log n)  Obviously trick questions and answers ...nobody cares of here ..what is wrong in this answer..can you explain Marcin  I downvoted this because it is incomprehensible, and as far as I can make sense of it, it does not address the question.  incomprehensible..how..it definately answer the question..linked list built with log n search time...and again ...DIFFERENT DATA STRUCTURE(Steve Jessop)...similar to this you can find in how link list is built in associative arrays in perl  (a) Profligate use of ellipsis and vertical space (b) you don't describe the datastructure fully, but it sounds like it's the required singly-linked list.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  