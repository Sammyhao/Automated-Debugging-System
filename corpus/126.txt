 Binary Search on Singly Linked List  Given a singly linked list and a key, find key using binary search approach. To perform a Binary search based on Divide and Conquer Algorithm, determination of the middle element is important. Binary Search is usually fast and efficient for arrays because accessing the middle index between two given indices is easy and fast(Time Complexity O(1)). But memory allocation for the singly linked list is dynamic and non-contiguous, which makes finding the middle element difficult. One approach could be of using skip list, one could be traversing the linked list using one pointer. Prerequisite: Finding middle of a linked list. Note: The approach and implementation provided below are to show how Binary Search can be implemented on a linked list. The implementation takes O(n) time. Approach :  Here, start node(set to Head of list), and the last node(set to NULL initially) are given.  Middle is calculated using two pointers approach.  If middle’s data matches the required value of search, return it.  Else if middle’s data < value, move to upper half(setting start to middle’s next).  Else go to lower half(setting last to middle).  The condition to come out is, either element found or entire list is traversed. When entire list is traversed, last points to start i.e. last -> next == start.  In main function, function InsertAtHead inserts value at the beginning of linked list. Inserting such values(for sake of simplicity) so that the list created is sorted. Examples :  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  