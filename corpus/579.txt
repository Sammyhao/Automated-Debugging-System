 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  The following is the code I used for finding the height in a BST. Although it works perfectly, I wrote this code by trial and error. Can anyone please explain how it works step by step? A dry run example of the code would be much appreciated.  I'm using code blocks to run this program. Can you please tell me how to use a debugger?@PaulMcKenzie  There is no "Debug" menu item or similar option? I don't use CodeBlocks. There has to be, since by default, CodeBlocks uses and the debugger is .  2 Answers 2  I will suggest you to change the name of the parameter to "node", accordingly to its meaning and also with lowercase letter.  Then, this code checks immediately if the root has children, if not it returns 0.  Then recursively you visit all the nodes of the tree from left to right and that is correct. When it reaches a leaf the value returned is 0, both for l and r, so the r value is incremented, and the execution continues. When the recursion is over you have the left and the right height of the tree minus 1 (the leaf counted 0 before) so 1 is added and you have the entire height.  Pay attention that this method returns the height of the tree but you cannot know which leaf is the deepest because you increment always r when 0 is returned in both l and r.  The most important thing to note is that it uses recursion meaning that the function calls itself (getHeight() is called inside getHeight() itself) in your code getHeight() is named height()  The height of the tree is equivalent to the depth of the recursion  The function getHeight() is recursively called as often as the lowest level of the Binary Search Tree is reached.The depth of recursion is the number (factor) that getHeight() is recursively called. Every call of getHeight() either increases a counter by one so in the end the value of the counter is the height of the Binary Search Tree or at the lowest level of the BST the number of 'level jumps' is determined by . This is the process how getHeight() determines the height of the Binary Search Tree.  The arrow-operator -> is used when a member of a structure is referenced by a pointer (in this case the structure 'p' is the tree or its current brach point 'left' and 'right' are the outgoing branches)  The critical point to understand is how recursion works. In physics and mathematics recursion is analog to self-mapping or self-reference  Alan Turing proved that every program that can be written in Imperative Programming can also be written in Functional Programming / lambda calculus (using recursion)  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  