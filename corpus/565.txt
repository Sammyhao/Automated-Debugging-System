 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  Hi I struggled with simple program that is doing lex sorting on the array of the integers  Running sort on the big enough vector of ints causes random numbers appear in the array and then depends on the data causing segfault.  Function to compare:  Basically when array is too long memory corruption shows up as there is heap buffer overflow. When compiled with address Sanitizer it show that:  Which is essentially first line of lex_compare function:  I cannot figure out kind of error here which causing this behavior? Is it due to size of compare function? or do I have some obvious memory read error? I work with clang 4.2.1 but other platforms are also causing same behavior so I presume is something fundamental wrong with sort function.  70711 gold badge1313 silver badges3535 bronze badges  5  1  With a rep of 375, you should know at this point that "pastebin" links shouldn't be used.  Why so much of convoluted code instead of ? And passing by const reference just to make a local copy on the first line...  from my prior experience the likely issue in a 'comparator heap overflow' error is almost always a mistake in the comparator code. incorrect or missed conditions in the comparator results in the comparator being called repeatedly in effort to sort the array, which never completes, thus resulting in a memory leak.  1 Answer 1  Your issue is you violate the compare requirement that the comparison function passed to is required to follow.  The compare requirement requires that If then but your comparison function does not do this. for example if and then brings you to the  part of you comparison function. Since the sizes are equal it returns . when we flip it and evaluate we get to the same block and will return again.  @Mazeryt To confirm the answer given, if you run the code you had at the pastebin link in Visual Studio, you get an assertion error that the comparison function is invalid. The test that NathanOliver mentions about flipping the values and doing the test a second time is exactly what Visual C++ debug runtime does to verify you do not have a bogus comparison function.  @PaulMcKenzie does this feature has some name? I am not running inside VS but only using clang, so curious if clang can catch this as well?  @Mazeryt It is part of MSVC's debug version of their standard library implementation. They've added a lot of "utilities" like this to help coders find problems faster in debug builds. I'm not sure if gcc or clang do that.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  