 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I am trying to implement a function to insert a node into a binary search tree. I am using the following code, but when I try to print to screen all I see is "root =1". Any suggestions on what I am doing wrong?  Have you tried running your code line by line in a debugger while monitoring the values of all variables, in order to determine at which point your program stops behaving as intended? If you did not try this, then you probably want to read this: What is a debugger and how can it help me diagnose problems? You may also want to read this: How to debug small programs?.  From looking at your code, it seems that your function is properly adding the new node to the tree. However, as a side effect, it is sometimes changing the global variable to the left or right node of the root, so that the rest of the tree gets lost. Your function should never change the root, unless .  Instead of making a global variable, you may want to make it a local variable of and pass it as a function parameter to . This will also make the recursive function call easier.  Recommendation: Get rid of the global . It's making things harder for you in several ways (for example, you can't have two BSTs at the same time) and can become a debugging nightmare. Pass the node in by reference with something like  3 Answers 3  insert(5): creates a new BTNode with value 5 and assign it to root  insert(10): create a new BTNode with value 10 and assign it to root. You no longer have a reference to the previously created node  insert(1): create a new BTNode with value 1 and assign it to root. You no longer have a reference to either of the two previously created nodes.  You can implement the insert function this way, which usually are member function of the BTNode class this is why i am calling them private/public but since you choose to implement them as function outside the class i am keep them that way.  First you have a public insert function  second you have a private insert function (Note that the pointer variable should be passed by reference otherwise it will change a copy of the pointer)  Your function is properly adding the new node to the tree. However, as a side effect, it is sometimes changing the global variable to point to the left or right node of the root, so that the rest of the tree gets lost. Your function should never change the root, unless .  Therefore, I suggest you rewrite your function so that it does not use at all, but instead receives a pointer to the node as a function parameter. This pointer must be passed by reference and not be value, because the function must be able to change the actual pointer that is passed, if it is . In order to accomplish this, you could for example change the function prototype to the following:  This will also make your recursive function call work properly, as the function can now be rewritten like this:  Your function would have to be rewritten like this:  However, since you no longer need to be a global variable (because it is passed as a function parameter now), it would probably be better to declare it as a local variable, like this:  Although this recursive solution to the problem works, an iterative solution would be more efficient. Therefore, you may want to rewrite your function like this:  This solution requires a pointer to a pointer (a so-called double pointer) instead of a reference to a pointer, because references can't be reassigned.  However, since the function prototype of has now changed, you would also have to adapt the function accordingly:  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  