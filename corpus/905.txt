 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  Currently, I have an Item class and a list of items representing flat data retrieved from a SQL Server 2012 DB query. Here is the Item class.  I need to transform this flat data into a tree structure and have the ability to traverse the tree while performing some action. Here is a visual of some data. My tree will always have a single root node.  I have seen several posts on SO pertaining to this but I'm still struggling with it. Here is the generic TreeNode class I have.  I'm having trouble recursively loading the flat data into the tree structure. I also don't understand how to utilize the Action inside the Traverse method to perform some task while traversing. To populate the tree, I believe I need to start with the root. I obtain it like this:  I can then load the first level down like so:  My two questions are as follows:  How can I recursively load everything?  How do I use the Action inside the Traverse method to simply write out the tree structure by item names with proper indentation (or perform any task for that matter)?  3,34999 gold badges4141 silver badges7979 bronze badges  3  1  One question per post, please. If someone answers the first question correctly, and the second wrong, and another one answers the first wrong but the second correctly, how would you choose what answer to accept?  I would change the name of your class from Item to Node which is normally used. Your Node has child defined wrong : public string Child { get; set; }. It should be public List<Node> Child { get; set; }or in the case of a binary tree have public Node Left { get; set; } and public Node Right { get; set; }  @jdweng - No, Item actually represents a part in our SQL database's bill of materials table and that class cannot change. There is a recursive CTE that spits out the flat list of items, which represent a BOM. I need to transform the flat list of items to an IEnumberable of TreeNodes. The flat Item in the list doesn't have a collection of children. I'm trying to map the flat item to nodes that have children (and a parent). Thanks.  2 Answers 2  You need to create a helper function (if you code in C# 7.0 you can do that as a local function and strip the parameter):  Calling it, as per your example after obtaining root:  Second question: Traversal  Your function does pre-order traversal and provides absolutely no information whatsoever on which tree level you are, and so cannot be used to perform indentation in output.  If you change the implementation to take like so:  Then you can calculate indentation level by counting parents:  if I add a property IsRoot on the TreeNode how can I access it inside the action?  If you use original Traverse function, you won't be able to. In my suggested implementation, the parameter is the TreeNode, so [you can access IsRoot] directly from the parameter.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  