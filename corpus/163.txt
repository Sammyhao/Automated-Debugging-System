 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I am trying to perform a breadth first search on a large graph. I have a list of the vertex's with each of its neighbors. I have put the data into a hashmap with the Key being the Vertex and the Value being a List of Vertex that neighbor the Key. I have tried the following but the second "For Loop" is running indefinitely because of the way I am using the Key/Value pairs to loop. But I can't think of another way to loop properly and hit each node.  the count attribute is used to track if a Vertex has already been visited.  Any help would be appreciated, just looking for a new way of thinking about how to loop through the HashMap. Or if I am doing something completely wrong :)  Right now i am just trying to iterate over each node and all its neighbours, If it looped correctly then at the end of the map the last element would be removed in myQ.remove(), which would then make the Queue null. When I step through the code the big problem is that I can't change from values to keys. if i have <key=3, value = 40, 25> once ive gone through and traversed the children of 3 (40,25) then I need to make 40 and 25 equal to the keys and start traversing their children... I just cant wrap my head around that  If I understand your question and sample code then all you are trying to do is iterate through all the map's values without visiting a vertex more than once. If so then you can do the following with Java 8:  If, however, you want to start from a root node and perform a breadth-first search (which is the normal mechanism) then it's a bit more complicated:  Here, I have not really tried this code, so it probably won't even compile as it is, but it should not be difficult to get it to work. As it is, it should give you a good idea of how the algorithm is supposed to work.  But, before you proceed with this, I would strongly recommend that you define a new class, encapsulating the map of vertices, and offering operations that make sense in graph terminology instead of java collections terminology.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  