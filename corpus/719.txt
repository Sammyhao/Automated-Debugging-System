 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I have problems getting to compile the BFS of a very simple graph. Whatever I do I get various compiler messages about unmatched method calls (I've tried and extending etc.)  2 Answers 2  You can see here a list of the overloads of . If you don't want to specify every one of the parameters you need to use the named-parameter version. It would look like this:  This would work as is if you had used as your VertexList storage in your graph definition or if you had constructed and initialized an internal vertex_index property map. Since you are using you need to change the invocation to:  You are already using an index map in your uint32_t bundled property. You can use to access it.  There was also a problem with your visitor. You should derive it from and the parameter of your member functions needs to be const qualified.  I could not make it work with class nested in a method (I still got weird compiler messages about template instantiation failure). Do you know what might be the problem?  @MaciejPiechotka As explained here before c++11 you could not use local types as template parameters. returns a struct that has the type of its argument as one of the parameters. Using makes it work with g++ 4.8.0 (although it still fails with clang 3.2).  I faced the same problem, but compared to the answer provided by user1252091 my vertex type is a struct that doesn't include an integer that can be used to create a vertex_index_map, therefore the line  wouldn't work in my case. Eventually I figured out how to create an external vertex_index_map (thanks also to this answer) and pass it to the breadth_first_search function. Here is a working example in case it helps others:  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  