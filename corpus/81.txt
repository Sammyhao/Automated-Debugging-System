 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  So I've been poking around with C# a bit lately, and all the Generic Collections have me a little confused. Say I wanted to represent a data structure where the head of a tree was a key value pair, and then there is one optional list of key value pairs below that (but no more levels than these). Would this be suitable?  It's only really a simple shunt for passing around data.  29.6k5757 gold badges181181 silver badges278278 bronze badges  3  1  This works great with a "using" statement (similar to the old typedef) in order to save some typing and make everything clearer. If you constantly use e. g. the (string, string) pair.  To expand on @AndreasReiff 's comment: near the top of each file that needs a struct. Though I found it more convenient to create a in my namespace:  One possible thing you could do is use the Dictionary object straight out of the box and then just extend it with your own modifications:  This gives you the advantage of not having to enforce the rules of IDictionary for your Key (e.g., key uniqueness, etc).  And yup you got the concept of the constructor right :)  I think what you might be after (as a literal implementation of your question), is:  You did actually say a "list" of key-values in your question, so you might want to swap the inner with a:  There is a KeyValuePair built-in type. As a matter of fact, this is what the IDictionary is giving you access to when you iterate in it.  Also, this structure is hardly a tree, finding a more representative name might be a good exercise.  Just one thing to add to this (although I do think you have already had your question answered by others). In the interests of extensibility (since we all know it will happen at some point) you may want to check out the Composite Pattern This is ideal for working with "Tree-Like Structures"..  Like I said, I know you are only expecting one sub-level, but this could really be useful for you if you later need to extend ^_^  @Jay Mooney: A generic Dictionary class in .NET is actually a hash table, just with fixed types.  The code you've shown shouldn't convince anyone to use Hashtable instead of Dictionary, since both code pieces can be used for both types.  For hashtable:  For dictionary:  And just the same for the other one with KeyValuePair, just use the non-generic version for Hashtable, and the generic version for Dictionary.  So it's just as easy both ways, but Hashtable uses Object for both key and value, which means you will box all value types, and you don't have type safety, and Dictionary uses generic types and is thus better.  You can declare the field directly as Dictionary, instead of IDictionary, but that's up to you.  It's ugly, but I think it will give you what you want. Too bad KeyValuePair is sealed.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  