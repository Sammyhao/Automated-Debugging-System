 Algorithm: There are basically two functions in this method. One is to print all nodes at a given level (printCurrentLevel), and other is to print level order traversal of the tree (printLevelorder). printLevelorder makes use of printCurrentLevel to print nodes at all levels one by one starting from the root.  Implementation:  C++  C  Java  Python3  C#  Javascript  Output  Time Complexity: O(n^2) in worst case. For a skewed tree, printGivenLevel() takes O(n) time where n is the number of nodes in the skewed tree. So time complexity of printLevelOrder() is O(n) + O(n-1) + O(n-2) + .. + O(1) which is O(n^2). Space Complexity: O(n) in worst case. For a skewed tree, printGivenLevel() uses O(n) space for call stack. For a Balanced tree, the call stack uses O(log n) space, (i.e., the height of the balanced tree).  Method 2 (Using queue)  Algorithm: For each node, first the node is visited and then itâ€™s child nodes are put in a FIFO queue.  Implementation: Here is a simple implementation of the above algorithm. Queue is implemented using an array with a maximum size of 500. We can implement queue as a linked list also.  C++  C  Java  Python3  C#  Javascript  Output  Time Complexity: O(n) where n is the number of nodes in the binary tree Space Complexity: O(n) where n is the number of nodes in the binary tree  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  