 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I need an org chart tree and I want to be able to collapse and expand the nodes at any level. I am new to JGraphX but from what I have read it sounds like the way to implement folding is to group the vertexes. The problem is when I create the group it puts all the child vertices inside the parent vertex.  Here is some example code that gives a great layout but does not support folding:  Produces:  Great start but no collapse button. The following code demonstrates the problem I am having. To support folding I attempt to create a group by changing the parent of the vertices from the default parent to the vDogVertex which is the root of the tree. This becomes collapsible, however all of the child vertices are inside of the vDogVertex and this ruins the trees layout.  Produces: (notice the collapse button)  How do I prevent the vertices from being inside the parent cell of the cell group? I want the tree hierarchy to be maintained but collapsible. Am I on the correct path using Cell Groups? What I am doing wrong?  I suspect I just need to tell the parent of the cell group (vDogsRoot) to allow cells to be draw outside its boundary but I do not see a way to do this yet. Or maybe I am taking a totally wrong approach. Thinking this should be a trivial thing to accomplish yet I have tried many different things and googled/read many docs and no success yet.  UPDATE 1:  Groups are not what I am needing here. I just need to traverse the directed tree and toggle showing the nodes below the selected node. Found a java script example named tree.html in the mxGraph examples folder. Just need to convert that example from JavaScript to Java.  1 Answer 1  Yikes, not sure how I feel about this but here is a solution. I partially converted the tree.html example from JavaScript to Java. I did not convert all of the code to Java; I didn't even try because I do not care about the location of the collapse button. I did get the functionality I desired. I did add a few codes that the super method was performing in case that portion is important to keep.  If anyone wants to finish converting the example and provide that to me I will gladly award you the answer instead of awarding myself the answer. Other ways to get awarded the answer - point out a bug in my code, improve it in someway or provide a better approach with code.  Here is my Java code:  Notice the tree becomes more compact (the remaining nodes come closer together) when collapsed. This is because of the handler that invokes the layout after fold occurs. This reduces the visual complexity of the tree which is good because my real tree will be pretty large.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  