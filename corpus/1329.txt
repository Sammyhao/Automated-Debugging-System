 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I guess everyone who had ever used Delphi's VirtualStringTree will agree that it is a great control. It is a "virtual" control (your data must be held somewhere else) so I was thinking what data structure is the best suited for such a task? IMO that data structure must support hierarchy, it must be fast and easily expandable. The easiest implementation would be using a record and that's what most of the documentation which can be found is suggesting. But what if you need to do some fast lookups, calculate totals, etc? What data structure you are using together with VirtualStringTree?  EDIT1: I'm using Delphi 2010.  OK, I'll try to give some more details about my requirements. Data size can be very variable, from 1 to thousands of items. Each item can hold multiple string, integer values. I need random access, my data can change many times during the application lifetime. Good performance is very desirable. I also need data saving and reloading.  EDIT2: Got 1 answer so I'll try to comment my opinion. Thanks, Dorin for your answer but I don't think your structure is very convenient. 1) It doesn't deal with hierarchy. 2) Having separate TStringList's or TList's for each node is not very effective IMO. With this implementation I can only lookup the current node's data, but can't effectively search in the whole tree.  I think this data structure must be like a tree. It must have nodes with ability to add children. Then I just could get node's data in OnInitNode event, check if my node has some children, set ivsHasChildren flag if so, then in OnInitChildren event set correct children count. Later in OnGetText event I could just fetch needed data from my node structure and set it to CellText based on the Column index. My idea is to have a separate data structure and do all the needed operations with it without a need to use VirtualStringTree. Hope someone got my point :).  EDIT3: I've found quite interesting JclTrees unit which at first sight could be used to achieve what I'm looking for. It belongs to JCL library. Lack of decent documentation makes it hard to quickly investigate it's functionality. I'll probably look deeper into it when I have some more time.  5,32511 gold badge2323 silver badges3333 bronze badges  12  @Linas Could you tell us more about the data you are wishing to store. How big is it? How does it change during your process lifetime? Do you need random access? What are the performance constraints? At the moment I feel your question is too general to offer meaningful advice.  @David a TList<your type> would be more suitable IMHO, but arrays are fine as well.  @David yes, it's an array of pointers, BUT it's easier to play with :-) that's my point.  3 Answers 3  OK, because given answers didn't solved my issues I've written my own tree data structure which imitates TVirtualStringTree and handles all the problems I mentioned in my question. Now I can optionally use only my data structure and all the changes in it will automatically update the VirtualStringTree. I think I will upload source code somewhere later and post the link here. Thanks for all the answers.  EDIT: I've uploaded source to the Google code: svTrees. There is a little demo that shows how it works.  5,32511 gold badge2323 silver badges3333 bronze badges  3  good that you have worked it out but I would comment that a significant reason for you not getting an answer that satisfied you was that your question was somewhat vague.  @David Maybe you are right but the solution was not easy to implement. Maybe because of that complexity it was not easy for me to describe my problem.  probably just trying to explain it here helped you understand the problem better! It often works that way.  I suggest using records(I'm not sure in which version of Delphi they added methods for records, I moved from D7 to D2010) so you can have something like:  if your version of Delphi does not support records with methods and you really need methods for nodes, then you will have to use objects to accomplish this, also have a look at generics.  Since you will only need to hold a few thousand items, I suggest using generics(no need to reinvent the wheel IMHO) i.e.  Now I assume that you would like to store all items from the virtual tree and load them later, you can do this by defining your own file structure, i.e.  now you will need to implement the load and save, I suggest saving and loading using TFileStream -- very straightforward,  pseudo code, sorry not time for partial code :-\  a) saving the content:  save the number of items in a TMyFileHeader variable and write it to file  for each item in the tree, save the integer list, save the string list  b) loading the content:  read file header -- so that you know how many items you need to read from the file  do a for Index := 0 to Count -1 read the item from the file  Note: that you can save the string list from each item directly to the current position in the file stream, however it would be wise to save it directly by using:  I hope this helps, the actual implementation of the code is up to you, have fun!!  @David Heffernan depending on his "actual" needs he can make compromises, if he needs to create maybe a million nodes, using objects will eat a lot of memory(now it all goes down to target system of course), however records will eat less, ANYHU you're more than welcome to come with a good answer :-P  – user497849  Jan 16 '11 at 21:46  @Dorin I said nothing about objects. For what it's worth I think that records are fine. That said, objects don't use any more memory - TObject has no member fields. My point is that the question is about the hierarchy, not how to store the information in a node.  I've mentioned in my question that records are quite good solution but using records doesn't address some issues as David said.  @David come on man, don't get so defensive :) but regarding "That said, objects don't use any more memory" -- why would anyone use objects without fields? same applies to records, but if you add one integer field in a object and one integer field in a record, you will see the difference when you look at .InstanceSize, now that being said, multiply by number of items(and subitems) and you get a lot of memory wasted + the create and free process which will take quite a few CPU cycles(again if there are many items).  If you want more control over what you put in there I would suggest that you create a xsd describing the structure you want and use the XML Data Binding Wizard to generate Delphi code that you can use.  This schema  will give you these interfaces to work with in delphi  131k2121 gold badges193193 silver badges269269 bronze badges  3  Interesting solution but I'm not a big fan of TXMLDocument because of it's external dependencies.  XML is still a great structure for a tree so if you do not like TXMLDocument you can use something else to access and modify the XML data structure.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  