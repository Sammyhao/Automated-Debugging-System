 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I've implemented the graph in the class as adjacency matrix with all required functions to access and modify it, the ones i needed in the DFS algorithm  now i tried to implement a recursive DFS but it always stuck at some point, it never recurse back after it calls itself again, so it works and finds the goal if it exists on its path before it reaches a leaf node, but then it stops after reaching a leaf node  It keeps track of the nodes by indicating colors, unvisited node is WHITE, node in progress is GREY, node that is done (visited and all children are visited) is BLACK.  Here's the kickoff function:  and here's the visit function:  Tested it on this graph:  It only finds the goal if it was within A, B, or D, otherwise it exits normally without errors  FYI, in case of tree, it's meaningless to check whether the node was visited or not, since there are no back edges.  As soon as you find an unvisited node you return the result of searching through that node, not considering any other children. You need to check if the recursive search was successful.  Sorry, it's graph, there could be cycles, just to avoid loops, and about finding the goal that's what the flag do, when it's raised each instance of the function which all supposed to be within the loop will get out of it to exit and won't do more search  1 Answer 1  You can further remove goal_f variable from parameters and statements involving it. A return value is sufficient.  EDIT: the problem was in this line of code  Here the function was returning even if the goal had not been found. So the remaining (in the queue) neighbors were not getting visited. The fix makes the function to return only if the goal has been reached. In the fix, there is also "return -1" statement in the end of the function, which indicates that the function finished without reaching the goal.  For assesment of code logic, memory, and readability, and suggestions of best practices you can post your code here: https://codereview.stackexchange.com/  12k44 gold badges6666 silver badges128128 bronze badges  3  Worked! I can see what you did, but i don't understand what was exactly causing the problem? that you avoided using the check. THANK YOU and i'll be grateful if you can explain it more. and about the goal_f already removed. also could you assess the code logic, memory, and readability quality from best practice perspective? because i'm still a beginner  @M.Allam Some quick code review: to save stack space, you shouldn't pass search_key, Graph and visited_nodes to the recursive function: you can store them as class member variables because recursive functions all get the same set of those parameters. Neighbors do not need a queue: it is sufficient to have them in an array and iterate over them, because FIFO functionality is not needed here. Also the hassle with subtracting 1 from current_node seems unnecessary: you can just use 0-based indexing in the recursive function.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  