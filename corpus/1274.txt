 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I am trying to implement trie data structure in C++ using class. In TrieNode class I have a array and an boolean value to determine if it is the end word. In that same class I have other functions appropriate to function like getters and setters and additionally insert and search.  Whenever I try to add a new word it is also setting the bool value as true at the end of each word by setting true to . But in searching function it is not determining the end of the word. Please guide me as I am new to this data structure, and please comment on the way i write the code and what is the appropriate way to write it(in a Professional way, if interested). Thanks!  c++ strings have the method to get the length. You don't have to determine the length the way you are right now. You can just use in your method  Also the actual string itself itself is NOT null terminated like c style strings. So you cannot and should not check for that  3 Answers 3  Your insert and search functions can be simplified a bit.  Consider this. (Read the comments in the below code, they illustrate what the code does)  Take advantage of the power of C++  Also your whole logic is a bit iffy to me. I wouldn't much around with ASCII values unless I needed to  Why are you including a whole bunch of headers? Just should suffice to do what does.  is a much more natural way to check for .  In production don't use Instead just preface stuff like and with . The reason for this is to avoid polluting the standard namespace.  Read a good CPP OOP book :). It will help you a lot.  Also I lol'd at and . Your anna and anni must be proud to be in your trie  1,54311 gold badge1919 silver badges3333 bronze badges  1  Hi I know this is too late @Srini thanks for the reply.. Yeah I improved a lot compared to that time. And yeah lol Anna and Anni reference too.. Easy one and first thought for example it came in my mind was them  There are many things I'd give you feedback on, but this isn't a code review site, it's for specific questions. I'll point out briefly a few things I notice though:  1) don't include C headers; use c++ ones instead.  2) what type is string?  3) you compute length (incorrectly, assuming answer to question 2 is "the standard c++ string class"), but you don't use it.  4) search() returns a bool but you don't return anything. When you find the end of a word, you should return from the function.  5) search() calls checkNull() at the top of the for loop without ensuring that it's not null. After this: it could be null, but then you loop and go through the pointer without testing it.  6) setNode is a public function, and unconditionally overwrites whatever is in the slot for the given variable. You can clobber an existing child if someone calls it with the same character twice and leak (and probably lose data in your tree.  7) search doesn't need to be a member of TrieNode. In fact, it doesn't access any data through "this". You probably don't want the TrieNode to be public at all, but an internal implenetation detail of Trie, which is where the search function should live, where the root should be stored and managed.  8) in c++ use nullptr instead of NULL  9) Looks like you need to debug search(), because it is not on the last letter when you check for end of word.  10) you need a destructor and need to deallocate your nodes. Or store them in unique_ptr<> for automatic deletion when your object goes out of scope.  11) don't "using namespace std;" in headers. It makes your headers toxic to include in my code.  The and functions are a mess. They use rather contrived ways to check the end of the string, duplicated unnecessarily and with a bug in one of the branches.  Here are simpler versions. They use string for the loop bounds, and the actions needed at the end of the loop are made after the loop, which is more natural.  I used the same style, but omitted the debug outputs for readability.  Also, the code did not actually use as a function, it didn't return a value. Instead, it relied on debug output to show the result. This is now corrected. A function complementing these is as follows.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  