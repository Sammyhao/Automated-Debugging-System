 Sort an array according to count of set bits  Given an array of positive integers, sort the array in decreasing order of count of set bits in binary representations of array elements. For integers having the same number of set bits in their binary representation, sort according to their position in the original array i.e., a stable sort. For example, if the input array is {3, 5}, then the output array should also be {3, 5}. Note that both 3 and 5 have the same number set bits.  Create an auxiliary array and store the set-bit counts of all integers in the aux array  Simultaneously sort both arrays according to the non-increasing order of auxiliary array. (Note that we need to use a stable sort algorithm)  Implementation:  C++  Java  Python3  C#  Javascript  Output:  Auxiliary Space: O(n) Time complexity: O(n2) Note: Time complexity can be improved to O(nLogn) by using a stable O(nlogn) sorting algorithm.  Using custom comparator of std::sort to sort the array according to set-bit count  C++  Java  Python3  Javascript  This problem can be solved in O(n) time. The idea is similar to counting sort. Note: There can be a minimum 1 set-bit and only a maximum of 31set-bits in an integer. Steps (assuming that an integer takes 32 bits):  Create a vector “count” of size 32. Each cell of count i.e., count[i] is another vector that stores all the elements whose set-bit-count is i  Traverse the array and do the following for each element:  Count the number set-bits of this element. Let it be ‘setbitcount’  count[setbitcount].push_back(element)  Traverse ‘count’ in reverse fashion(as we need to sort in non-increasing order) and modify the array.  C++  Java  Python3  C#  Javascript  Output:  Method 4: Using MultiMap Steps:  Create a MultiMap whose key values will be the negative of the number of set-bits of the element.  Traverse the array and do following for each element:  Count the number set-bits of this element. Let it be ‘setBitCount’  count.insert({(-1) * setBitCount, element})  Traverse ‘count’ and print the second elements.  Below is the implementation of the above approach:  C++  Java  Python3  C#  Output:  Time complexity: O(n log n)  Auxiliary Space: O(n)  This article is contributed by Nikhil Chakravartula and modified by Ashok Karwa. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  