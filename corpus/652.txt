 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  If I undestand correctly, the recursion stops when the program makes it to the empty leaf and therefore there are lacking " - " on the lower levels in the result. But how do I know how much of those I should draw on the lower levels? How to make this work?  @MatthieuM. That's actually bound to the main issue. If the tree was displayed correctly, the would have been on its place. In the means of data structure, it is a right child of the .  3 Answers 3  I instrumented the code to see where it went awry (since running a debugger in a browser...), you can see it live here. The reproduced function is:  And here is the bit of interesting output:  So, the issue is that you short-circuit whenever is 0, which is actually an issue: is not the right output unless is .  The only difference between being 0 and not being 0 is that you cannot read the value out of it (and thus get to replace it by ); however you only really read that value when is (beware, you might try to read or too), therefore there is no reason to test for unless you are in the branch.  Let us slightly reorder things then:  Note: I "highlighted" the modified lines with "comments".  262k4141 gold badges398398 silver badges665665 bronze badges  2  Now it's working perfectly! Thank you so much for tips and code! Such elegant solution, also thank you for sharing this liveworkspace link, taught me few tricks.  @raven_raven: liveworkspace (and other online compilers) is a good solution for quick and dirty experiment since we don't have a REPL in C++... and sharing it is so easy!  Here is my code. It prints very well,maybe its not perfectly symmetrical. little description:  1st function - prints level by level (root lv -> leaves lv)  2nd function - distance from the beginning of new line  3rd function - prints nodes and calculates distance between two prints;  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  