 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I'm developing an Android Java game and trying to minimize memory allocation in the game loop. Every game objects on every frame draw its items, which stored in ArrayBlockingQueue. Every ForEach cycle allocates little portion memory for iterator and on large scales (60 times per second, thousands of objects and items), it causes 0.1-0.2 sec GC delays that affect FPS:  All I need is to access all entries in ArrayBlockingQueue without changing it. Using method makes copy of queue and allocates additional memory.  How to iterate through ArrayBlockingQueue without memory allocation (GC delays)?  p.s. The game simulates factory supply chains - queues. All of them accessed from two threads (OpenGL thread, GameLoop thread) and I need thread-safe Queues. Should I use any other type of Queue or special collections that can be accessed from different threads concurrently?  This loop called 60 times per second, there are hundreds of objects containing a lot of items. Look at the profiler screenshot. All GC calls and allocated objects are shown - most of them are ArrayBlockingList iterators.  Game simulates factory supply chains - queues. All of them accessed from two threads (OpenGL thread, GameLoop thread) and I need thread-safe Queues. Should I use any other type of Queue or special collections that can be accessed from different threads concurently? p.s. can you explain why you downvoted my question? )  1 Answer 1  If you use Java 8 or later, you can use in order to iterate.  If you look at the sources, you can easily see that does not allocate an for this.  or do not provide a way to iterate without using an or converting it to an array/other collection. This seems to be the only way to iterate over an without allocating an extra object.  The disadvantage of this method is that you cannot access local variables that are not final or effectively final. You need to either create an object storing your variables or use a copy if you want to read local variables changed elsewhere.  You can also wrap variables if you need to change them in the iterator.  However, this allocates heap space for the , even if you can reuse the wrapper.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  