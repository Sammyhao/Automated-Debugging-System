 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I have some question about heapsort and about the heap involved in that.  when you build the meax-heap from an array, actually you build that heap a standalone object, or you just arrange the array to allow following the algorithm to build the heap to construct from that a max-heap?  after you rearrange the array in the order that represents a a max-heap you want sort that array or produce another array sorted from the elements of that array.  The algorithm to do that is:  A -- is an array example: {5, 3, 17, 10, 19,84, 6, 22, 9}  HEAPSORT(A)  From my point of view it seems to actually create a heap of array A size (a max-heap actually). Then on what is done actually the iteration, aparently is over the array and MAX-HEAPIFY - now on a shrieked heap somehow .  Can you clarify me with those things step by step?  55211 gold badge77 silver badges2121 bronze badges  4  (1) depends on the implementation - you can likely find code out there that takes either approach, or even something else... (2) after you have a max-heap, you can extract the elements in sorted order because of the defined properties of a max-heap - no need for another sorting pass, as elements have been sorted in the process of building the heap  Hi, thank you for the answer. In Max heap the elements are not in sorted order. Max heap guarantee that the root of every tree or subtree is the largest. That doesn't mean that the children are sorted like in a BST.  No, the elements themselves are not in completely sorted order. However, with the use of an auxiliary data structure (priority queue, for example), you can extract the nodes in order from a max-heap. Add the entire heap to the queue, then iteratively remove an element from the queue, print it, and add all its children in priority order to the queue - this results in always extracting the next-largest item...  On then what is doing that algorithm? i want to understand it correctly. Otherwise i can go on net and pick an implementation form there but that it is not clarifying me the things. 1 if actually there is no heap object constructed and only the array is ordered in the fashion to be created from him a max heap, then there it says that the heap is decreased so, actually you will need to shrink the array?  1 Answer 1  After, some time spent on searching I found why there is a heap-size, and also an array.length (the array is actually the object where the heap is represented). If you don't want actually to have more free spots at the array tail and when you add an element in the heap you you will increase the array size with only 1 spot, then you don't actually need the heap-size, because they will be always identical, and that is array.length.  However if you do that, that will be a naive implementation of the heap over the array, because every time when you add, or delete/extract an element to/from the heap/array the cost of that operation will be O(n) because you will be forced to copy the values of the old array into the new array.  But when we remove/extract a node, we are not shrinking in fact the array, the operation of removing will cost us in a max/min heap O(log n), why?  when we remove item/node - actually the root - from the heap we just do the following: (to simplify thing we will use int)  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  