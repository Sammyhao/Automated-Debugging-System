 Prerequisites: See this post for all applications of Depth First Traversal.  Approach: Depth-first search is an algorithm for traversing or searching tree or graph data structures. The algorithm starts at the root node (selecting some arbitrary node as the root node in the case of a graph) and explores as far as possible along each branch before backtracking. So the basic idea is to start from the root or any arbitrary node and mark the node and move to the adjacent unmarked node and continue this loop until there is no unmarked adjacent node. Then backtrack and check for other unmarked nodes and traverse them. Finally, print the nodes in the path.  Algorithm: Create a recursive function that takes the index of the node and a visited array.  Mark the current node as visited and print the node.  Traverse all the adjacent and unmarked nodes and call the recursive function with the index of the adjacent node.  Implementation: Below are implementations of simple Depth First Traversal. The C++ implementation uses an adjacency list representation of graphs. STLâ€™s list container is used to store lists of adjacent nodes.  C++  Java  Python3  C#  Javascript  Output:  Complexity Analysis:  Time complexity: O(V + E), where V is the number of vertices and E is the number of edges in the graph.  Space Complexity: O(V), since an extra visited array of size V is required.  Handling A Disconnected Graph:  Solution: This will happen by handling a corner case. The above code traverses only the vertices reachable from a given source vertex. All the vertices may not be reachable from a given vertex, as in a Disconnected graph. To do a complete DFS traversal of such graphs, run DFS from all unvisited nodes after a DFS. The recursive function remains the same.  Algorithm:  Create a recursive function that takes the index of the node and a visited array.  Mark the current node as visited and print the node.  Traverse all the adjacent and unmarked nodes and call the recursive function with the index of the adjacent node.  Run a loop from 0 to the number of vertices and check if the node is unvisited in the previous DFS, call the recursive function with the current node.  Implementation:  C++  Java  Python  C#  Javascript  Output:  Complexity Analysis:  Time complexity: O(V + E), where V is the number of vertices and E is the number of edges in the graph.  Space Complexity: O(V), since an extra visited array of size V is required.  Would you please write comments if you find anything incorrect or share more information about the topic discussed above?  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  