 Pointers in C and C++ | Set 1 (Introduction, Arithmetic and Array)  Pointers store address of variables or a memory location.  Using a Pointer:  To use pointers in C, we must understand below two operators.  To access address of a variable to a pointer, we use the unary operator & (ampersand) that returns the address of that variable. For example &x gives us address of variable x.  C  One more operator is unary * (Asterisk) which is used for two things :  To declare a pointer variable: When a pointer variable is declared in C/C++, there must be a * before its name.  C  To access the value stored in the address we use the unary operator (*) that returns the value of the variable located at the address specified by its operand. This is also called Dereferencing.  C++  C  Output :  Below is pictorial representation of above program:  Pointer Expressions and Pointer Arithmetic A limited set of arithmetic operations can be performed on pointers. A pointer may be:  incremented ( ++ )  decremented ( — )  an integer may be added to a pointer ( + or += )  an integer may be subtracted from a pointer ( – or -= )  Pointer arithmetic is meaningless unless performed on an array. Note : Pointers contain addresses. Adding two addresses makes no sense, because there is no idea what it would point to. Subtracting two addresses lets you compute the offset between these two addresses.  CPP  Array Name as Pointers An array name acts like a pointer constant. The value of this pointer constant is the address of the first element. For example, if we have an array named val then val and &val[0] can be used interchangeably.  CPP  Now if this ptr is sent to a function as an argument then the array val can be accessed in a similar fashion. Pointers and Multidimensional Arrays Consider pointer notation for the two-dimensional numeric arrays. consider the following declaration  In general, nums[i][j] is equivalent to *(*(nums+i)+j)  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  