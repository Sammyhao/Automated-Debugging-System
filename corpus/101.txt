 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  Are there any advantages to writing a BFS tree-traversal algorithm recursively vs iteratively? It seems to me iterative is the way to go since it can be implemented in a simple loop:  Enqueue root node  Dequeue node and examine  Enqueue its children  Go to step 2  Is there any advantage to recursion? It seems more complex with no advantages.  You seem to have answered your own question : "It seems more complex with no advantages". I see no advantages either, and all the implementations I have seen are queue based.  How would you even implement it in recursion? recursion is just stack behind the scene, where BFS is queue. I don't think it's even possible, without some wizardy  1 Answer 1  When considering algorithms, we mainly consider time complexity and space complexity. The time complexity of iterative BFS is O(|V|+|E|), where |V| is the number of vertices and |E| is the number of edges in the graph. So does recursive BFS. And the space complexity of iterative BFS is O(|V|). So does recursive BFS.  From the perspective of time complexity and space complexity, there is no difference between these two algorithms. Since iterative BFS is easy to understand, it is not surprising that people prefer iterative BFS.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  