 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I'm using MinGW as compiler and CodeBlocks as IDE. When there's a runtime error, the program simply stop working without any error messages. Is it possible to get conventional error messages like the type of error and where it occurs?  4 Answers 4  I know this isn't a real 'answer', but I'm still new, so I can't comment on the questions yet. Anyway, same thing as Mats said, try GDB. Here is the download page http://www.gnu.org/software/gdb/  If you never used a debugger, it basically runs your code line by line. You can control how far you want to proceed and where you want the code to stop to check for errors. Debuggers also keep track of other important information like variable values, variable addresses, loop counts, and so on.  If you don't want to use the debugger, you can always use print statements where you might suspect the program is crashing. For instance, if you have a function foo(), you can put a print statement on the first line of that function saying something like "in function foo". However, this method could become very tedious if you have a large piece of code. You must also remember to remove the print statements when you are finished.  97222 gold badges1111 silver badges1919 bronze badges  1  I don't know much about , but to my experience (for C/C++ developers - which includes cdt, gdb, ...) is a pretty good environment.  You can use a debugger, like GDB (documentation: http://www.gnu.org/software/gdb/documentation/) Personally, I think the best way of spotting the errors is by debugging your code by yourself. A useful code snippet:  When you suspect that you are accessing an invalid position in an array, you can try the followings:  or, if you like pure C++,  When you want to debug a recursive function, a very common source of runtime errors, add checks at the begin and at the end of your function, and maybe before or after each recursive call. For example:  A simple check at the begin of the function will help you spot easily the mistake(I know here is trivial to find why the program crashes, but in a more complex function, like DFS on a graph(DFS: http://en.wikipedia.org/wiki/Depth-first_search), it might be more tricky to find why the program causes error.  To determine where your error occurs, run your program in debug mode (set a breakpoint by clicking next to the line number; a red stopsign will appear). This will cause your program to pause execution on the marked line. You can then step to the next line (F7) or continue to the next breakpoint (shift+F7). This will allow you to deduce where the error occurs.  As for error codes, once your program stops working, the console will output the error code. For example, the following:  indicates a memory error, in this case that I attempted to delete a non-dynamic variable. Simply google the hexadecimal code.  I know using gdb is a too much steep curve but here's a link to a tutorial for gdb from where you can start debugging with gdb.!! Also if you are not familiar with compiling with terminal and using it then,  You compile the c++ program on Terminal using And then to run the program you do :  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  