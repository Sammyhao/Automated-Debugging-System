 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I've seen very often array iterations using plain pointer arithmetic even in newer C++ code. I wonder how safe they really are and if it's a good idea to use them. Consider this snippet (it compiles also in C if you put in place of ):  Wouldn't this kind of iteration result in an overflow and the loop being skipped completely when happens to become allocated at address (in a 32 bit address space) or (64 bit)? As far as I know, this would be an exceptionally unlucky, but still possible circumstance.  31.8k1818 gold badges102102 silver badges135135 bronze badges  10  Yes it would probably result in an overflow in that case. But no sane operating system is going to map memory at those addresses for you anyway.  I would use direct inequality rather than "less than". I.e. would be acceptable for what you're doing.  1 Answer 1  This is safe. The C and C++ standards explicitly allow you to calculate a pointer value that points one item beyond the end of an array, and to compare a pointer that points within the array to that value.  An implementation that had an overflow problem in the situation you describe would simply not be allowed to place an array right at the end of memory like that.  In practice, a more likely problem is comparing equal to , but this is not allowed either and again a conforming implementation would need to leave an empty place following the end of the array.  222k3535 gold badges297297 silver badges441441 bronze badges  8  I have fog on the brain tonight. Is lesser-comparison of pointer-types noted in the standard(s)? I know equality and inequality are, but honestly can't remember the other relational-ops.  @WhozCraig the relational operators are defined for pointer types but they are only allowed for comparing pointers into the same array otherwise it's undefined behaviour.  @Simple Roger that. I just found it in C99 §6.5.8,p5, including the specificity you mentioned about residing in the same array region. I assume similar specification is in C++ as well.  @WhozCraig: Since is always inside the range of the allocation, and friends are well-defined.  @WhozCraig: 5.9 p2 last sentence: "If two pointers point to elements of the same array or one beyond the end of the array, the pointer to the object with the higher subscript compares higher."  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  