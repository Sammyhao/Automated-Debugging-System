 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  Your arrays are bigger than the amount of memory available on the stack. Hence the stack overflow. You'll need to heap allocate them. And if this is C++ use . If it isn't remove the C++ tag.  As well as your stack problems, you're trying to write to dereferenced uninitialized pointers when you attempt to write to and , since you never provide any space for strings for those pointers to point to.  2 Answers 2  Ok... so I thought someone would provide an answer to your stack overflow problem but so far everybody only mentioned a problem you actually have (more on this later) that is unrelated to the stack overflow (it'll be problematic but only once you fix this first).  And then you try to allocate a bunch of really big arrays and run out of space  So you get a run-time error (stack overflow) because you've tried to use more stack space than what you have available.  The trick here is to use heap allocation (because on most platforms, at least all the ones I've heard of) the heap is massively bigger than the stack.  To allocate memory on the heap you use (also, when you're done with it don't forget to release the memory using , or else you'll leak the memory).  EDIT: Bonus: The other problem you have. Other answers seem to indicate you're access/dereferencing/using memory that's not allocated. You're partially actually fine on this point.  You scanf call point to a char array (here's the problem) and an int in the array k (no problem. So right now all the entries in the options array point to nowhere/anywhere. You need to allocate memory for them (again using ).  As for strdup it allocates the memory itself and returns the pointer, again no problem here. Just don't forget to free it after you're done using it because again this would be a memory leak.  char *options[100000] allocates 100000 string pointers, not strings. scanf is being passed gibberish.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  