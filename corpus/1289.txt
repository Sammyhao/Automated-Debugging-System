 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I observe strange behaviour by applying std::unordered_map::find() two times, each time saving the returned iterator, e.g.  Altough I look for the same key "a" the iterator points to different elements. The following sample code illustrates the problem:  Compiling with g++ -std=c++11 and running gives  where the first line is unexpected. It should be "a 1".  Changing the code to  results in the correct output  Furthermore just creating an unordered_map in the main file and applying find() works. It seems the problem is connected to the getter-method, maybe to return-value-optimisation. Do you have any explanations for this phenomena?  2 Answers 2  It's because you have undefined behavior in your code. The returns a copy of the map, a copy that is destructed once the expression is done.  This means you have two iterators that are pointing to no longer existing maps.  The solution is very simple: Make return a constant reference instead:  That it seems to work in the latter case, is because that's a pitfall of undefined behavior, it might sometime seem like it works, when in reality it doesn't.  does on a copy of original which is destructed after the expression is complete, making the iterators and to non-existing map, invoking an undefined behaviour  43.5k88 gold badges6666 silver badges109109 bronze badges  1  I feel a little bit dumb... The answer of @JoachimPileborg gives the perfect solution in my case. Many thanks to both of you!  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  