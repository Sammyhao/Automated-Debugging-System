 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  Question summary  When I use VBA's function, passing it an instance of the class available in a mscorlib.dll library reference (a .NET library reference), the value returned is .  According to VBA documentation here, this means the object is a string. This seems ridiculous.  My question is why is the function returning a string-type value for instances of this class from the .NET-library VBA reference? Is it a bug?  Background information  I suspect that the fact that VBA's function is saying a certain COM object is a string, may be why I'm having problems using the function on certain methods of certain COM objects. The COM objects are COM versions of .NET objects, made available through the .NET framework.  I'm using the mscorlib.dll VBA reference to get early-binding functionality for these objects. The reference refers to version 4.0.30319 of the .NET framework. On my computer, the type library for the reference is stored at:  It is looking like when the object method specifies that an argument or return value be of type , fails to work for me. Anyway, that is a separate problem that is circumstantial to the problem this question is dedicated to.  At the time of writing, I'm running the latest version of Excel (Version 1903, Build 11425.20202). My operating system is Windows 8.1.  When I use the function with instances of other classes from the mscorlib.dll library, I sometimes get return values of & ( & constants) which seems correct.  I researched on the internet to see whether anyone else had encountered the problem but couldn't find anything.  Code that can be used to reproduce problem  I expected to return , or some other appropriate integer. Instead, it returned which does not seem appropriate at all ( represents strings.)  Perhaps the object has a default property, in which case (as per the docs) returns the type of that property.  In unrelated news, if you're into C# and COM interop with anywhere from none to advanced knowledge of VBA, the open-source Rubberduck project is very much interested in your potential contributions! Feel free to create a new "support" issue if you don't have the 20 reputation points needed to talk in our dev chat; a moderator can grant you access if you want in =)  Yes Rory, I believe the answer has to do with the type of the default property being returned. I should have read the VarType documentation more thoroughly - didn't expect such functionality. Thanks for looking into this.  3 Answers 3  If you open the typeLib with OleView for example, and navigate to the interface (not the first _Object one, the dispinterface, but the second one) you'll see this:  So, the .NET method is declared to COM/Automation clients as  Which means it's seen to COM clients that understand this "syntactic sugar" (VB/VBA/VBScript/JScript/.NET, etc.) as a Property (propget + out + retval) named that returns a String (BSTR).  Now, means it's the default property, because 0 represents DISPID_VALUE, a special well-known id.  If an object has a default property, VarType(object) returns the type of the object's default property.  (which I always found a pretty strange design decision...)  121k1818 gold badges233233 silver badges276276 bronze badges  6  how does one actually get to the view you show in the image please? Is a download required?  @QHarr - OleView.exe is available with Windows SDK, in a path like C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x86 fore example. If you have Visual Studio, you should have it as well.  This answer seems to be spot on the correct answer. Thank you so much for this. I should have read the VarType documentation properly - didn't expect such behaviour. I learnt of the function from someone else's code who seems to have more or less made the same mistake as me. I've learnt so much from these Stack Overflow answers. Thank you.  @MarkFernandes feel free to mark the answer as "accepted" by clicking the hollow green checkmark under the up/down voting buttons near the top of the post. IMO the explanation doesn't get any more canonical that this.  For anyone who is interested, I've created a pull request on GitHub for the VarType documentation, to make it more clear in the documentation that VarType has this 'unusual' behaviour. See 'github.com/MicrosoftDocs/VBA-Docs/pull/956' for the request.  Looking at the reference source for , I'm not seeing any attributes, but assuming the first member gets marshaled with , that would make the method the COM type's default member.  That's the only explanation I have for outputting , rather than blowing up with error 438 as it normally would without a default member.  So the problem isn't so much with .NET/COM interop, rather it's about dealing with getting metadata out of an object that has a default member: you would have the exact same problem with any COM object that has a default member:  I can't think of a way off the top of my head to make work with these. On the other hand, a check works fine:  66.5k88 gold badges9898 silver badges211211 bronze badges  1  This answer appears to be more or less correct. Thank you so much for this. I should have read the VarType documentation properly - didn't expect such function behaviour. I learnt of the function from someone else's code who seems to have more or less made the same mistake as me. I've learnt so much from these Stack Overflow answers. Thank you.  I think a part of the problem is that VBA evaluates expressions in certain cases (maybe someone can add more information on when/why this happens). So, when you make the call to , the variable is actually being converted to a string representation, and the type is taken.  As an example, if you write , the output will be . If you write on a different, concrete object, the system will possibly throw an error.  Yes, I thought that the ToString method probably had something to do with it, but missed reading the VarType documentation where it says that the type of the default property is returned - didn't expect such behaviour. Thanks for looking into this. Hopefully, this Stack Overflow question will help others.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  