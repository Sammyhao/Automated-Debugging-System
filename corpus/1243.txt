 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  i was trying to solve this problem on codeforces http://codeforces.com/contest/686/problem/D, but i got TLE. could you tell me what takes so much time in my solution? is it data structures that i use or is the algorithm inefficient? how can i improve it?  The first loop in the function can be avoided. The second loop can be a single call to (though a loop might be good to reserve memory for the vectors). In the and functions you copy a vector, instead of having a reference. There are probably other small things that can be optimized or improved.  Oh, and C++ doesn't have variable-length arrays so your definition of in the function is really not valid. Use here too.  @shotakobaxidze In the function arguments yes, but what about the local variables ?  1 Answer 1  In the worse test case, your solution my have complexity of O(n*q). I think the best solution for this problem is for each node of the tree, you create a vector of its descendants at index 1,2,4,...2^x upon it. With that vector, for each query, it takes O(log(n)) to find the answer.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  