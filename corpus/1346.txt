 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I'm fairly new to C++, and I don't understand what the pointer does in the following scenario:  I grabbed that from someone else's post on here.  What does point to? I'm confused. The function has no input, so what is doing?  All non-static methods have an implicit pointer. In typical C++ implementations, it is passed in the first integer argument slot.  I would avoid doing something like this - any function which "does something to a foo" should probably be a member function/method of Foo!  How about "is probably a good candidate to be a method of Foo"? Care to provide a counter example for me? :)  8 Answers 8  The keyword identifies a special type of pointer. Suppose that you create an object named of , and has a non-static member function . If you call the function , the keyword in the body of stores the address of .  The short answer is that is a special keyword that identifies "this" object - the one on which you are currently operating. The slightly longer, more complex answer is this:  When you have a , it can have member functions of two types: and non-. The non- member functions must operate on a particular instance of the class, and they need to know where that instance is. To help them, the language defines an implicit variable (i.e. one that is declared automatically for you when it is needed without you having to do anything) which is called and which will automatically be made to point to the particular instance of the class on which the member function is operating.  Consider this simple example:  When you compile and run this, observe that the value of is different between and .  Just some random facts about to supplement the other answers:  When the object is , the type of becomes a pointer to .  The pointer can be used to access a member that was overshadowed by a function parameter or a local variable.  Multiple inheritance will cause the different parents to have different values. Only the first inherited parent will have the same value as the derived object.  this is a pointer to self (the object who invoked this).  Suppose you have an object of class Car named car which have a non static method getColor(), the call to this inside getColor() returns the adress of car (the instance of the class).  Static member functions does not have a this pointer(since they are not related to an instance).  this means the object of Foo on which DoSomething() is invoked. I explain it with example  and our class  now we instantiate objects like  similarly whatever the string will be passed to Foo constructor will be printed on calling DoSomething(). Because for example in DoSomething() of above example "this" means fooObject and in do_something_to_a_foo() fooObject is passed by reference.  Acc. to Object Oriented Programming with c++ by Balaguruswamy  is a pointer that points to the object for which function was called. For example, the function call will set the pointer to the address of the object. The pointer is acts as an implicit argument to all the member functions.  Nonstatic member functions such as have an implicit parameter whose value is used for . The standard specifies this in C++11 §5.2.2/4:  When a function is called, each parameter (8.3.5) shall be initialized (8.5, 12.8, 12.1) with its corresponding argument. [Note: Such initializations are indeterminately sequenced with respect to each other (1.9) — end note ] If the function is a non-static member function, the parameter of the function (9.3.2) shall be initialized with a pointer to the object of the call, converted as if by an explicit type conversion (5.4).  As a result, you need a object to call . That object simply becomes .  The only difference (and it's trivial) between the keyword and a normal, explicitly-declared pointer parameter is that you cannot take the address of .  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  