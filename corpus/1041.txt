 Queue â€“ Linked List Implementation  In the previous post, we introduced Queue and discussed array implementation. In this post, linked list implementation is discussed. The following two main operations must be implemented efficiently. In a Queue data structure, we maintain two pointers, front and rear. The front points the first item of queue and rear points to last item. enQueue() This operation adds a new node after rear and moves rear to the next node. deQueue() This operation removes the front node and moves front to the next node.  C++  C  Java  Python3  C#  Javascript  Output:  Time Complexity: Time complexity of both operations enqueue() and dequeue() is O(1) as we only change few pointers in both operations. There is no loop in any of the operations.  Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  