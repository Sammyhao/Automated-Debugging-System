 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I have a which I want to iterate over the list and print out each number. I keep getting a compile error talking about conversion between a const_iterator and iterator. What am I doing wrong with this?  Yes it's const I didn't understand since I didn't define it as const in the protected section. It became const with the function(that is const) inside the class completely forgot it was a const function.  3 Answers 3  66.7k1818 gold badges156156 silver badges287287 bronze badges  4  Interesting I never heard or read about auto before. Need to read about it and learn. Thanks.  @LF4 If you use Visual C++ 2010 or higher, or gcc 4.4 or higher, it should compile.  I'm using gcc 4.4.6, have any suggested sites to read about auto? I'm trying to find it on cplusplus.com but it's pulling up a lot of functions of each class (which makes sense if they implement it).  Either your is , or your map is a member of a and you're calling this code in a function, which also makes your . Either way, you can't have a non- operator on a container.  EDIT: Am I the only one who prefers to use explicit types over ?  242k6060 gold badges438438 silver badges604604 bronze badges  1  Thanks, that solved the issue, compiled and got something similar with the list as well added const_iterator and now it works. I didn't know about the const_iterator.  150k1616 gold badges215215 silver badges290290 bronze badges  6  God so much cleaner.... I haven't used C++ in over a decade though, what's with the ? I thought deduced the full type down to the reference.  create a local initialized to the values of the items in the range. creates a reference bound to the items in the range. If you want to avoid copies, or if you want to modify the items, you have to do .  Wow a foreach in c++ that is great. I tried implementing it but got the error, "expected initializer before ‘:’ token". This is implemented in a class function and words is a protected map and not in the function itself, if that matters.  @LF4 - You mentioned that you use g++4.4.6. It looks like your g++ is too old for this feature. It is in the C++11 standard, and it was implemented in G++ 4.6.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  