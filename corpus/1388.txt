 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  The base class library in .NET has some excellent data structures for collections (List, Queue, Stack, Dictionary), but oddly enough it does not contain any data structures for binary trees. This is a terribly useful structure for certain algorithms, such as those that take advantage of different traversal paths. I'm looking for a correctly written, free implementation.  Am I simply blind, and not finding it... is it buried somewhere in the BCL? If not, can someone recommend a free or open-source C#/.NET library for binary trees? Preferably one that employs generics.  EDIT: To clarify what I'm looking for. I'm not interested in ordered dictionary collections that internally use a tree. I'm actually interested in a binary tree - one that exposes its structure so that you can do things like extract subtrees, or perform post-fix traversal on the nodes. Ideally such a class could be extended to provide the behaviors of specialized trees (ie. Red/Black, AVL, Balanced, etc).  124k3131 gold badges210210 silver badges261261 bronze badges  1  Agreed. I occasionally have the need to find (in O(Log N) time) the two nodes which bound a value (when the value is not found in the collection). For example the collection (tree) contains 13 and 17 (among others) and I am looking for the greatest less than and least greater than 16. A tree could do this, but Dictionaries, sorted lists, and hash tables take O(N).  8 Answers 8  26.8k1010 gold badges6262 silver badges6363 bronze badges  6  This however requires you to know how many tree levels you will handle at compile time, am I wrong ?  @Veverke Perhaps you were thinking of C++ templates. .NET generics are runtime types.  To make it an ordered tree inherit from System.Collections.Specialized.OrderedDictionary  A tree is more a pattern than a data structure, and they tend to be used where performance matters (so implementation details probably matter too). If the BCL included some kind of a tree class, you'd only have to roll your own anyway  And those are only the search trees. There are also expression trees, decision tress, ...  Indeed, the implementation details matter. In my case, I'm looking to implement some algorithms that would perform different traversals (infix, postfix) on an organized set of data as part of a series of transformations. A tree structure is the most elegant way of solving my problem.  In a parallel universe someone is asking the question: "Why are there no list types in .Net?", and they get the answer: "What would you want from such an implementation? An array? A linked list? A queue? A dictionary?" I think this is a non sequitur answer.  You're right, there's nothing in the BCL. I suspect this is because the choice of whether to use a tree is typically an implementation detail and is otherwise an unconventional way to access data. That is, you don't say, "binary-search-for element #37"; instead, you say, "get me element #37".  But have you taken a look at C5? It's super-handy and they have several tree implementations (1, 2, 3).  290k4242 gold badges330330 silver badges351351 bronze badges  1  3  C5 supports Red Black trees not B-Tree. They are differences whick people should be aware of. B-Tree is more optimal for a disk based tree or large memory based tree. More nodes are kept in the same locality so you get better processor cache performance and is quicker to read write to disk.  I believe that as the log(n) insert, retrieval characteristics that you would expect from a Tree Data Stucture.  is implemented as a binary search treeref. internally makes use of so it too is a binary search tree ref.  9,86222 gold badges3232 silver badges4545 bronze badges  1  6  Unfortunately these are simply implementations of ordered maps and lists. Neither is helpful for reuse as a binary tree - these tree structures are simply an implementation detail of the collection. I'm actually looking for a class that exposes the tree structure.  No, there isn't any "-like" type in the BCL (something that has always puzzled me as well) but here is a good article that will walk you through implementing your own in C#.  I guess you could make the argument that tree-based data structures are less commonly used in the kind of applications that .NET is usually used for (business apps, data-moving apps, etc.). Still, I agree with you, it is strange that the BCL has no implementation at all.  This series of articles was helpful for me when I had to write my own especially part 3 and 4.  There's a TreeNode you can use. It's not generic and hidden away in windows forms and used with the treeview control, but you can use it elsewhere as well.  373k107107 gold badges539539 silver badges772772 bronze badges  3  Yeah, but it just has a Tag property of System.Object ype. No Generic <T> parameter  I always feel weird about doing stuff like that. It's less visible with your specific example, but if people routinely re-purpose classes from, say, dependencies, this can result in hard-to-explain dependencies and can get you into trouble if the re-purposed class changes in an unexpected way across dependency versions.  What would be the profit of using it? A tree node does usually not have any relevant functionality in it. It just holds references to childs and eventually a parent. No reason to misuse a System.Windows.Forms class for it! Just write it yourself - in a minute or less.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  