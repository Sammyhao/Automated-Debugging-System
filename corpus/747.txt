 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  Here is my implementation of and for Doubly Linked List. Program has mandatory tests. When I am running my program I get error from tests:  "Decrement operator moves the iterator backward, Prefix", due to a fatal error condition: SIGSEGV - Segmentation violation signal  What am I doing wrong?  test.cpp // here is my test file where I get error //  list.hpp  list.cpp // my implementation of iterator and const_iterator //  @DrewDormann This error triggers on prefix decrement operator of iterator class and const_iterator. (I've commented this error in post)  It would help, to point to which line of the test causes the error to happen and in which line of the operator method (not just which method) the error occurs. It may be a dumb question from my side, but where's the "append_to_list" implementation.  1 Answer 1  The problem is that you are using a null as your end(), which fails to work with operator--; there's no way to decrement it to get at the last node of the list.  You need to use something else as your end sentinel which allows you to get back to the list -- either a fake 'node' on the list that isn't an element of the real list, or add a pointer to the original list to the iterator classes, so when you decrement the end() iterator you can recover the last node in the list.  Since your iterator already has an pointer, it's easiest just to use that:  107k1212 gold badges119119 silver badges206206 bronze badges  2  I understood you, but I have no idea how to fix this problem. Can you write solution please?  Your iterator has a list pointer. Use it to get to get the tail node if the current node is null.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  