 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  So I have this question and it says create a class queue and make the method dequeue and enqueue  Here's what I have so far, could someone direct me on the right track?  While this won't help you if this is for a class assignment, if you want to use a queue data structure in the future, you should almost always use rather than writing your own. It's implemented in C (and so very fast) and has had years of testing (so you're unlikely to stumble onto any bugs).  2 Answers 2  by itself refers to your class, not to the instance's attribute with the same name, which is . You have to use the all the time. And it would really help to give the class and its attribute different names, to avoid this confusion. (It would also help to use PEP 8 style and name the class .)  When the queue is not empty, you do compute the return value , but you never it; you just fall off the end of the function, which means you automatically return .  is trying to slice the type , not your actual list (). What you wanted is .  You probably don't want to return a string—which could be a perfectly valid thing to stick in the queue—on errors. That's exactly what exceptions are for.  Your takes an argument that it never uses. You probably wanted to use this as a starting value for the queue's contents. And you probably also want to make it optional.  The function doesn't take a like for its first argument, it takes an index like .  If this is Python 2.x, you do not want to create classic classes; if you have nothing else to inherit from, inherit from `object.  It looks like you may be mixing tabs and spaces for indentation. Don't do that.  Plus, there are a few things that could be simpler:  If you want to slice to the end of a list, just leave off the end, like , instead of using .  But to both fetch and remove a value from the left side of a list even more simply, you can use .  To add a value to the right side of a list, you can use .  To check if a list is non-empty, just do , not . Empty collections are always falsey, and non-empty collections truth.  But you really don't need to check anyway—if the list is empty, will raise an exception, which is exactly what you wanted to do.  So:  If you want to customize the exception, so it says, e.g., instead of , you can do that with a statement:  If you want to test that your queue class works properly, you will need to write test functions, and then call them. For example:  Now you can just run the file as a script, and it will run your tests.  In real life, you'll want to think of more complete tests that cover all the weird edge cases you can think of. And you'll probably want to use the library or a third-party solution like to organize and simplify your tests.  327k3838 gold badges543543 silver badges624624 bronze badges  2  Okay, thank-you for your answer that was very helpful. How would I go about running this then?  @user2928929: Well, you need to write some kind of function that uses a queue, and the call that function. I can add an example to the answer.  you did not return element when self.queue is not empty  And you'd better not return a message when queue is empty, should just raise exception  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  