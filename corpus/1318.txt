 Vertex Cover Problem | Set 2 (Dynamic Programming Solution for Tree)  A vertex cover of an undirected graph is a subset of its vertices such that for every edge (u, v) of the graph, either ‘u’ or ‘v’ is in vertex cover. Although the name is Vertex Cover, the set covers all edges of the given graph. The problem to find minimum size vertex cover of a graph is NP complete. But it can be solved in polynomial time for trees. In this post a solution for Binary Tree is discussed. The same solution can be extended for n-ary trees.  For example, consider the following binary tree. The smallest vertex cover is {20, 50, 30} and size of the vertex cover is 3.  The idea is to consider following two possibilities for root and recursively for all nodes down the root. 1) Root is part of vertex cover: In this case root covers all children edges. We recursively calculate size of vertex covers for left and right subtrees and add 1 to the result (for root).  2) Root is not part of vertex cover: In this case, both children of root must be included in vertex cover to cover all root to children edges. We recursively calculate size of vertex covers of all grandchildren and number of children to the result (for two children of root).  Below are implementation of above idea.  C  Java  Python3  C#  Javascript  Output:  Time complexity of the above naive recursive approach is exponential. It should be noted that the above function computes the same subproblems again and again. For example, vCover of node with value 50 is evaluated twice as 50 is grandchild of 10 and child of 20.  Since same subproblems are called again, this problem has Overlapping Subproblems property. So Vertex Cover problem has both properties (see this and this) of a dynamic programming problem. Like other typical Dynamic Programming(DP) problems, re-computations of same subproblems can be avoided by storing the solutions to subproblems and solving problems in bottom up manner.  Following is the implementation of Dynamic Programming based solution. In the following solution, an additional field ‘vc’ is added to tree nodes. The initial value of ‘vc’ is set as 0 for all nodes. The recursive function vCover() calculates ‘vc’ for a node only if it is not already set.  C  Java  C#  Javascript  Output:  References: http://courses.csail.mit.edu/6.006/spring11/lectures/lec21.pdf Exercise: Extend the above solution for n-ary trees. This article is contributed by Udit Gupta. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above  Approach for any general tree :  1. Approach will be same dynamic programming approach as discussed.  2. For every node, if we exclude this node from vertex cover than we have to include its neighbouring nodes,  and if we include this node in the vertex cover than we will take the minimum of the two possibilities of taking its neighbouring  nodes in the vertex cover to get minimum vertex cover.  3. We will store the above information in the dp array.  Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.  We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !  