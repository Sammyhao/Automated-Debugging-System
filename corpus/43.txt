 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  OBSOLETED: this old question refers to obsoleted Google Maps v1 API. When using v2 API, you can use multiple certificate fingerprints in one Google API Console entry. API Key is no longer stored in Manifest nor code.  Is it possible to automatically detect, which certificate was used for signing APK? I'd like to have both debug and release Maps certificates in application and pass valid one to MapView constructor.  With such setup I will not make mistake while releasing application - I'm using debug certificate on emulator and my device, then sign with release one before sending app to Market.  I was thinking about detecting my particular device or whether debugger is connected but it is not perfect. Maybe some file marking need for debug certificate? Is there any better way?  11 Answers 11  There is a new way to determine is it a debug build or release one in SDK Tools, Revision 17. An excerpt from new features overview:  Builds now generate a class called BuildConfig containing a DEBUG constant that is automatically set according to your build type. You can check the (BuildConfig.DEBUG) constant in your code to run debug-only functions.  Yes this looks like the right way now. I will be moving over once I get rev 17, just giving it a few days before downloading first.  Changing accepted answer as SDK rev 17 is available, in some cases other high-voted answers can be still valuable.  Just wanted to replace the previous debug detection code with this one, but the mentioned bug still as of now seems to exist.  Had the same hassle with the API key. Here's a full solution, based on the above link and example from Bijarni (which somehow didn't work for me), I use now this method:  You have to find out your debug signature's hashValue() once, just output sigs[i].hashCode().  Then, I didn't want to dynamically add the MapView, but rather use the xml file. You cannot set the api key attribute in the code and use an xml layout, so I use this simple method (though copying the xml layout isn't so beautiful):  6,26644 gold badges3131 silver badges3030 bronze badges  3  4  One remark - I don't like your two layouts as it requires to do any changes simultaneously in two files, instead I'm creating MapView via and adding it to the current layout.  Yes, I had it dynamically created at first too, but since my map activity layout won't change and I wanted all layouts in one place (xml definition) and no mix-up, I'chosen the above. Both works fine of course.  You could always have 3 layout files and the 2 you switch on just have two <include>'s to your actual implementation above and below the MapView.  Much easier way to determine whether it is a debug build is by checking the debug flag on the application info than the signature hash.  Once debug build is found, either you can use different resource for showing map or create the mapview within the app and add to a layout.  This is a good solution if you always set android:debuggable=true while developing and android:debuggable=false if not. I however found that I turn off debuggable only at the very end of the development and testing, but will often send signed .apks to the client before. Hence the signature key works better for me in that case.  Hi Bachi, From SDK Tools revision 8, developer.android.com/sdk/tools-notes.html (General notes) you dont need to add debuggable flag in the AndroidManifest, the tools automatically sets them based on release or development.  I think revision 16 stops doing this... I encountered problems with this in my latest app, and had to change my approach to this: stackoverflow.com/questions/8480763/…  All answers here seem outdated, if you are using android studio then gradle is the way to go  And if you want to save some passwords for debug and release differently then you should follow this  I have worked around the horrendous mis-integration of the api keys into the build process and source control by making it a property stored in . I had to add the following to :  Now, of course I had to create in my projects root (it can't go to because it will break the build process):  During pre-compilation, the template is copied to the right place and @apiKey@ is replaced with the real key. Unfortunately I have not found a way to distinguish between debug and release builds in this phase, so to compile for release, I just add the release apiKey to the ant parameters:  This approach integrates well with SCM (I do not need to check in the keys) and acceptably with the build process.  If you're still interested I just blogged about another way to do this. With a simple change to the Android build script, you can switch the Map API key as well as all other required release changes. What I like about this is that nothing debug-related goes into the release, and you can keep the XML layouts just the way they were before.  2,23811 gold badge2323 silver badges3131 bronze badges  1  Thanks Andy, I updated the response. (I really have to fix that missing redirect)  I think that creating an entry in the Google API's console which includes both your release key and your debug key (both mapping to the same package) works great and is a much simpler way to not have to worry about whether you are debuging or compiling a release version. The solution is outlined here  36511 gold badge33 silver badges1111 bronze badges  1  Adding multiple sha1 keys works perfectly fine for Maps API 2 - all solutions mentioned here are for the previous API 1 where there was no comfortable solution.  I've ended up with the special file on SD card - if present, use debug key; missing - use release one. And it works.  I don't know if this helps anyone but I have merged some of the other suggestions here to produce the following MapViewActivity.  In this example R.layout.map_dbg is only used if this is a debug build and the file exists (add this file to your .gitignore).  The advantages of this approach are :  you don't need to write an ant target (good if you use eclipse)  the correct release key is always in map.xml (hopefully a debug key won't be checked in by mistake)  the release key is always used for a release build  multiple debug keys can be used  The disadvantages of this approach are :  you need to remember to update map_dbg.xml every time map.xml is updated  I have setup a simple ant target that replaces the apikey with either a debug key or a release key. This is really simple and keeps the code free of unwanted logic.  In Map V2 Its easy to send seperate keys using Android Studio Gradle tool. I have implemented an easy way for that. please check the link here.  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  