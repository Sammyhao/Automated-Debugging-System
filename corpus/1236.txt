 your communities  Find centralized, trusted content and collaborate around the technologies you use most.  Connect and share knowledge within a single location that is structured and easy to search.  I'm trying to use zip_iterator with a sort_by_key() in cuda and the values inside the zip_iterator are not getting re-ordered during the sort (the positions of the data stay the same as they were originally).  Example code:  What i expect this code to do is sort based on the value in keyVec (which it does properly) while maintaining the order of fooVec and barVec. Is this not what sort_by_key does? does sort_by_key work with zip_iterators? Am i doing something incorrect when setting up/pulling the data from the zip_iterator? If this method is incorrect what is the proper method to keep value ordering?  EX:  Using Thrust that ships with CUDA 4.1  System Details:  UPDATE: Still cannot get sort_by_key() to work with zip_iterators but it works correctly with a standard thrust::device_vector<>.begin() iterator.  This ought to work. @NothingMore: What are your system details (OS, hardware, debug/release mode, etc)  Iv added that information to the question. If you need additional details i can add them (im compiling in release mode).  1 Answer 1  should be able to sort in the manner of your example.  I've not been able to reproduce the behavior you describe on any of several different platforms, but it's possible there's something unique about your system which causes an issue.  You should post the contents of and the details of your system to Thrust's bug tracker on Google Code so the developers can take a closer look.  10.7k22 gold badges3434 silver badges7474 bronze badges  3  Thanks for taking the time to try and figure this out. Iv actually been able to locate the issue on the particular machine that i am using. We use torque for scheduling on this machine and it was by default setting the gpu mode into exclusive_thread mode. Changing this mode to exclusive_process when launching my job seem's to have fixed the issue (values are being re-ordered correctly).  Not sure what exclusive_thread mode vs. exclusive_process mode are, but it doesn't make sense to me that this would cause keys but not values to be sorted...  exclusive_thread from what i gather from the torque doc's makes it so that only a single user thread can actually make GPU calls. However this may be setup improperly on the system that im using (also apparently it's a fairly new feature only supported by nvidia drivers later then 270, so there may be bugs with it in torque still).  By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy.  